// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain facilitates obtaining document snapshots with DOM, layout, and style information.</summary>
  public static partial class DOMSnapshot
  {
    /// <summary>A Node in the DOM tree.</summary>
    /// <param name="NodeType">`Node`&#39;s nodeType.</param>
    /// <param name="NodeName">`Node`&#39;s nodeName.</param>
    /// <param name="NodeValue">`Node`&#39;s nodeValue.</param>
    /// <param name="BackendNodeId">`Node`&#39;s id, corresponds to DOM.Node.backendNodeId.</param>
    /// <param name="TextValue">Only set for textarea elements, contains the text value.</param>
    /// <param name="InputValue">Only set for input elements, contains the input&#39;s associated text value.</param>
    /// <param name="InputChecked">Only set for radio and checkbox input elements, indicates if the element has been checked</param>
    /// <param name="OptionSelected">Only set for option elements, indicates if the element has been selected</param>
    /// <param name="ChildNodeIndexes">
    /// The indexes of the node&#39;s child nodes in the `domNodes` array returned by `getSnapshot`, if<br/>
    /// any.<br/>
    /// </param>
    /// <param name="Attributes">Attributes of an `Element` node.</param>
    /// <param name="PseudoElementIndexes">
    /// Indexes of pseudo elements associated with this node in the `domNodes` array returned by<br/>
    /// `getSnapshot`, if any.<br/>
    /// </param>
    /// <param name="LayoutNodeIndex">
    /// The index of the node&#39;s related layout tree node in the `layoutTreeNodes` array returned by<br/>
    /// `getSnapshot`, if any.<br/>
    /// </param>
    /// <param name="DocumentURL">Document URL that `Document` or `FrameOwner` node points to.</param>
    /// <param name="BaseURL">Base URL that `Document` or `FrameOwner` node uses for URL completion.</param>
    /// <param name="ContentLanguage">Only set for documents, contains the document&#39;s content language.</param>
    /// <param name="DocumentEncoding">Only set for documents, contains the document&#39;s character set encoding.</param>
    /// <param name="PublicId">`DocumentType` node&#39;s publicId.</param>
    /// <param name="SystemId">`DocumentType` node&#39;s systemId.</param>
    /// <param name="FrameId">Frame ID for frame owner elements and also for the document node.</param>
    /// <param name="ContentDocumentIndex">
    /// The index of a frame owner element&#39;s content document in the `domNodes` array returned by<br/>
    /// `getSnapshot`, if any.<br/>
    /// </param>
    /// <param name="PseudoType">Type of a pseudo element node.</param>
    /// <param name="ShadowRootType">Shadow root type.</param>
    /// <param name="IsClickable">
    /// Whether this DOM node responds to mouse clicks. This includes nodes that have had click<br/>
    /// event listeners attached via JavaScript as well as anchor tags that naturally navigate when<br/>
    /// clicked.<br/>
    /// </param>
    /// <param name="EventListeners">Details of the node&#39;s event listeners, if any.</param>
    /// <param name="CurrentSourceURL">The selected url for nodes with a srcset attribute.</param>
    /// <param name="OriginURL">The url of the script (if any) that generates this node.</param>
    /// <param name="ScrollOffsetX">Scroll offsets, set when this node is a Document.</param>
    public record DOMNodeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeType")]
      int NodeType,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeName")]
      string NodeName,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeValue")]
      string NodeValue,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType BackendNodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("textValue")]
      string? TextValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inputValue")]
      string? InputValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inputChecked")]
      bool? InputChecked = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("optionSelected")]
      bool? OptionSelected = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("childNodeIndexes")]
      System.Collections.Generic.IReadOnlyList<int>? ChildNodeIndexes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.NameValueType>? Attributes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoElementIndexes")]
      System.Collections.Generic.IReadOnlyList<int>? PseudoElementIndexes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("layoutNodeIndex")]
      int? LayoutNodeIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("documentURL")]
      string? DocumentURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("baseURL")]
      string? BaseURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentLanguage")]
      string? ContentLanguage = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("documentEncoding")]
      string? DocumentEncoding = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("publicId")]
      string? PublicId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("systemId")]
      string? SystemId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentDocumentIndex")]
      int? ContentDocumentIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoType")]
      ChromeProtocol.Domains.DOM.PseudoTypeType? PseudoType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("shadowRootType")]
      ChromeProtocol.Domains.DOM.ShadowRootTypeType? ShadowRootType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isClickable")]
      bool? IsClickable = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("eventListeners")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMDebugger.EventListenerType>? EventListeners = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("currentSourceURL")]
      string? CurrentSourceURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("originURL")]
      string? OriginURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollOffsetX")]
      double? ScrollOffsetX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollOffsetY")]
      double? ScrollOffsetY = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Details of post layout rendered text positions. The exact layout should not be regarded as<br/>
    /// stable and may change between versions.<br/>
    /// </summary>
    /// <param name="BoundingBox">The bounding box in document coordinates. Note that scroll offset of the document is ignored.</param>
    /// <param name="StartCharacterIndex">
    /// The starting index in characters, for this post layout textbox substring. Characters that<br/>
    /// would be represented as a surrogate pair in UTF-16 have length 2.<br/>
    /// </param>
    /// <param name="NumCharacters">
    /// The number of characters in this post layout textbox substring. Characters that would be<br/>
    /// represented as a surrogate pair in UTF-16 have length 2.<br/>
    /// </param>
    public record InlineTextBoxType(
      [property: System.Text.Json.Serialization.JsonPropertyName("boundingBox")]
      ChromeProtocol.Domains.DOM.RectType BoundingBox,
      [property: System.Text.Json.Serialization.JsonPropertyName("startCharacterIndex")]
      int StartCharacterIndex,
      [property: System.Text.Json.Serialization.JsonPropertyName("numCharacters")]
      int NumCharacters
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Details of an element in the DOM tree with a LayoutObject.</summary>
    /// <param name="DomNodeIndex">The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.</param>
    /// <param name="BoundingBox">The bounding box in document coordinates. Note that scroll offset of the document is ignored.</param>
    /// <param name="LayoutText">Contents of the LayoutText, if any.</param>
    /// <param name="InlineTextNodes">The post-layout inline text nodes, if any.</param>
    /// <param name="StyleIndex">Index into the `computedStyles` array returned by `getSnapshot`.</param>
    /// <param name="PaintOrder">
    /// Global paint order index, which is determined by the stacking order of the nodes. Nodes<br/>
    /// that are painted together will have the same index. Only provided if includePaintOrder in<br/>
    /// getSnapshot was true.<br/>
    /// </param>
    /// <param name="IsStackingContext">Set to true to indicate the element begins a new stacking context.</param>
    public record LayoutTreeNodeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("domNodeIndex")]
      int DomNodeIndex,
      [property: System.Text.Json.Serialization.JsonPropertyName("boundingBox")]
      ChromeProtocol.Domains.DOM.RectType BoundingBox,
      [property: System.Text.Json.Serialization.JsonPropertyName("layoutText")]
      string? LayoutText = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inlineTextNodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.InlineTextBoxType>? InlineTextNodes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleIndex")]
      int? StyleIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("paintOrder")]
      int? PaintOrder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isStackingContext")]
      bool? IsStackingContext = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>A subset of the full ComputedStyle as defined by the request whitelist.</summary>
    /// <param name="Properties">Name/value pairs of computed style properties.</param>
    public record ComputedStyleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("properties")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.NameValueType> Properties
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>A name/value pair.</summary>
    /// <param name="Name">Attribute/property name.</param>
    /// <param name="Value">Attribute/property value.</param>
    public record NameValueType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Index of the string in the strings table.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StringIndexType(
      int Value
    ) : ChromeProtocol.Core.PrimitiveType<int>(Value)
    {
    }
    /// <summary>Index of the string in the strings table.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.ArrayTypeConverter))]
    public record ArrayOfStringsType(
      System.Collections.Generic.IReadOnlyCollection<System.Text.Json.Nodes.JsonNode> Items
    ) : ChromeProtocol.Core.IArrayType
    {
    }
    /// <summary>Data that is only present on rare nodes.</summary>
    public record RareStringDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("index")]
      System.Collections.Generic.IReadOnlyList<int> Index,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.StringIndexType> Value
    ) : ChromeProtocol.Core.IType
    {
    }
    public record RareBooleanDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("index")]
      System.Collections.Generic.IReadOnlyList<int> Index
    ) : ChromeProtocol.Core.IType
    {
    }
    public record RareIntegerDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("index")]
      System.Collections.Generic.IReadOnlyList<int> Index,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      System.Collections.Generic.IReadOnlyList<int> Value
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.ArrayTypeConverter))]
    public record RectangleType(
      System.Collections.Generic.IReadOnlyCollection<System.Text.Json.Nodes.JsonNode> Items
    ) : ChromeProtocol.Core.IArrayType
    {
    }
    /// <summary>Document snapshot.</summary>
    /// <param name="DocumentURL">Document URL that `Document` or `FrameOwner` node points to.</param>
    /// <param name="Title">Document title.</param>
    /// <param name="BaseURL">Base URL that `Document` or `FrameOwner` node uses for URL completion.</param>
    /// <param name="ContentLanguage">Contains the document&#39;s content language.</param>
    /// <param name="EncodingName">Contains the document&#39;s character set encoding.</param>
    /// <param name="PublicId">`DocumentType` node&#39;s publicId.</param>
    /// <param name="SystemId">`DocumentType` node&#39;s systemId.</param>
    /// <param name="FrameId">Frame ID for frame owner elements and also for the document node.</param>
    /// <param name="Nodes">A table with dom nodes.</param>
    /// <param name="Layout">The nodes in the layout tree.</param>
    /// <param name="TextBoxes">The post-layout inline text nodes.</param>
    /// <param name="ScrollOffsetX">Horizontal scroll offset.</param>
    /// <param name="ScrollOffsetY">Vertical scroll offset.</param>
    /// <param name="ContentWidth">Document content width.</param>
    /// <param name="ContentHeight">Document content height.</param>
    public record DocumentSnapshotType(
      [property: System.Text.Json.Serialization.JsonPropertyName("documentURL")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType DocumentURL,
      [property: System.Text.Json.Serialization.JsonPropertyName("title")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType Title,
      [property: System.Text.Json.Serialization.JsonPropertyName("baseURL")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType BaseURL,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentLanguage")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType ContentLanguage,
      [property: System.Text.Json.Serialization.JsonPropertyName("encodingName")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType EncodingName,
      [property: System.Text.Json.Serialization.JsonPropertyName("publicId")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType PublicId,
      [property: System.Text.Json.Serialization.JsonPropertyName("systemId")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType SystemId,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.DOMSnapshot.StringIndexType FrameId,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      ChromeProtocol.Domains.DOMSnapshot.NodeTreeSnapshotType Nodes,
      [property: System.Text.Json.Serialization.JsonPropertyName("layout")]
      ChromeProtocol.Domains.DOMSnapshot.LayoutTreeSnapshotType Layout,
      [property: System.Text.Json.Serialization.JsonPropertyName("textBoxes")]
      ChromeProtocol.Domains.DOMSnapshot.TextBoxSnapshotType TextBoxes,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollOffsetX")]
      double? ScrollOffsetX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollOffsetY")]
      double? ScrollOffsetY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentWidth")]
      double? ContentWidth = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentHeight")]
      double? ContentHeight = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Table containing nodes.</summary>
    /// <param name="ParentIndex">Parent node index.</param>
    /// <param name="NodeType">`Node`&#39;s nodeType.</param>
    /// <param name="ShadowRootType">Type of the shadow root the `Node` is in. String values are equal to the `ShadowRootType` enum.</param>
    /// <param name="NodeName">`Node`&#39;s nodeName.</param>
    /// <param name="NodeValue">`Node`&#39;s nodeValue.</param>
    /// <param name="BackendNodeId">`Node`&#39;s id, corresponds to DOM.Node.backendNodeId.</param>
    /// <param name="Attributes">Attributes of an `Element` node. Flatten name, value pairs.</param>
    /// <param name="TextValue">Only set for textarea elements, contains the text value.</param>
    /// <param name="InputValue">Only set for input elements, contains the input&#39;s associated text value.</param>
    /// <param name="InputChecked">Only set for radio and checkbox input elements, indicates if the element has been checked</param>
    /// <param name="OptionSelected">Only set for option elements, indicates if the element has been selected</param>
    /// <param name="ContentDocumentIndex">The index of the document in the list of the snapshot documents.</param>
    /// <param name="PseudoType">Type of a pseudo element node.</param>
    /// <param name="PseudoIdentifier">
    /// Pseudo element identifier for this node. Only present if there is a<br/>
    /// valid pseudoType.<br/>
    /// </param>
    /// <param name="IsClickable">
    /// Whether this DOM node responds to mouse clicks. This includes nodes that have had click<br/>
    /// event listeners attached via JavaScript as well as anchor tags that naturally navigate when<br/>
    /// clicked.<br/>
    /// </param>
    /// <param name="CurrentSourceURL">The selected url for nodes with a srcset attribute.</param>
    /// <param name="OriginURL">The url of the script (if any) that generates this node.</param>
    public record NodeTreeSnapshotType(
      [property: System.Text.Json.Serialization.JsonPropertyName("parentIndex")]
      System.Collections.Generic.IReadOnlyList<int>? ParentIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeType")]
      System.Collections.Generic.IReadOnlyList<int>? NodeType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("shadowRootType")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? ShadowRootType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeName")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.StringIndexType>? NodeName = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeValue")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.StringIndexType>? NodeValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOM.BackendNodeIdType>? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.ArrayOfStringsType>? Attributes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("textValue")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? TextValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inputValue")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? InputValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inputChecked")]
      ChromeProtocol.Domains.DOMSnapshot.RareBooleanDataType? InputChecked = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("optionSelected")]
      ChromeProtocol.Domains.DOMSnapshot.RareBooleanDataType? OptionSelected = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentDocumentIndex")]
      ChromeProtocol.Domains.DOMSnapshot.RareIntegerDataType? ContentDocumentIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoType")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? PseudoType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoIdentifier")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? PseudoIdentifier = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isClickable")]
      ChromeProtocol.Domains.DOMSnapshot.RareBooleanDataType? IsClickable = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("currentSourceURL")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? CurrentSourceURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("originURL")]
      ChromeProtocol.Domains.DOMSnapshot.RareStringDataType? OriginURL = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Table of details of an element in the DOM tree with a LayoutObject.</summary>
    /// <param name="NodeIndex">Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.</param>
    /// <param name="Styles">Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.</param>
    /// <param name="Bounds">The absolute position bounding box.</param>
    /// <param name="Text">Contents of the LayoutText, if any.</param>
    /// <param name="StackingContexts">Stacking context information.</param>
    /// <param name="PaintOrders">
    /// Global paint order index, which is determined by the stacking order of the nodes. Nodes<br/>
    /// that are painted together will have the same index. Only provided if includePaintOrder in<br/>
    /// captureSnapshot was true.<br/>
    /// </param>
    /// <param name="OffsetRects">The offset rect of nodes. Only available when includeDOMRects is set to true</param>
    /// <param name="ScrollRects">The scroll rect of nodes. Only available when includeDOMRects is set to true</param>
    /// <param name="ClientRects">The client rect of nodes. Only available when includeDOMRects is set to true</param>
    /// <param name="BlendedBackgroundColors">The list of background colors that are blended with colors of overlapping elements.</param>
    /// <param name="TextColorOpacities">The list of computed text opacities.</param>
    public record LayoutTreeSnapshotType(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeIndex")]
      System.Collections.Generic.IReadOnlyList<int> NodeIndex,
      [property: System.Text.Json.Serialization.JsonPropertyName("styles")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.ArrayOfStringsType> Styles,
      [property: System.Text.Json.Serialization.JsonPropertyName("bounds")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.RectangleType> Bounds,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.StringIndexType> Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("stackingContexts")]
      ChromeProtocol.Domains.DOMSnapshot.RareBooleanDataType StackingContexts,
      [property: System.Text.Json.Serialization.JsonPropertyName("paintOrders")]
      System.Collections.Generic.IReadOnlyList<int>? PaintOrders = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("offsetRects")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.RectangleType>? OffsetRects = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollRects")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.RectangleType>? ScrollRects = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clientRects")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.RectangleType>? ClientRects = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("blendedBackgroundColors")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.StringIndexType>? BlendedBackgroundColors = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("textColorOpacities")]
      System.Collections.Generic.IReadOnlyList<double>? TextColorOpacities = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Table of details of the post layout rendered text positions. The exact layout should not be regarded as<br/>
    /// stable and may change between versions.<br/>
    /// </summary>
    /// <param name="LayoutIndex">Index of the layout tree node that owns this box collection.</param>
    /// <param name="Bounds">The absolute position bounding box.</param>
    /// <param name="Start">
    /// The starting index in characters, for this post layout textbox substring. Characters that<br/>
    /// would be represented as a surrogate pair in UTF-16 have length 2.<br/>
    /// </param>
    /// <param name="Length">
    /// The number of characters in this post layout textbox substring. Characters that would be<br/>
    /// represented as a surrogate pair in UTF-16 have length 2.<br/>
    /// </param>
    public record TextBoxSnapshotType(
      [property: System.Text.Json.Serialization.JsonPropertyName("layoutIndex")]
      System.Collections.Generic.IReadOnlyList<int> LayoutIndex,
      [property: System.Text.Json.Serialization.JsonPropertyName("bounds")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.RectangleType> Bounds,
      [property: System.Text.Json.Serialization.JsonPropertyName("start")]
      System.Collections.Generic.IReadOnlyList<int> Start,
      [property: System.Text.Json.Serialization.JsonPropertyName("length")]
      System.Collections.Generic.IReadOnlyList<int> Length
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables DOM snapshot agent for the given page.</summary>
    public static ChromeProtocol.Domains.DOMSnapshot.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.DOMSnapshot.DisableRequest();
    }
    /// <summary>Disables DOM snapshot agent for the given page.</summary>
    [ChromeProtocol.Core.MethodName("DOMSnapshot.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables DOM snapshot agent for the given page.</summary>
    public static ChromeProtocol.Domains.DOMSnapshot.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.DOMSnapshot.EnableRequest();
    }
    /// <summary>Enables DOM snapshot agent for the given page.</summary>
    [ChromeProtocol.Core.MethodName("DOMSnapshot.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns a document snapshot, including the full DOM tree of the root node (including iframes,<br/>
    /// template contents, and imported documents) in a flattened array, as well as layout and<br/>
    /// white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is<br/>
    /// flattened.<br/>
    /// </summary>
    /// <param name="ComputedStyleWhitelist">Whitelist of computed styles to return.</param>
    /// <param name="IncludeEventListeners">Whether or not to retrieve details of DOM listeners (default false).</param>
    /// <param name="IncludePaintOrder">Whether to determine and include the paint order index of LayoutTreeNodes (default false).</param>
    /// <param name="IncludeUserAgentShadowTree">Whether to include UA shadow tree in the snapshot (default false).</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.DOMSnapshot.GetSnapshotRequest GetSnapshot(System.Collections.Generic.IReadOnlyList<string> ComputedStyleWhitelist, bool? IncludeEventListeners = default, bool? IncludePaintOrder = default, bool? IncludeUserAgentShadowTree = default)    
    {
      return new ChromeProtocol.Domains.DOMSnapshot.GetSnapshotRequest(ComputedStyleWhitelist, IncludeEventListeners, IncludePaintOrder, IncludeUserAgentShadowTree);
    }
    /// <summary>
    /// Returns a document snapshot, including the full DOM tree of the root node (including iframes,<br/>
    /// template contents, and imported documents) in a flattened array, as well as layout and<br/>
    /// white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is<br/>
    /// flattened.<br/>
    /// </summary>
    /// <param name="ComputedStyleWhitelist">Whitelist of computed styles to return.</param>
    /// <param name="IncludeEventListeners">Whether or not to retrieve details of DOM listeners (default false).</param>
    /// <param name="IncludePaintOrder">Whether to determine and include the paint order index of LayoutTreeNodes (default false).</param>
    /// <param name="IncludeUserAgentShadowTree">Whether to include UA shadow tree in the snapshot (default false).</param>
    [ChromeProtocol.Core.MethodName("DOMSnapshot.getSnapshot")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record GetSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("computedStyleWhitelist")]
      System.Collections.Generic.IReadOnlyList<string> ComputedStyleWhitelist,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeEventListeners")]
      bool? IncludeEventListeners = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includePaintOrder")]
      bool? IncludePaintOrder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeUserAgentShadowTree")]
      bool? IncludeUserAgentShadowTree = default
    ) : ChromeProtocol.Core.ICommand<GetSnapshotRequestResult>
    {
    }
    /// <param name="DomNodes">The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.</param>
    /// <param name="LayoutTreeNodes">The nodes in the layout tree.</param>
    /// <param name="ComputedStyles">Whitelisted ComputedStyle properties for each node in the layout tree.</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record GetSnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("domNodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.DOMNodeType> DomNodes,
      [property: System.Text.Json.Serialization.JsonPropertyName("layoutTreeNodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.LayoutTreeNodeType> LayoutTreeNodes,
      [property: System.Text.Json.Serialization.JsonPropertyName("computedStyles")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.ComputedStyleType> ComputedStyles
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns a document snapshot, including the full DOM tree of the root node (including iframes,<br/>
    /// template contents, and imported documents) in a flattened array, as well as layout and<br/>
    /// white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is<br/>
    /// flattened.<br/>
    /// </summary>
    /// <param name="ComputedStyles">Whitelist of computed styles to return.</param>
    /// <param name="IncludePaintOrder">Whether to include layout object paint orders into the snapshot.</param>
    /// <param name="IncludeDOMRects">Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot</param>
    /// <param name="IncludeBlendedBackgroundColors">
    /// Whether to include blended background colors in the snapshot (default: false).<br/>
    /// Blended background color is achieved by blending background colors of all elements<br/>
    /// that overlap with the current element.<br/>
    /// </param>
    /// <param name="IncludeTextColorOpacities">
    /// Whether to include text color opacity in the snapshot (default: false).<br/>
    /// An element might have the opacity property set that affects the text color of the element.<br/>
    /// The final text color opacity is computed based on the opacity of all overlapping elements.<br/>
    /// </param>
    public static ChromeProtocol.Domains.DOMSnapshot.CaptureSnapshotRequest CaptureSnapshot(System.Collections.Generic.IReadOnlyList<string> ComputedStyles, bool? IncludePaintOrder = default, bool? IncludeDOMRects = default, bool? IncludeBlendedBackgroundColors = default, bool? IncludeTextColorOpacities = default)    
    {
      return new ChromeProtocol.Domains.DOMSnapshot.CaptureSnapshotRequest(ComputedStyles, IncludePaintOrder, IncludeDOMRects, IncludeBlendedBackgroundColors, IncludeTextColorOpacities);
    }
    /// <summary>
    /// Returns a document snapshot, including the full DOM tree of the root node (including iframes,<br/>
    /// template contents, and imported documents) in a flattened array, as well as layout and<br/>
    /// white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is<br/>
    /// flattened.<br/>
    /// </summary>
    /// <param name="ComputedStyles">Whitelist of computed styles to return.</param>
    /// <param name="IncludePaintOrder">Whether to include layout object paint orders into the snapshot.</param>
    /// <param name="IncludeDOMRects">Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot</param>
    /// <param name="IncludeBlendedBackgroundColors">
    /// Whether to include blended background colors in the snapshot (default: false).<br/>
    /// Blended background color is achieved by blending background colors of all elements<br/>
    /// that overlap with the current element.<br/>
    /// </param>
    /// <param name="IncludeTextColorOpacities">
    /// Whether to include text color opacity in the snapshot (default: false).<br/>
    /// An element might have the opacity property set that affects the text color of the element.<br/>
    /// The final text color opacity is computed based on the opacity of all overlapping elements.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("DOMSnapshot.captureSnapshot")]
    public record CaptureSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("computedStyles")]
      System.Collections.Generic.IReadOnlyList<string> ComputedStyles,
      [property: System.Text.Json.Serialization.JsonPropertyName("includePaintOrder")]
      bool? IncludePaintOrder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeDOMRects")]
      bool? IncludeDOMRects = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeBlendedBackgroundColors")]
      bool? IncludeBlendedBackgroundColors = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeTextColorOpacities")]
      bool? IncludeTextColorOpacities = default
    ) : ChromeProtocol.Core.ICommand<CaptureSnapshotRequestResult>
    {
    }
    /// <param name="Documents">The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.</param>
    /// <param name="Strings">Shared string table that all string properties refer to with indexes.</param>
    public record CaptureSnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("documents")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOMSnapshot.DocumentSnapshotType> Documents,
      [property: System.Text.Json.Serialization.JsonPropertyName("strings")]
      System.Collections.Generic.IReadOnlyList<string> Strings
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
