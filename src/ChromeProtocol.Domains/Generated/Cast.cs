// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>
  /// A domain for interacting with Cast, Presentation API, and Remote Playback API<br/>
  /// functionalities.<br/>
  /// </summary>
  public static partial class Cast
  {
    /// <param name="Session">
    /// Text describing the current session. Present only if there is an active<br/>
    /// session on the sink.<br/>
    /// </param>
    public record SinkType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("session")]
      string? Session = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This is fired whenever the list of available sinks changes. A sink is a<br/>
    /// device or a software surface that you can cast to.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Cast.sinksUpdated")]
    public record SinksUpdated(
      [property: System.Text.Json.Serialization.JsonPropertyName("sinks")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Cast.SinkType> Sinks
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// This is fired whenever the outstanding issue/error message changes.<br/>
    /// |issueMessage| is empty if there is no issue.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Cast.issueUpdated")]
    public record IssueUpdated(
      [property: System.Text.Json.Serialization.JsonPropertyName("issueMessage")]
      string IssueMessage
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Starts observing for sinks that can be used for tab mirroring, and if set,<br/>
    /// sinks compatible with |presentationUrl| as well. When sinks are found, a<br/>
    /// |sinksUpdated| event is fired.<br/>
    /// Also starts observing for issue messages. When an issue is added or removed,<br/>
    /// an |issueUpdated| event is fired.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Cast.EnableRequest Enable(string? PresentationUrl = default)    
    {
      return new ChromeProtocol.Domains.Cast.EnableRequest(PresentationUrl);
    }
    /// <summary>
    /// Starts observing for sinks that can be used for tab mirroring, and if set,<br/>
    /// sinks compatible with |presentationUrl| as well. When sinks are found, a<br/>
    /// |sinksUpdated| event is fired.<br/>
    /// Also starts observing for issue messages. When an issue is added or removed,<br/>
    /// an |issueUpdated| event is fired.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Cast.enable")]
    public record EnableRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("presentationUrl")]
      string? PresentationUrl = default
    ) : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Stops observing for sinks and issues.</summary>
    public static ChromeProtocol.Domains.Cast.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Cast.DisableRequest();
    }
    /// <summary>Stops observing for sinks and issues.</summary>
    [ChromeProtocol.Core.MethodName("Cast.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sets a sink to be used when the web page requests the browser to choose a<br/>
    /// sink via Presentation API, Remote Playback API, or Cast SDK.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Cast.SetSinkToUseRequest SetSinkToUse(string SinkName)    
    {
      return new ChromeProtocol.Domains.Cast.SetSinkToUseRequest(SinkName);
    }
    /// <summary>
    /// Sets a sink to be used when the web page requests the browser to choose a<br/>
    /// sink via Presentation API, Remote Playback API, or Cast SDK.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Cast.setSinkToUse")]
    public record SetSinkToUseRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("sinkName")]
      string SinkName
    ) : ChromeProtocol.Core.ICommand<SetSinkToUseRequestResult>
    {
    }
    public record SetSinkToUseRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Starts mirroring the desktop to the sink.</summary>
    public static ChromeProtocol.Domains.Cast.StartDesktopMirroringRequest StartDesktopMirroring(string SinkName)    
    {
      return new ChromeProtocol.Domains.Cast.StartDesktopMirroringRequest(SinkName);
    }
    /// <summary>Starts mirroring the desktop to the sink.</summary>
    [ChromeProtocol.Core.MethodName("Cast.startDesktopMirroring")]
    public record StartDesktopMirroringRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("sinkName")]
      string SinkName
    ) : ChromeProtocol.Core.ICommand<StartDesktopMirroringRequestResult>
    {
    }
    public record StartDesktopMirroringRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Starts mirroring the tab to the sink.</summary>
    public static ChromeProtocol.Domains.Cast.StartTabMirroringRequest StartTabMirroring(string SinkName)    
    {
      return new ChromeProtocol.Domains.Cast.StartTabMirroringRequest(SinkName);
    }
    /// <summary>Starts mirroring the tab to the sink.</summary>
    [ChromeProtocol.Core.MethodName("Cast.startTabMirroring")]
    public record StartTabMirroringRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("sinkName")]
      string SinkName
    ) : ChromeProtocol.Core.ICommand<StartTabMirroringRequestResult>
    {
    }
    public record StartTabMirroringRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Stops the active Cast session on the sink.</summary>
    public static ChromeProtocol.Domains.Cast.StopCastingRequest StopCasting(string SinkName)    
    {
      return new ChromeProtocol.Domains.Cast.StopCastingRequest(SinkName);
    }
    /// <summary>Stops the active Cast session on the sink.</summary>
    [ChromeProtocol.Core.MethodName("Cast.stopCasting")]
    public record StopCastingRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("sinkName")]
      string SinkName
    ) : ChromeProtocol.Core.ICommand<StopCastingRequestResult>
    {
    }
    public record StopCastingRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
