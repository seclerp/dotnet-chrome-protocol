// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Input/Output operations for streams produced by DevTools.</summary>
  public static partial class IO
  {
    /// <summary>
    /// This is either obtained from another method or specified as `blob:&lt;uuid&gt;` where<br/>
    /// `&lt;uuid&gt;` is an UUID of a Blob.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StreamHandleType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Close the stream, discard any temporary backing storage.</summary>
    /// <param name="Handle">Handle of the stream to close.</param>
    public static ChromeProtocol.Domains.IO.CloseRequest Close(ChromeProtocol.Domains.IO.StreamHandleType Handle)    
    {
      return new ChromeProtocol.Domains.IO.CloseRequest(Handle);
    }
    /// <summary>Close the stream, discard any temporary backing storage.</summary>
    /// <param name="Handle">Handle of the stream to close.</param>
    [ChromeProtocol.Core.MethodName("IO.close")]
    public record CloseRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("handle")]
      ChromeProtocol.Domains.IO.StreamHandleType Handle
    ) : ChromeProtocol.Core.ICommand<CloseRequestResult>
    {
    }
    public record CloseRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Read a chunk of the stream</summary>
    /// <param name="Handle">Handle of the stream to read.</param>
    /// <param name="Offset">
    /// Seek to the specified offset before reading (if not specified, proceed with offset<br/>
    /// following the last read). Some types of streams may only support sequential reads.<br/>
    /// </param>
    /// <param name="Size">Maximum number of bytes to read (left upon the agent discretion if not specified).</param>
    public static ChromeProtocol.Domains.IO.ReadRequest Read(ChromeProtocol.Domains.IO.StreamHandleType Handle, int? Offset = default, int? Size = default)    
    {
      return new ChromeProtocol.Domains.IO.ReadRequest(Handle, Offset, Size);
    }
    /// <summary>Read a chunk of the stream</summary>
    /// <param name="Handle">Handle of the stream to read.</param>
    /// <param name="Offset">
    /// Seek to the specified offset before reading (if not specified, proceed with offset<br/>
    /// following the last read). Some types of streams may only support sequential reads.<br/>
    /// </param>
    /// <param name="Size">Maximum number of bytes to read (left upon the agent discretion if not specified).</param>
    [ChromeProtocol.Core.MethodName("IO.read")]
    public record ReadRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("handle")]
      ChromeProtocol.Domains.IO.StreamHandleType Handle,
      [property: System.Text.Json.Serialization.JsonPropertyName("offset")]
      int? Offset = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("size")]
      int? Size = default
    ) : ChromeProtocol.Core.ICommand<ReadRequestResult>
    {
    }
    /// <param name="Data">Data that were read.</param>
    /// <param name="Eof">Set if the end-of-file condition occurred while reading.</param>
    /// <param name="Base64Encoded">Set if the data is base64-encoded</param>
    public record ReadRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      string Data,
      [property: System.Text.Json.Serialization.JsonPropertyName("eof")]
      bool Eof,
      [property: System.Text.Json.Serialization.JsonPropertyName("base64Encoded")]
      bool? Base64Encoded = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Return UUID of Blob object specified by a remote object id.</summary>
    /// <param name="ObjectId">Object id of a Blob object wrapper.</param>
    public static ChromeProtocol.Domains.IO.ResolveBlobRequest ResolveBlob(ChromeProtocol.Domains.Runtime.RemoteObjectIdType ObjectId)    
    {
      return new ChromeProtocol.Domains.IO.ResolveBlobRequest(ObjectId);
    }
    /// <summary>Return UUID of Blob object specified by a remote object id.</summary>
    /// <param name="ObjectId">Object id of a Blob object wrapper.</param>
    [ChromeProtocol.Core.MethodName("IO.resolveBlob")]
    public record ResolveBlobRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType ObjectId
    ) : ChromeProtocol.Core.ICommand<ResolveBlobRequestResult>
    {
    }
    /// <param name="Uuid">UUID of the specified Blob.</param>
    public record ResolveBlobRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("uuid")]
      string Uuid
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
