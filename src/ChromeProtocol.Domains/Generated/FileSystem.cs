// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class FileSystem
  {
    /// <param name="LastModified">Timestamp</param>
    /// <param name="Size">Size in bytes</param>
    public record FileType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("lastModified")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType LastModified,
      [property: System.Text.Json.Serialization.JsonPropertyName("size")]
      double Size,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="NestedFiles">Files that are directly nested under this directory.</param>
    public record DirectoryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("nestedDirectories")]
      System.Collections.Generic.IReadOnlyList<string> NestedDirectories,
      [property: System.Text.Json.Serialization.JsonPropertyName("nestedFiles")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.FileSystem.FileType> NestedFiles
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="StorageKey">Storage key</param>
    /// <param name="PathComponents">Path to the directory using each path component as an array item.</param>
    /// <param name="BucketName">Bucket name. Not passing a `bucketName` will retrieve the default Bucket. (https://developer.mozilla.org/en-US/docs/Web/API/Storage_API#storage_buckets)</param>
    public record BucketFileSystemLocatorType(
      [property: System.Text.Json.Serialization.JsonPropertyName("storageKey")]
      ChromeProtocol.Domains.Storage.SerializedStorageKeyType StorageKey,
      [property: System.Text.Json.Serialization.JsonPropertyName("pathComponents")]
      System.Collections.Generic.IReadOnlyList<string> PathComponents,
      [property: System.Text.Json.Serialization.JsonPropertyName("bucketName")]
      string? BucketName = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FileSystem.GetDirectoryRequest GetDirectory(ChromeProtocol.Domains.FileSystem.BucketFileSystemLocatorType BucketFileSystemLocator)    
    {
      return new ChromeProtocol.Domains.FileSystem.GetDirectoryRequest(BucketFileSystemLocator);
    }
    [ChromeProtocol.Core.MethodName("FileSystem.getDirectory")]
    public record GetDirectoryRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("bucketFileSystemLocator")]
      ChromeProtocol.Domains.FileSystem.BucketFileSystemLocatorType BucketFileSystemLocator
    ) : ChromeProtocol.Core.ICommand<GetDirectoryRequestResult>
    {
    }
    /// <param name="Directory">Returns the directory object at the path.</param>
    public record GetDirectoryRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("directory")]
      ChromeProtocol.Domains.FileSystem.DirectoryType Directory
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
