// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Audits domain allows investigation of page violations and possible improvements.</summary>
  public static partial class Audits
  {
    /// <summary>Information about a cookie that is affected by an inspector issue.</summary>
    /// <param name="Name">The following three properties uniquely identify a cookie</param>
    public record AffectedCookieType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("path")]
      string Path,
      [property: System.Text.Json.Serialization.JsonPropertyName("domain")]
      string Domain
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about a request that is affected by an inspector issue.</summary>
    /// <param name="RequestId">The unique request id.</param>
    public record AffectedRequestType(
      [property: System.Text.Json.Serialization.JsonPropertyName("requestId")]
      ChromeProtocol.Domains.Network.RequestIdType RequestId,
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string? Url = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about the frame affected by an inspector issue.</summary>
    public record AffectedFrameType(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CookieExclusionReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CookieWarningReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CookieOperationType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// This information is currently necessary, as the front-end has a difficult<br/>
    /// time finding a specific cookie. With this, we can convey specific error<br/>
    /// information without the cookie.<br/>
    /// </summary>
    /// <param name="Operation">
    /// Optionally identifies the site-for-cookies and the cookie url, which<br/>
    /// may be used by the front-end as additional context.<br/>
    /// </param>
    /// <param name="Cookie">
    /// If AffectedCookie is not set then rawCookieLine contains the raw<br/>
    /// Set-Cookie header string. This hints at a problem where the<br/>
    /// cookie line is syntactically or semantically malformed in a way<br/>
    /// that no valid cookie could be created.<br/>
    /// </param>
    public record CookieIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("cookieWarningReasons")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Audits.CookieWarningReasonType> CookieWarningReasons,
      [property: System.Text.Json.Serialization.JsonPropertyName("cookieExclusionReasons")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Audits.CookieExclusionReasonType> CookieExclusionReasons,
      [property: System.Text.Json.Serialization.JsonPropertyName("operation")]
      ChromeProtocol.Domains.Audits.CookieOperationType Operation,
      [property: System.Text.Json.Serialization.JsonPropertyName("cookie")]
      ChromeProtocol.Domains.Audits.AffectedCookieType? Cookie = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rawCookieLine")]
      string? RawCookieLine = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("siteForCookies")]
      string? SiteForCookies = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cookieUrl")]
      string? CookieUrl = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType? Request = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record MixedContentResolutionStatusType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record MixedContentResourceTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="ResolutionStatus">The way the mixed content issue is being resolved.</param>
    /// <param name="InsecureURL">The unsafe http url causing the mixed content issue.</param>
    /// <param name="MainResourceURL">The url responsible for the call to an unsafe url.</param>
    /// <param name="ResourceType">
    /// The type of resource causing the mixed content issue (css, js, iframe,<br/>
    /// form,...). Marked as optional because it is mapped to from<br/>
    /// blink::mojom::RequestContextType, which will be replaced<br/>
    /// by network::mojom::RequestDestination<br/>
    /// </param>
    /// <param name="Request">
    /// The mixed content request.<br/>
    /// Does not always exist (e.g. for unsafe form submission urls).<br/>
    /// </param>
    /// <param name="Frame">Optional because not every mixed content issue is necessarily linked to a frame.</param>
    public record MixedContentIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("resolutionStatus")]
      ChromeProtocol.Domains.Audits.MixedContentResolutionStatusType ResolutionStatus,
      [property: System.Text.Json.Serialization.JsonPropertyName("insecureURL")]
      string InsecureURL,
      [property: System.Text.Json.Serialization.JsonPropertyName("mainResourceURL")]
      string MainResourceURL,
      [property: System.Text.Json.Serialization.JsonPropertyName("resourceType")]
      ChromeProtocol.Domains.Audits.MixedContentResourceTypeType? ResourceType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType? Request = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("frame")]
      ChromeProtocol.Domains.Audits.AffectedFrameType? Frame = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enum indicating the reason a response has been blocked. These reasons are<br/>
    /// refinements of the net error BLOCKED_BY_RESPONSE.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record BlockedByResponseReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Details for a request that has been blocked with the BLOCKED_BY_RESPONSE<br/>
    /// code. Currently only used for COEP/COOP, but may be extended to include<br/>
    /// some CSP errors in the future.<br/>
    /// </summary>
    public record BlockedByResponseIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType Request,
      [property: System.Text.Json.Serialization.JsonPropertyName("reason")]
      ChromeProtocol.Domains.Audits.BlockedByResponseReasonType Reason,
      [property: System.Text.Json.Serialization.JsonPropertyName("parentFrame")]
      ChromeProtocol.Domains.Audits.AffectedFrameType? ParentFrame = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("blockedFrame")]
      ChromeProtocol.Domains.Audits.AffectedFrameType? BlockedFrame = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record HeavyAdResolutionStatusType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record HeavyAdReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="Resolution">The resolution status, either blocking the content or warning.</param>
    /// <param name="Reason">The reason the ad was blocked, total network or cpu or peak cpu.</param>
    /// <param name="Frame">The frame that was blocked.</param>
    public record HeavyAdIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("resolution")]
      ChromeProtocol.Domains.Audits.HeavyAdResolutionStatusType Resolution,
      [property: System.Text.Json.Serialization.JsonPropertyName("reason")]
      ChromeProtocol.Domains.Audits.HeavyAdReasonType Reason,
      [property: System.Text.Json.Serialization.JsonPropertyName("frame")]
      ChromeProtocol.Domains.Audits.AffectedFrameType Frame
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record ContentSecurityPolicyViolationTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record SourceCodeLocationType(
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string Url,
      [property: System.Text.Json.Serialization.JsonPropertyName("lineNumber")]
      int LineNumber,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnNumber")]
      int ColumnNumber,
      [property: System.Text.Json.Serialization.JsonPropertyName("scriptId")]
      ChromeProtocol.Domains.Runtime.ScriptIdType? ScriptId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ViolatedDirective">Specific directive that is violated, causing the CSP issue.</param>
    /// <param name="BlockedURL">The url not included in allowed sources.</param>
    public record ContentSecurityPolicyIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("violatedDirective")]
      string ViolatedDirective,
      [property: System.Text.Json.Serialization.JsonPropertyName("isReportOnly")]
      bool IsReportOnly,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentSecurityPolicyViolationType")]
      ChromeProtocol.Domains.Audits.ContentSecurityPolicyViolationTypeType ContentSecurityPolicyViolationType,
      [property: System.Text.Json.Serialization.JsonPropertyName("blockedURL")]
      string? BlockedURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameAncestor")]
      ChromeProtocol.Domains.Audits.AffectedFrameType? FrameAncestor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType? SourceCodeLocation = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? ViolatingNodeId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SharedArrayBufferIssueTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Details for a issue arising from an SAB being instantiated in, or<br/>
    /// transferred to a context that is not cross-origin isolated.<br/>
    /// </summary>
    public record SharedArrayBufferIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType SourceCodeLocation,
      [property: System.Text.Json.Serialization.JsonPropertyName("isWarning")]
      bool IsWarning,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Audits.SharedArrayBufferIssueTypeType Type
    ) : ChromeProtocol.Core.IType
    {
    }
    public record LowTextContrastIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType ViolatingNodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeSelector")]
      string ViolatingNodeSelector,
      [property: System.Text.Json.Serialization.JsonPropertyName("contrastRatio")]
      double ContrastRatio,
      [property: System.Text.Json.Serialization.JsonPropertyName("thresholdAA")]
      double ThresholdAA,
      [property: System.Text.Json.Serialization.JsonPropertyName("thresholdAAA")]
      double ThresholdAAA,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontSize")]
      string FontSize,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontWeight")]
      string FontWeight
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Details for a CORS related issue, e.g. a warning or error related to<br/>
    /// CORS RFC1918 enforcement.<br/>
    /// </summary>
    public record CorsIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("corsErrorStatus")]
      ChromeProtocol.Domains.Network.CorsErrorStatusType CorsErrorStatus,
      [property: System.Text.Json.Serialization.JsonPropertyName("isWarning")]
      bool IsWarning,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType Request,
      [property: System.Text.Json.Serialization.JsonPropertyName("location")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType? Location = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("initiatorOrigin")]
      string? InitiatorOrigin = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("resourceIPAddressSpace")]
      ChromeProtocol.Domains.Network.IPAddressSpaceType? ResourceIPAddressSpace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clientSecurityState")]
      ChromeProtocol.Domains.Network.ClientSecurityStateType? ClientSecurityState = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingIssueTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SharedDictionaryErrorType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Details for issues around &quot;Attribution Reporting API&quot; usage.<br/>
    /// Explainer: https://github.com/WICG/attribution-reporting-api<br/>
    /// </summary>
    public record AttributionReportingIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("violationType")]
      ChromeProtocol.Domains.Audits.AttributionReportingIssueTypeType ViolationType,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType? Request = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? ViolatingNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("invalidParameter")]
      string? InvalidParameter = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Details for issues about documents in Quirks Mode<br/>
    /// or Limited Quirks Mode that affects page layouting.<br/>
    /// </summary>
    /// <param name="IsLimitedQuirksMode">
    /// If false, it means the document&#39;s mode is &quot;quirks&quot;<br/>
    /// instead of &quot;limited-quirks&quot;.<br/>
    /// </param>
    public record QuirksModeIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("isLimitedQuirksMode")]
      bool IsLimitedQuirksMode,
      [property: System.Text.Json.Serialization.JsonPropertyName("documentNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType DocumentNodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string Url,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId,
      [property: System.Text.Json.Serialization.JsonPropertyName("loaderId")]
      ChromeProtocol.Domains.Network.LoaderIdType LoaderId
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Obsolete("This type marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record NavigatorUserAgentIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string Url,
      [property: System.Text.Json.Serialization.JsonPropertyName("location")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType? Location = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record SharedDictionaryIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sharedDictionaryError")]
      ChromeProtocol.Domains.Audits.SharedDictionaryErrorType SharedDictionaryError,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType Request
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record GenericIssueErrorTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Depending on the concrete errorType, different properties are set.</summary>
    /// <param name="ErrorType">Issues with the same errorType are aggregated in the frontend.</param>
    public record GenericIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("errorType")]
      ChromeProtocol.Domains.Audits.GenericIssueErrorTypeType ErrorType,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? ViolatingNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("violatingNodeAttribute")]
      string? ViolatingNodeAttribute = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("request")]
      ChromeProtocol.Domains.Audits.AffectedRequestType? Request = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This issue tracks information needed to print a deprecation message.<br/>
    /// https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md<br/>
    /// </summary>
    /// <param name="Type">One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5</param>
    public record DeprecationIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType SourceCodeLocation,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("affectedFrame")]
      ChromeProtocol.Domains.Audits.AffectedFrameType? AffectedFrame = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This issue warns about sites in the redirect chain of a finished navigation<br/>
    /// that may be flagged as trackers and have their state cleared if they don&#39;t<br/>
    /// receive a user interaction. Note that in this context &#39;site&#39; means eTLD+1.<br/>
    /// For example, if the URL `https://example.test:80/bounce` was in the<br/>
    /// redirect chain, the site reported would be `example.test`.<br/>
    /// </summary>
    public record BounceTrackingIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("trackingSites")]
      System.Collections.Generic.IReadOnlyList<string> TrackingSites
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This issue warns about third-party sites that are accessing cookies on the<br/>
    /// current page, and have been permitted due to having a global metadata grant.<br/>
    /// Note that in this context &#39;site&#39; means eTLD+1. For example, if the URL<br/>
    /// `https://example.test:80/web_page` was accessing cookies, the site reported<br/>
    /// would be `example.test`.<br/>
    /// </summary>
    public record CookieDeprecationMetadataIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("allowedSites")]
      System.Collections.Generic.IReadOnlyList<string> AllowedSites,
      [property: System.Text.Json.Serialization.JsonPropertyName("optOutPercentage")]
      double OptOutPercentage,
      [property: System.Text.Json.Serialization.JsonPropertyName("isOptOutTopLevel")]
      bool IsOptOutTopLevel,
      [property: System.Text.Json.Serialization.JsonPropertyName("operation")]
      ChromeProtocol.Domains.Audits.CookieOperationType Operation
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record ClientHintIssueReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record FederatedAuthRequestIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("federatedAuthRequestIssueReason")]
      ChromeProtocol.Domains.Audits.FederatedAuthRequestIssueReasonType FederatedAuthRequestIssueReason
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Represents the failure reason when a federated authentication reason fails.<br/>
    /// Should be updated alongside RequestIdTokenStatus in<br/>
    /// third_party/blink/public/mojom/devtools/inspector_issue.mojom to include<br/>
    /// all cases except for success.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record FederatedAuthRequestIssueReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record FederatedAuthUserInfoRequestIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("federatedAuthUserInfoRequestIssueReason")]
      ChromeProtocol.Domains.Audits.FederatedAuthUserInfoRequestIssueReasonType FederatedAuthUserInfoRequestIssueReason
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Represents the failure reason when a getUserInfo() call fails.<br/>
    /// Should be updated alongside FederatedAuthUserInfoRequestResult in<br/>
    /// third_party/blink/public/mojom/devtools/inspector_issue.mojom.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record FederatedAuthUserInfoRequestIssueReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// This issue tracks client hints related issues. It&#39;s used to deprecate old<br/>
    /// features, encourage the use of new ones, and provide general guidance.<br/>
    /// </summary>
    public record ClientHintIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType SourceCodeLocation,
      [property: System.Text.Json.Serialization.JsonPropertyName("clientHintIssueReason")]
      ChromeProtocol.Domains.Audits.ClientHintIssueReasonType ClientHintIssueReason
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Url">The URL that failed to load.</param>
    /// <param name="FailureMessage">The failure message for the failed request.</param>
    public record FailedRequestInfoType(
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string Url,
      [property: System.Text.Json.Serialization.JsonPropertyName("failureMessage")]
      string FailureMessage,
      [property: System.Text.Json.Serialization.JsonPropertyName("requestId")]
      ChromeProtocol.Domains.Network.RequestIdType? RequestId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StyleSheetLoadingIssueReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>This issue warns when a referenced stylesheet couldn&#39;t be loaded.</summary>
    /// <param name="SourceCodeLocation">Source code position that referenced the failing stylesheet.</param>
    /// <param name="StyleSheetLoadingIssueReason">Reason why the stylesheet couldn&#39;t be loaded.</param>
    /// <param name="FailedRequestInfo">Contains additional info when the failure was due to a request.</param>
    public record StylesheetLoadingIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType SourceCodeLocation,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetLoadingIssueReason")]
      ChromeProtocol.Domains.Audits.StyleSheetLoadingIssueReasonType StyleSheetLoadingIssueReason,
      [property: System.Text.Json.Serialization.JsonPropertyName("failedRequestInfo")]
      ChromeProtocol.Domains.Audits.FailedRequestInfoType? FailedRequestInfo = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record PropertyRuleIssueReasonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// This issue warns about errors in property rules that lead to property<br/>
    /// registrations being ignored.<br/>
    /// </summary>
    /// <param name="SourceCodeLocation">Source code position of the property rule.</param>
    /// <param name="PropertyRuleIssueReason">Reason why the property rule was discarded.</param>
    /// <param name="PropertyValue">The value of the property rule property that failed to parse</param>
    public record PropertyRuleIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceCodeLocation")]
      ChromeProtocol.Domains.Audits.SourceCodeLocationType SourceCodeLocation,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyRuleIssueReason")]
      ChromeProtocol.Domains.Audits.PropertyRuleIssueReasonType PropertyRuleIssueReason,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyValue")]
      string? PropertyValue = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// A unique identifier for the type of issue. Each type may use one of the<br/>
    /// optional fields in InspectorIssueDetails to convey more specific<br/>
    /// information about the kind of issue.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InspectorIssueCodeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// This struct holds a list of optional fields with additional information<br/>
    /// specific to the kind of issue. When adding a new issue code, please also<br/>
    /// add a new optional field to this type.<br/>
    /// </summary>
    public record InspectorIssueDetailsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("cookieIssueDetails")]
      ChromeProtocol.Domains.Audits.CookieIssueDetailsType? CookieIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("mixedContentIssueDetails")]
      ChromeProtocol.Domains.Audits.MixedContentIssueDetailsType? MixedContentIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("blockedByResponseIssueDetails")]
      ChromeProtocol.Domains.Audits.BlockedByResponseIssueDetailsType? BlockedByResponseIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("heavyAdIssueDetails")]
      ChromeProtocol.Domains.Audits.HeavyAdIssueDetailsType? HeavyAdIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentSecurityPolicyIssueDetails")]
      ChromeProtocol.Domains.Audits.ContentSecurityPolicyIssueDetailsType? ContentSecurityPolicyIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("sharedArrayBufferIssueDetails")]
      ChromeProtocol.Domains.Audits.SharedArrayBufferIssueDetailsType? SharedArrayBufferIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("lowTextContrastIssueDetails")]
      ChromeProtocol.Domains.Audits.LowTextContrastIssueDetailsType? LowTextContrastIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("corsIssueDetails")]
      ChromeProtocol.Domains.Audits.CorsIssueDetailsType? CorsIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributionReportingIssueDetails")]
      ChromeProtocol.Domains.Audits.AttributionReportingIssueDetailsType? AttributionReportingIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("quirksModeIssueDetails")]
      ChromeProtocol.Domains.Audits.QuirksModeIssueDetailsType? QuirksModeIssueDetails = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("navigatorUserAgentIssueDetails")]
      ChromeProtocol.Domains.Audits.NavigatorUserAgentIssueDetailsType? NavigatorUserAgentIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("genericIssueDetails")]
      ChromeProtocol.Domains.Audits.GenericIssueDetailsType? GenericIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("deprecationIssueDetails")]
      ChromeProtocol.Domains.Audits.DeprecationIssueDetailsType? DeprecationIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clientHintIssueDetails")]
      ChromeProtocol.Domains.Audits.ClientHintIssueDetailsType? ClientHintIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("federatedAuthRequestIssueDetails")]
      ChromeProtocol.Domains.Audits.FederatedAuthRequestIssueDetailsType? FederatedAuthRequestIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("bounceTrackingIssueDetails")]
      ChromeProtocol.Domains.Audits.BounceTrackingIssueDetailsType? BounceTrackingIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cookieDeprecationMetadataIssueDetails")]
      ChromeProtocol.Domains.Audits.CookieDeprecationMetadataIssueDetailsType? CookieDeprecationMetadataIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("stylesheetLoadingIssueDetails")]
      ChromeProtocol.Domains.Audits.StylesheetLoadingIssueDetailsType? StylesheetLoadingIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyRuleIssueDetails")]
      ChromeProtocol.Domains.Audits.PropertyRuleIssueDetailsType? PropertyRuleIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("federatedAuthUserInfoRequestIssueDetails")]
      ChromeProtocol.Domains.Audits.FederatedAuthUserInfoRequestIssueDetailsType? FederatedAuthUserInfoRequestIssueDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("sharedDictionaryIssueDetails")]
      ChromeProtocol.Domains.Audits.SharedDictionaryIssueDetailsType? SharedDictionaryIssueDetails = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// A unique id for a DevTools inspector issue. Allows other entities (e.g.<br/>
    /// exceptions, CDP message, console messages, etc.) to reference an issue.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record IssueIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>An inspector issue reported from the back-end.</summary>
    /// <param name="IssueId">
    /// A unique id for this issue. May be omitted if no other entity (e.g.<br/>
    /// exception, CDP message, etc.) is referencing this issue.<br/>
    /// </param>
    public record InspectorIssueType(
      [property: System.Text.Json.Serialization.JsonPropertyName("code")]
      ChromeProtocol.Domains.Audits.InspectorIssueCodeType Code,
      [property: System.Text.Json.Serialization.JsonPropertyName("details")]
      ChromeProtocol.Domains.Audits.InspectorIssueDetailsType Details,
      [property: System.Text.Json.Serialization.JsonPropertyName("issueId")]
      ChromeProtocol.Domains.Audits.IssueIdType? IssueId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [ChromeProtocol.Core.MethodName("Audits.issueAdded")]
    public record IssueAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("issue")]
      ChromeProtocol.Domains.Audits.InspectorIssueType Issue
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Returns the response body and size if it were re-encoded with the specified settings. Only<br/>
    /// applies to images.<br/>
    /// </summary>
    /// <param name="RequestId">Identifier of the network request to get content for.</param>
    /// <param name="Encoding">The encoding to use.</param>
    /// <param name="Quality">The quality of the encoding (0-1). (defaults to 1)</param>
    /// <param name="SizeOnly">Whether to only return the size information (defaults to false).</param>
    public static ChromeProtocol.Domains.Audits.GetEncodedResponseRequest GetEncodedResponse(ChromeProtocol.Domains.Network.RequestIdType RequestId, string Encoding, double? Quality = default, bool? SizeOnly = default)    
    {
      return new ChromeProtocol.Domains.Audits.GetEncodedResponseRequest(RequestId, Encoding, Quality, SizeOnly);
    }
    /// <summary>
    /// Returns the response body and size if it were re-encoded with the specified settings. Only<br/>
    /// applies to images.<br/>
    /// </summary>
    /// <param name="RequestId">Identifier of the network request to get content for.</param>
    /// <param name="Encoding">The encoding to use.</param>
    /// <param name="Quality">The quality of the encoding (0-1). (defaults to 1)</param>
    /// <param name="SizeOnly">Whether to only return the size information (defaults to false).</param>
    [ChromeProtocol.Core.MethodName("Audits.getEncodedResponse")]
    public record GetEncodedResponseRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("requestId")]
      ChromeProtocol.Domains.Network.RequestIdType RequestId,
      [property: System.Text.Json.Serialization.JsonPropertyName("encoding")]
      string Encoding,
      [property: System.Text.Json.Serialization.JsonPropertyName("quality")]
      double? Quality = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("sizeOnly")]
      bool? SizeOnly = default
    ) : ChromeProtocol.Core.ICommand<GetEncodedResponseRequestResult>
    {
    }
    /// <param name="OriginalSize">Size before re-encoding.</param>
    /// <param name="EncodedSize">Size after re-encoding.</param>
    /// <param name="Body">The encoded body as a base64 string. Omitted if sizeOnly is true. (Encoded as a base64 string when passed over JSON)</param>
    public record GetEncodedResponseRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("originalSize")]
      int OriginalSize,
      [property: System.Text.Json.Serialization.JsonPropertyName("encodedSize")]
      int EncodedSize,
      [property: System.Text.Json.Serialization.JsonPropertyName("body")]
      string? Body = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables issues domain, prevents further issues from being reported to the client.</summary>
    public static ChromeProtocol.Domains.Audits.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Audits.DisableRequest();
    }
    /// <summary>Disables issues domain, prevents further issues from being reported to the client.</summary>
    [ChromeProtocol.Core.MethodName("Audits.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables issues domain, sends the issues collected so far to the client by means of the<br/>
    /// `issueAdded` event.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Audits.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Audits.EnableRequest();
    }
    /// <summary>
    /// Enables issues domain, sends the issues collected so far to the client by means of the<br/>
    /// `issueAdded` event.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Audits.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Runs the contrast check for the target page. Found issues are reported<br/>
    /// using Audits.issueAdded event.<br/>
    /// </summary>
    /// <param name="ReportAAA">Whether to report WCAG AAA level issues. Default is false.</param>
    public static ChromeProtocol.Domains.Audits.CheckContrastRequest CheckContrast(bool? ReportAAA = default)    
    {
      return new ChromeProtocol.Domains.Audits.CheckContrastRequest(ReportAAA);
    }
    /// <summary>
    /// Runs the contrast check for the target page. Found issues are reported<br/>
    /// using Audits.issueAdded event.<br/>
    /// </summary>
    /// <param name="ReportAAA">Whether to report WCAG AAA level issues. Default is false.</param>
    [ChromeProtocol.Core.MethodName("Audits.checkContrast")]
    public record CheckContrastRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("reportAAA")]
      bool? ReportAAA = default
    ) : ChromeProtocol.Core.ICommand<CheckContrastRequestResult>
    {
    }
    public record CheckContrastRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Runs the form issues check for the target page. Found issues are reported<br/>
    /// using Audits.issueAdded event.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Audits.CheckFormsIssuesRequest CheckFormsIssues()    
    {
      return new ChromeProtocol.Domains.Audits.CheckFormsIssuesRequest();
    }
    /// <summary>
    /// Runs the form issues check for the target page. Found issues are reported<br/>
    /// using Audits.issueAdded event.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Audits.checkFormsIssues")]
    public record CheckFormsIssuesRequest() : ChromeProtocol.Core.ICommand<CheckFormsIssuesRequestResult>
    {
    }
    public record CheckFormsIssuesRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("formIssues")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Audits.GenericIssueDetailsType> FormIssues
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
