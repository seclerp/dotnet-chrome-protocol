// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>
  /// This domain allows configuring virtual authenticators to test the WebAuthn<br/>
  /// API.<br/>
  /// </summary>
  public static partial class WebAuthn
  {
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AuthenticatorIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AuthenticatorProtocolType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record Ctap2VersionType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AuthenticatorTransportType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="Ctap2Version">Defaults to ctap2_0. Ignored if |protocol| == u2f.</param>
    /// <param name="HasResidentKey">Defaults to false.</param>
    /// <param name="HasUserVerification">Defaults to false.</param>
    /// <param name="HasLargeBlob">
    /// If set to true, the authenticator will support the largeBlob extension.<br/>
    /// https://w3c.github.io/webauthn#largeBlob<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="HasCredBlob">
    /// If set to true, the authenticator will support the credBlob extension.<br/>
    /// https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="HasMinPinLength">
    /// If set to true, the authenticator will support the minPinLength extension.<br/>
    /// https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="HasPrf">
    /// If set to true, the authenticator will support the prf extension.<br/>
    /// https://w3c.github.io/webauthn/#prf-extension<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="AutomaticPresenceSimulation">
    /// If set to true, tests of user presence will succeed immediately.<br/>
    /// Otherwise, they will not be resolved. Defaults to true.<br/>
    /// </param>
    /// <param name="IsUserVerified">
    /// Sets whether User Verification succeeds or fails for an authenticator.<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="DefaultBackupEligibility">
    /// Credentials created by this authenticator will have the backup<br/>
    /// eligibility (BE) flag set to this value. Defaults to false.<br/>
    /// https://w3c.github.io/webauthn/#sctn-credential-backup<br/>
    /// </param>
    /// <param name="DefaultBackupState">
    /// Credentials created by this authenticator will have the backup state<br/>
    /// (BS) flag set to this value. Defaults to false.<br/>
    /// https://w3c.github.io/webauthn/#sctn-credential-backup<br/>
    /// </param>
    public record VirtualAuthenticatorOptionsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("protocol")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorProtocolType Protocol,
      [property: System.Text.Json.Serialization.JsonPropertyName("transport")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorTransportType Transport,
      [property: System.Text.Json.Serialization.JsonPropertyName("ctap2Version")]
      ChromeProtocol.Domains.WebAuthn.Ctap2VersionType? Ctap2Version = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasResidentKey")]
      bool? HasResidentKey = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasUserVerification")]
      bool? HasUserVerification = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasLargeBlob")]
      bool? HasLargeBlob = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasCredBlob")]
      bool? HasCredBlob = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasMinPinLength")]
      bool? HasMinPinLength = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasPrf")]
      bool? HasPrf = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("automaticPresenceSimulation")]
      bool? AutomaticPresenceSimulation = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isUserVerified")]
      bool? IsUserVerified = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("defaultBackupEligibility")]
      bool? DefaultBackupEligibility = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("defaultBackupState")]
      bool? DefaultBackupState = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="PrivateKey">The ECDSA P-256 private key in PKCS#8 format. (Encoded as a base64 string when passed over JSON)</param>
    /// <param name="SignCount">
    /// Signature counter. This is incremented by one for each successful<br/>
    /// assertion.<br/>
    /// See https://w3c.github.io/webauthn/#signature-counter<br/>
    /// </param>
    /// <param name="RpId">
    /// Relying Party ID the credential is scoped to. Must be set when adding a<br/>
    /// credential.<br/>
    /// </param>
    /// <param name="UserHandle">
    /// An opaque byte sequence with a maximum size of 64 bytes mapping the<br/>
    /// credential to a specific user. (Encoded as a base64 string when passed over JSON)<br/>
    /// </param>
    /// <param name="LargeBlob">
    /// The large blob associated with the credential.<br/>
    /// See https://w3c.github.io/webauthn/#sctn-large-blob-extension (Encoded as a base64 string when passed over JSON)<br/>
    /// </param>
    /// <param name="BackupEligibility">
    /// Assertions returned by this credential will have the backup eligibility<br/>
    /// (BE) flag set to this value. Defaults to the authenticator&#39;s<br/>
    /// defaultBackupEligibility value.<br/>
    /// </param>
    /// <param name="BackupState">
    /// Assertions returned by this credential will have the backup state (BS)<br/>
    /// flag set to this value. Defaults to the authenticator&#39;s<br/>
    /// defaultBackupState value.<br/>
    /// </param>
    /// <param name="UserName">
    /// The credential&#39;s user.name property. Equivalent to empty if not set.<br/>
    /// https://w3c.github.io/webauthn/#dom-publickeycredentialentity-name<br/>
    /// </param>
    /// <param name="UserDisplayName">
    /// The credential&#39;s user.displayName property. Equivalent to empty if<br/>
    /// not set.<br/>
    /// https://w3c.github.io/webauthn/#dom-publickeycredentialuserentity-displayname<br/>
    /// </param>
    public record CredentialType(
      [property: System.Text.Json.Serialization.JsonPropertyName("credentialId")]
      string CredentialId,
      [property: System.Text.Json.Serialization.JsonPropertyName("isResidentCredential")]
      bool IsResidentCredential,
      [property: System.Text.Json.Serialization.JsonPropertyName("privateKey")]
      string PrivateKey,
      [property: System.Text.Json.Serialization.JsonPropertyName("signCount")]
      int SignCount,
      [property: System.Text.Json.Serialization.JsonPropertyName("rpId")]
      string? RpId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("userHandle")]
      string? UserHandle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("largeBlob")]
      string? LargeBlob = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backupEligibility")]
      bool? BackupEligibility = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backupState")]
      bool? BackupState = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("userName")]
      string? UserName = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("userDisplayName")]
      string? UserDisplayName = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Triggered when a credential is added to an authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.credentialAdded")]
    public record CredentialAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credential")]
      ChromeProtocol.Domains.WebAuthn.CredentialType Credential
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Triggered when a credential is deleted, e.g. through<br/>
    /// PublicKeyCredential.signalUnknownCredential().<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.credentialDeleted")]
    public record CredentialDeleted(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credentialId")]
      string CredentialId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Triggered when a credential is updated, e.g. through<br/>
    /// PublicKeyCredential.signalCurrentUserDetails().<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.credentialUpdated")]
    public record CredentialUpdated(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credential")]
      ChromeProtocol.Domains.WebAuthn.CredentialType Credential
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Triggered when a credential is used in a webauthn assertion.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.credentialAsserted")]
    public record CredentialAsserted(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credential")]
      ChromeProtocol.Domains.WebAuthn.CredentialType Credential
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Enable the WebAuthn domain and start intercepting credential storage and<br/>
    /// retrieval with a virtual authenticator.<br/>
    /// </summary>
    /// <param name="EnableUI">
    /// Whether to enable the WebAuthn user interface. Enabling the UI is<br/>
    /// recommended for debugging and demo purposes, as it is closer to the real<br/>
    /// experience. Disabling the UI is recommended for automated testing.<br/>
    /// Supported at the embedder&#39;s discretion if UI is available.<br/>
    /// Defaults to false.<br/>
    /// </param>
    public static ChromeProtocol.Domains.WebAuthn.EnableRequest Enable(bool? EnableUI = default)    
    {
      return new ChromeProtocol.Domains.WebAuthn.EnableRequest(EnableUI);
    }
    /// <summary>
    /// Enable the WebAuthn domain and start intercepting credential storage and<br/>
    /// retrieval with a virtual authenticator.<br/>
    /// </summary>
    /// <param name="EnableUI">
    /// Whether to enable the WebAuthn user interface. Enabling the UI is<br/>
    /// recommended for debugging and demo purposes, as it is closer to the real<br/>
    /// experience. Disabling the UI is recommended for automated testing.<br/>
    /// Supported at the embedder&#39;s discretion if UI is available.<br/>
    /// Defaults to false.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("WebAuthn.enable")]
    public record EnableRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enableUI")]
      bool? EnableUI = default
    ) : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disable the WebAuthn domain.</summary>
    public static ChromeProtocol.Domains.WebAuthn.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.WebAuthn.DisableRequest();
    }
    /// <summary>Disable the WebAuthn domain.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Creates and adds a virtual authenticator.</summary>
    public static ChromeProtocol.Domains.WebAuthn.AddVirtualAuthenticatorRequest AddVirtualAuthenticator(ChromeProtocol.Domains.WebAuthn.VirtualAuthenticatorOptionsType Options)    
    {
      return new ChromeProtocol.Domains.WebAuthn.AddVirtualAuthenticatorRequest(Options);
    }
    /// <summary>Creates and adds a virtual authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.addVirtualAuthenticator")]
    public record AddVirtualAuthenticatorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("options")]
      ChromeProtocol.Domains.WebAuthn.VirtualAuthenticatorOptionsType Options
    ) : ChromeProtocol.Core.ICommand<AddVirtualAuthenticatorRequestResult>
    {
    }
    public record AddVirtualAuthenticatorRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.</summary>
    /// <param name="IsBogusSignature">
    /// If isBogusSignature is set, overrides the signature in the authenticator response to be zero.<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="IsBadUV">
    /// If isBadUV is set, overrides the UV bit in the flags in the authenticator response to<br/>
    /// be zero. Defaults to false.<br/>
    /// </param>
    /// <param name="IsBadUP">
    /// If isBadUP is set, overrides the UP bit in the flags in the authenticator response to<br/>
    /// be zero. Defaults to false.<br/>
    /// </param>
    public static ChromeProtocol.Domains.WebAuthn.SetResponseOverrideBitsRequest SetResponseOverrideBits(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, bool? IsBogusSignature = default, bool? IsBadUV = default, bool? IsBadUP = default)    
    {
      return new ChromeProtocol.Domains.WebAuthn.SetResponseOverrideBitsRequest(AuthenticatorId, IsBogusSignature, IsBadUV, IsBadUP);
    }
    /// <summary>Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.</summary>
    /// <param name="IsBogusSignature">
    /// If isBogusSignature is set, overrides the signature in the authenticator response to be zero.<br/>
    /// Defaults to false.<br/>
    /// </param>
    /// <param name="IsBadUV">
    /// If isBadUV is set, overrides the UV bit in the flags in the authenticator response to<br/>
    /// be zero. Defaults to false.<br/>
    /// </param>
    /// <param name="IsBadUP">
    /// If isBadUP is set, overrides the UP bit in the flags in the authenticator response to<br/>
    /// be zero. Defaults to false.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("WebAuthn.setResponseOverrideBits")]
    public record SetResponseOverrideBitsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("isBogusSignature")]
      bool? IsBogusSignature = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isBadUV")]
      bool? IsBadUV = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isBadUP")]
      bool? IsBadUP = default
    ) : ChromeProtocol.Core.ICommand<SetResponseOverrideBitsRequestResult>
    {
    }
    public record SetResponseOverrideBitsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Removes the given authenticator.</summary>
    public static ChromeProtocol.Domains.WebAuthn.RemoveVirtualAuthenticatorRequest RemoveVirtualAuthenticator(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId)    
    {
      return new ChromeProtocol.Domains.WebAuthn.RemoveVirtualAuthenticatorRequest(AuthenticatorId);
    }
    /// <summary>Removes the given authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.removeVirtualAuthenticator")]
    public record RemoveVirtualAuthenticatorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId
    ) : ChromeProtocol.Core.ICommand<RemoveVirtualAuthenticatorRequestResult>
    {
    }
    public record RemoveVirtualAuthenticatorRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Adds the credential to the specified authenticator.</summary>
    public static ChromeProtocol.Domains.WebAuthn.AddCredentialRequest AddCredential(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, ChromeProtocol.Domains.WebAuthn.CredentialType Credential)    
    {
      return new ChromeProtocol.Domains.WebAuthn.AddCredentialRequest(AuthenticatorId, Credential);
    }
    /// <summary>Adds the credential to the specified authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.addCredential")]
    public record AddCredentialRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credential")]
      ChromeProtocol.Domains.WebAuthn.CredentialType Credential
    ) : ChromeProtocol.Core.ICommand<AddCredentialRequestResult>
    {
    }
    public record AddCredentialRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns a single credential stored in the given virtual authenticator that<br/>
    /// matches the credential ID.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.WebAuthn.GetCredentialRequest GetCredential(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, string CredentialId)    
    {
      return new ChromeProtocol.Domains.WebAuthn.GetCredentialRequest(AuthenticatorId, CredentialId);
    }
    /// <summary>
    /// Returns a single credential stored in the given virtual authenticator that<br/>
    /// matches the credential ID.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.getCredential")]
    public record GetCredentialRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credentialId")]
      string CredentialId
    ) : ChromeProtocol.Core.ICommand<GetCredentialRequestResult>
    {
    }
    public record GetCredentialRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("credential")]
      ChromeProtocol.Domains.WebAuthn.CredentialType Credential
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns all the credentials stored in the given virtual authenticator.</summary>
    public static ChromeProtocol.Domains.WebAuthn.GetCredentialsRequest GetCredentials(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId)    
    {
      return new ChromeProtocol.Domains.WebAuthn.GetCredentialsRequest(AuthenticatorId);
    }
    /// <summary>Returns all the credentials stored in the given virtual authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.getCredentials")]
    public record GetCredentialsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId
    ) : ChromeProtocol.Core.ICommand<GetCredentialsRequestResult>
    {
    }
    public record GetCredentialsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("credentials")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.WebAuthn.CredentialType> Credentials
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Removes a credential from the authenticator.</summary>
    public static ChromeProtocol.Domains.WebAuthn.RemoveCredentialRequest RemoveCredential(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, string CredentialId)    
    {
      return new ChromeProtocol.Domains.WebAuthn.RemoveCredentialRequest(AuthenticatorId, CredentialId);
    }
    /// <summary>Removes a credential from the authenticator.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.removeCredential")]
    public record RemoveCredentialRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credentialId")]
      string CredentialId
    ) : ChromeProtocol.Core.ICommand<RemoveCredentialRequestResult>
    {
    }
    public record RemoveCredentialRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears all the credentials from the specified device.</summary>
    public static ChromeProtocol.Domains.WebAuthn.ClearCredentialsRequest ClearCredentials(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId)    
    {
      return new ChromeProtocol.Domains.WebAuthn.ClearCredentialsRequest(AuthenticatorId);
    }
    /// <summary>Clears all the credentials from the specified device.</summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.clearCredentials")]
    public record ClearCredentialsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId
    ) : ChromeProtocol.Core.ICommand<ClearCredentialsRequestResult>
    {
    }
    public record ClearCredentialsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sets whether User Verification succeeds or fails for an authenticator.<br/>
    /// The default is true.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.WebAuthn.SetUserVerifiedRequest SetUserVerified(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, bool IsUserVerified)    
    {
      return new ChromeProtocol.Domains.WebAuthn.SetUserVerifiedRequest(AuthenticatorId, IsUserVerified);
    }
    /// <summary>
    /// Sets whether User Verification succeeds or fails for an authenticator.<br/>
    /// The default is true.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.setUserVerified")]
    public record SetUserVerifiedRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("isUserVerified")]
      bool IsUserVerified
    ) : ChromeProtocol.Core.ICommand<SetUserVerifiedRequestResult>
    {
    }
    public record SetUserVerifiedRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.<br/>
    /// The default is true.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.WebAuthn.SetAutomaticPresenceSimulationRequest SetAutomaticPresenceSimulation(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, bool Enabled)    
    {
      return new ChromeProtocol.Domains.WebAuthn.SetAutomaticPresenceSimulationRequest(AuthenticatorId, Enabled);
    }
    /// <summary>
    /// Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.<br/>
    /// The default is true.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.setAutomaticPresenceSimulation")]
    public record SetAutomaticPresenceSimulationRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetAutomaticPresenceSimulationRequestResult>
    {
    }
    public record SetAutomaticPresenceSimulationRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Allows setting credential properties.<br/>
    /// https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties<br/>
    /// </summary>
    public static ChromeProtocol.Domains.WebAuthn.SetCredentialPropertiesRequest SetCredentialProperties(ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId, string CredentialId, bool? BackupEligibility = default, bool? BackupState = default)    
    {
      return new ChromeProtocol.Domains.WebAuthn.SetCredentialPropertiesRequest(AuthenticatorId, CredentialId, BackupEligibility, BackupState);
    }
    /// <summary>
    /// Allows setting credential properties.<br/>
    /// https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("WebAuthn.setCredentialProperties")]
    public record SetCredentialPropertiesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("authenticatorId")]
      ChromeProtocol.Domains.WebAuthn.AuthenticatorIdType AuthenticatorId,
      [property: System.Text.Json.Serialization.JsonPropertyName("credentialId")]
      string CredentialId,
      [property: System.Text.Json.Serialization.JsonPropertyName("backupEligibility")]
      bool? BackupEligibility = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backupState")]
      bool? BackupState = default
    ) : ChromeProtocol.Core.ICommand<SetCredentialPropertiesRequestResult>
    {
    }
    public record SetCredentialPropertiesRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
