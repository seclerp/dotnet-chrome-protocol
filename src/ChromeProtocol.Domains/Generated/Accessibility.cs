// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class Accessibility
  {
    /// <summary>Unique accessibility node identifier.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AXNodeIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of possible property types.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AXValueTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of possible property sources.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AXValueSourceTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of possible native property sources (as a subtype of a particular AXValueSourceType).</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AXValueNativeSourceTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>A single source for a computed AX property.</summary>
    /// <param name="Type">What type of source this is.</param>
    /// <param name="Value">The value of this property source.</param>
    /// <param name="Attribute">The name of the relevant attribute, if any.</param>
    /// <param name="AttributeValue">The value of the relevant attribute, if any.</param>
    /// <param name="Superseded">Whether this source is superseded by a higher priority source.</param>
    /// <param name="NativeSource">The native markup source for this value, e.g. a `&lt;label&gt;` element.</param>
    /// <param name="NativeSourceValue">The value, such as a node or node list, of the native source.</param>
    /// <param name="Invalid">Whether the value for this property is invalid.</param>
    /// <param name="InvalidReason">Reason for the value being invalid, if it is.</param>
    public record AXValueSourceType(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Accessibility.AXValueSourceTypeType Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      ChromeProtocol.Domains.Accessibility.AXValueType? Value = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attribute")]
      string? Attribute = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributeValue")]
      ChromeProtocol.Domains.Accessibility.AXValueType? AttributeValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("superseded")]
      bool? Superseded = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nativeSource")]
      ChromeProtocol.Domains.Accessibility.AXValueNativeSourceTypeType? NativeSource = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nativeSourceValue")]
      ChromeProtocol.Domains.Accessibility.AXValueType? NativeSourceValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("invalid")]
      bool? Invalid = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("invalidReason")]
      string? InvalidReason = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="BackendDOMNodeId">The BackendNodeId of the related DOM node.</param>
    /// <param name="Idref">The IDRef value provided, if any.</param>
    /// <param name="Text">The text alternative of this node in the current context.</param>
    public record AXRelatedNodeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("backendDOMNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType BackendDOMNodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("idref")]
      string? Idref = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string? Text = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Name">The name of this property.</param>
    /// <param name="Value">The value of this property.</param>
    public record AXPropertyType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      ChromeProtocol.Domains.Accessibility.AXPropertyNameType Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      ChromeProtocol.Domains.Accessibility.AXValueType Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>A single computed AX property.</summary>
    /// <param name="Type">The type of this value.</param>
    /// <param name="Value">The computed value of this property.</param>
    /// <param name="RelatedNodes">One or more related nodes, if applicable.</param>
    /// <param name="Sources">The sources which contributed to the computation of this property.</param>
    public record AXValueType(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Accessibility.AXValueTypeType Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      System.Text.Json.Nodes.JsonNode? Value = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("relatedNodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXRelatedNodeType>? RelatedNodes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("sources")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXValueSourceType>? Sources = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Values of AXProperty name:<br/>
    /// - from &#39;busy&#39; to &#39;roledescription&#39;: states which apply to every AX node<br/>
    /// - from &#39;live&#39; to &#39;root&#39;: attributes which apply to nodes in live regions<br/>
    /// - from &#39;autocomplete&#39; to &#39;valuetext&#39;: attributes which apply to widgets<br/>
    /// - from &#39;checked&#39; to &#39;selected&#39;: states which apply to widgets<br/>
    /// - from &#39;activedescendant&#39; to &#39;owns&#39; - relationships between elements other than parent/child/sibling.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AXPropertyNameType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>A node in the accessibility tree.</summary>
    /// <param name="NodeId">Unique identifier for this node.</param>
    /// <param name="Ignored">Whether this node is ignored for accessibility</param>
    /// <param name="IgnoredReasons">Collection of reasons why this node is hidden.</param>
    /// <param name="Role">This `Node`&#39;s role, whether explicit or implicit.</param>
    /// <param name="ChromeRole">This `Node`&#39;s Chrome raw role.</param>
    /// <param name="Name">The accessible name for this `Node`.</param>
    /// <param name="Description">The accessible description for this `Node`.</param>
    /// <param name="Value">The value for this `Node`.</param>
    /// <param name="Properties">All other properties</param>
    /// <param name="ParentId">ID for this node&#39;s parent.</param>
    /// <param name="ChildIds">IDs for each of this node&#39;s child nodes.</param>
    /// <param name="BackendDOMNodeId">The backend ID for the associated DOM node, if any.</param>
    /// <param name="FrameId">The frame ID for the frame associated with this nodes document.</param>
    public record AXNodeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.Accessibility.AXNodeIdType NodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("ignored")]
      bool Ignored,
      [property: System.Text.Json.Serialization.JsonPropertyName("ignoredReasons")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXPropertyType>? IgnoredReasons = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("role")]
      ChromeProtocol.Domains.Accessibility.AXValueType? Role = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("chromeRole")]
      ChromeProtocol.Domains.Accessibility.AXValueType? ChromeRole = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      ChromeProtocol.Domains.Accessibility.AXValueType? Name = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("description")]
      ChromeProtocol.Domains.Accessibility.AXValueType? Description = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      ChromeProtocol.Domains.Accessibility.AXValueType? Value = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("properties")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXPropertyType>? Properties = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("parentId")]
      ChromeProtocol.Domains.Accessibility.AXNodeIdType? ParentId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("childIds")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeIdType>? ChildIds = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendDOMNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendDOMNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// The loadComplete event mirrors the load complete event sent by the browser to assistive<br/>
    /// technology when the web page has finished loading.<br/>
    /// </summary>
    /// <param name="Root">New document root node.</param>
    [ChromeProtocol.Core.MethodName("Accessibility.loadComplete")]
    public record LoadComplete(
      [property: System.Text.Json.Serialization.JsonPropertyName("root")]
      ChromeProtocol.Domains.Accessibility.AXNodeType Root
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>The nodesUpdated event is sent every time a previously requested node has changed the in tree.</summary>
    /// <param name="Nodes">Updated node data.</param>
    [ChromeProtocol.Core.MethodName("Accessibility.nodesUpdated")]
    public record NodesUpdated(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Disables the accessibility domain.</summary>
    public static ChromeProtocol.Domains.Accessibility.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Accessibility.DisableRequest();
    }
    /// <summary>Disables the accessibility domain.</summary>
    [ChromeProtocol.Core.MethodName("Accessibility.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.<br/>
    /// This turns on accessibility for the page, which can impact performance until accessibility is disabled.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Accessibility.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Accessibility.EnableRequest();
    }
    /// <summary>
    /// Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.<br/>
    /// This turns on accessibility for the page, which can impact performance until accessibility is disabled.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Accessibility.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.</summary>
    /// <param name="NodeId">Identifier of the node to get the partial accessibility tree for.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to get the partial accessibility tree for.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper to get the partial accessibility tree for.</param>
    /// <param name="FetchRelatives">Whether to fetch this node&#39;s ancestors, siblings and children. Defaults to true.</param>
    public static ChromeProtocol.Domains.Accessibility.GetPartialAXTreeRequest GetPartialAXTree(ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default, ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default, ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default, bool? FetchRelatives = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.GetPartialAXTreeRequest(NodeId, BackendNodeId, ObjectId, FetchRelatives);
    }
    /// <summary>Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.</summary>
    /// <param name="NodeId">Identifier of the node to get the partial accessibility tree for.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to get the partial accessibility tree for.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper to get the partial accessibility tree for.</param>
    /// <param name="FetchRelatives">Whether to fetch this node&#39;s ancestors, siblings and children. Defaults to true.</param>
    [ChromeProtocol.Core.MethodName("Accessibility.getPartialAXTree")]
    public record GetPartialAXTreeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("fetchRelatives")]
      bool? FetchRelatives = default
    ) : ChromeProtocol.Core.ICommand<GetPartialAXTreeRequestResult>
    {
    }
    /// <param name="Nodes">
    /// The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and<br/>
    /// children, if requested.<br/>
    /// </param>
    public record GetPartialAXTreeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Fetches the entire accessibility tree for the root Document</summary>
    /// <param name="Depth">
    /// The maximum depth at which descendants of the root node should be retrieved.<br/>
    /// If omitted, the full tree is returned.<br/>
    /// </param>
    /// <param name="FrameId">
    /// The frame for whose document the AX tree should be retrieved.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Accessibility.GetFullAXTreeRequest GetFullAXTree(int? Depth = default, ChromeProtocol.Domains.Page.FrameIdType? FrameId = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.GetFullAXTreeRequest(Depth, FrameId);
    }
    /// <summary>Fetches the entire accessibility tree for the root Document</summary>
    /// <param name="Depth">
    /// The maximum depth at which descendants of the root node should be retrieved.<br/>
    /// If omitted, the full tree is returned.<br/>
    /// </param>
    /// <param name="FrameId">
    /// The frame for whose document the AX tree should be retrieved.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Accessibility.getFullAXTree")]
    public record GetFullAXTreeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("depth")]
      int? Depth = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default
    ) : ChromeProtocol.Core.ICommand<GetFullAXTreeRequestResult>
    {
    }
    public record GetFullAXTreeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Fetches the root node.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="FrameId">
    /// The frame in whose document the node resides.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Accessibility.GetRootAXNodeRequest GetRootAXNode(ChromeProtocol.Domains.Page.FrameIdType? FrameId = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.GetRootAXNodeRequest(FrameId);
    }
    /// <summary>
    /// Fetches the root node.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="FrameId">
    /// The frame in whose document the node resides.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Accessibility.getRootAXNode")]
    public record GetRootAXNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default
    ) : ChromeProtocol.Core.ICommand<GetRootAXNodeRequestResult>
    {
    }
    public record GetRootAXNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("node")]
      ChromeProtocol.Domains.Accessibility.AXNodeType Node
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Fetches a node and all ancestors up to and including the root.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="NodeId">Identifier of the node to get.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to get.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper to get.</param>
    public static ChromeProtocol.Domains.Accessibility.GetAXNodeAndAncestorsRequest GetAXNodeAndAncestors(ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default, ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default, ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.GetAXNodeAndAncestorsRequest(NodeId, BackendNodeId, ObjectId);
    }
    /// <summary>
    /// Fetches a node and all ancestors up to and including the root.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="NodeId">Identifier of the node to get.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to get.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper to get.</param>
    [ChromeProtocol.Core.MethodName("Accessibility.getAXNodeAndAncestors")]
    public record GetAXNodeAndAncestorsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default
    ) : ChromeProtocol.Core.ICommand<GetAXNodeAndAncestorsRequestResult>
    {
    }
    public record GetAXNodeAndAncestorsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Fetches a particular accessibility node by AXNodeId.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="FrameId">
    /// The frame in whose document the node resides.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Accessibility.GetChildAXNodesRequest GetChildAXNodes(ChromeProtocol.Domains.Accessibility.AXNodeIdType Id, ChromeProtocol.Domains.Page.FrameIdType? FrameId = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.GetChildAXNodesRequest(Id, FrameId);
    }
    /// <summary>
    /// Fetches a particular accessibility node by AXNodeId.<br/>
    /// Requires `enable()` to have been called previously.<br/>
    /// </summary>
    /// <param name="FrameId">
    /// The frame in whose document the node resides.<br/>
    /// If omitted, the root frame is used.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Accessibility.getChildAXNodes")]
    public record GetChildAXNodesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      ChromeProtocol.Domains.Accessibility.AXNodeIdType Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType? FrameId = default
    ) : ChromeProtocol.Core.ICommand<GetChildAXNodesRequestResult>
    {
    }
    public record GetChildAXNodesRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Query a DOM node&#39;s accessibility subtree for accessible name and role.<br/>
    /// This command computes the name and role for all nodes in the subtree, including those that are<br/>
    /// ignored for accessibility, and returns those that match the specified name and role. If no DOM<br/>
    /// node is specified, or the DOM node does not exist, the command returns an error. If neither<br/>
    /// `accessibleName` or `role` is specified, it returns all the accessibility nodes in the subtree.<br/>
    /// </summary>
    /// <param name="NodeId">Identifier of the node for the root to query.</param>
    /// <param name="BackendNodeId">Identifier of the backend node for the root to query.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper for the root to query.</param>
    /// <param name="AccessibleName">Find nodes with this computed name.</param>
    /// <param name="Role">Find nodes with this computed role.</param>
    public static ChromeProtocol.Domains.Accessibility.QueryAXTreeRequest QueryAXTree(ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default, ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default, ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default, string? AccessibleName = default, string? Role = default)    
    {
      return new ChromeProtocol.Domains.Accessibility.QueryAXTreeRequest(NodeId, BackendNodeId, ObjectId, AccessibleName, Role);
    }
    /// <summary>
    /// Query a DOM node&#39;s accessibility subtree for accessible name and role.<br/>
    /// This command computes the name and role for all nodes in the subtree, including those that are<br/>
    /// ignored for accessibility, and returns those that match the specified name and role. If no DOM<br/>
    /// node is specified, or the DOM node does not exist, the command returns an error. If neither<br/>
    /// `accessibleName` or `role` is specified, it returns all the accessibility nodes in the subtree.<br/>
    /// </summary>
    /// <param name="NodeId">Identifier of the node for the root to query.</param>
    /// <param name="BackendNodeId">Identifier of the backend node for the root to query.</param>
    /// <param name="ObjectId">JavaScript object id of the node wrapper for the root to query.</param>
    /// <param name="AccessibleName">Find nodes with this computed name.</param>
    /// <param name="Role">Find nodes with this computed role.</param>
    [ChromeProtocol.Core.MethodName("Accessibility.queryAXTree")]
    public record QueryAXTreeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("accessibleName")]
      string? AccessibleName = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("role")]
      string? Role = default
    ) : ChromeProtocol.Core.ICommand<QueryAXTreeRequestResult>
    {
    }
    /// <param name="Nodes">
    /// A list of `Accessibility.AXNode` matching the specified attributes,<br/>
    /// including nodes that are ignored for accessibility.<br/>
    /// </param>
    public record QueryAXTreeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Accessibility.AXNodeType> Nodes
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
