// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class Input
  {
    /// <param name="X">X coordinate of the event relative to the main frame&#39;s viewport in CSS pixels.</param>
    /// <param name="Y">
    /// Y coordinate of the event relative to the main frame&#39;s viewport in CSS pixels. 0 refers to<br/>
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.<br/>
    /// </param>
    /// <param name="RadiusX">X radius of the touch area (default: 1.0).</param>
    /// <param name="RadiusY">Y radius of the touch area (default: 1.0).</param>
    /// <param name="RotationAngle">Rotation angle (default: 0.0).</param>
    /// <param name="Force">Force (default: 1.0).</param>
    /// <param name="TangentialPressure">The normalized tangential pressure, which has a range of [-1,1] (default: 0).</param>
    /// <param name="TiltX">The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)</param>
    /// <param name="TiltY">The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).</param>
    /// <param name="Twist">The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).</param>
    /// <param name="Id">Identifier used to track touch sources between events, must be unique within an event.</param>
    public record TouchPointType(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("radiusX")]
      double? RadiusX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("radiusY")]
      double? RadiusY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rotationAngle")]
      double? RotationAngle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("force")]
      double? Force = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tangentialPressure")]
      double? TangentialPressure = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tiltX")]
      double? TiltX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tiltY")]
      double? TiltY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("twist")]
      int? Twist = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      double? Id = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record GestureSourceTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record MouseButtonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>UTC time in seconds, counted from January 1, 1970.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record TimeSinceEpochType(
      double Value
    ) : ChromeProtocol.Core.PrimitiveType<double>(Value)
    {
    }
    /// <param name="MimeType">Mime type of the dragged data.</param>
    /// <param name="Data">
    /// Depending of the value of `mimeType`, it contains the dragged link,<br/>
    /// text, HTML markup or any other data.<br/>
    /// </param>
    /// <param name="Title">Title associated with a link. Only valid when `mimeType` == &quot;text/uri-list&quot;.</param>
    /// <param name="BaseURL">
    /// Stores the base URL for the contained markup. Only valid when `mimeType`<br/>
    /// == &quot;text/html&quot;.<br/>
    /// </param>
    public record DragDataItemType(
      [property: System.Text.Json.Serialization.JsonPropertyName("mimeType")]
      string MimeType,
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      string Data,
      [property: System.Text.Json.Serialization.JsonPropertyName("title")]
      string? Title = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("baseURL")]
      string? BaseURL = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="DragOperationsMask">Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16</param>
    /// <param name="Files">List of filenames that should be included when dropping</param>
    public record DragDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("items")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Input.DragDataItemType> Items,
      [property: System.Text.Json.Serialization.JsonPropertyName("dragOperationsMask")]
      int DragOperationsMask,
      [property: System.Text.Json.Serialization.JsonPropertyName("files")]
      System.Collections.Generic.IReadOnlyList<string>? Files = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Emitted only when `Input.setInterceptDrags` is enabled. Use this data with `Input.dispatchDragEvent` to<br/>
    /// restore normal drag and drop behavior.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Input.dragIntercepted")]
    public record DragIntercepted(
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      ChromeProtocol.Domains.Input.DragDataType Data
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Dispatches a drag event into the page.</summary>
    /// <param name="Type">Type of the drag event.</param>
    /// <param name="X">X coordinate of the event relative to the main frame&#39;s viewport in CSS pixels.</param>
    /// <param name="Y">
    /// Y coordinate of the event relative to the main frame&#39;s viewport in CSS pixels. 0 refers to<br/>
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    public static ChromeProtocol.Domains.Input.DispatchDragEventRequest DispatchDragEvent(string Type, double X, double Y, ChromeProtocol.Domains.Input.DragDataType Data, int? Modifiers = default)    
    {
      return new ChromeProtocol.Domains.Input.DispatchDragEventRequest(Type, X, Y, Data, Modifiers);
    }
    /// <summary>Dispatches a drag event into the page.</summary>
    /// <param name="Type">Type of the drag event.</param>
    /// <param name="X">X coordinate of the event relative to the main frame&#39;s viewport in CSS pixels.</param>
    /// <param name="Y">
    /// Y coordinate of the event relative to the main frame&#39;s viewport in CSS pixels. 0 refers to<br/>
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Input.dispatchDragEvent")]
    public record DispatchDragEventRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      ChromeProtocol.Domains.Input.DragDataType Data,
      [property: System.Text.Json.Serialization.JsonPropertyName("modifiers")]
      int? Modifiers = default
    ) : ChromeProtocol.Core.ICommand<DispatchDragEventRequestResult>
    {
    }
    public record DispatchDragEventRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Dispatches a key event to the page.</summary>
    /// <param name="Type">Type of the key event.</param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    /// <param name="Text">
    /// Text as generated by processing a virtual key code with a keyboard layout. Not needed for<br/>
    /// for `keyUp` and `rawKeyDown` events (default: &quot;&quot;)<br/>
    /// </param>
    /// <param name="UnmodifiedText">
    /// Text that would have been generated by the keyboard if no modifiers were pressed (except for<br/>
    /// shift). Useful for shortcut (accelerator) key handling (default: &quot;&quot;).<br/>
    /// </param>
    /// <param name="KeyIdentifier">Unique key identifier (e.g., &#39;U+0041&#39;) (default: &quot;&quot;).</param>
    /// <param name="Code">Unique DOM defined string value for each physical key (e.g., &#39;KeyA&#39;) (default: &quot;&quot;).</param>
    /// <param name="Key">
    /// Unique DOM defined string value describing the meaning of the key in the context of active<br/>
    /// modifiers, keyboard layout, etc (e.g., &#39;AltGr&#39;) (default: &quot;&quot;).<br/>
    /// </param>
    /// <param name="WindowsVirtualKeyCode">Windows virtual key code (default: 0).</param>
    /// <param name="NativeVirtualKeyCode">Native virtual key code (default: 0).</param>
    /// <param name="AutoRepeat">Whether the event was generated from auto repeat (default: false).</param>
    /// <param name="IsKeypad">Whether the event was generated from the keypad (default: false).</param>
    /// <param name="IsSystemKey">Whether the event was a system key event (default: false).</param>
    /// <param name="Location">
    /// Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:<br/>
    /// 0).<br/>
    /// </param>
    /// <param name="Commands">
    /// Editing commands to send with the key event (e.g., &#39;selectAll&#39;) (default: []).<br/>
    /// These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.<br/>
    /// See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Input.DispatchKeyEventRequest DispatchKeyEvent(string Type, int? Modifiers = default, ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default, string? Text = default, string? UnmodifiedText = default, string? KeyIdentifier = default, string? Code = default, string? Key = default, int? WindowsVirtualKeyCode = default, int? NativeVirtualKeyCode = default, bool? AutoRepeat = default, bool? IsKeypad = default, bool? IsSystemKey = default, int? Location = default, System.Collections.Generic.IReadOnlyList<string>? Commands = default)    
    {
      return new ChromeProtocol.Domains.Input.DispatchKeyEventRequest(Type, Modifiers, Timestamp, Text, UnmodifiedText, KeyIdentifier, Code, Key, WindowsVirtualKeyCode, NativeVirtualKeyCode, AutoRepeat, IsKeypad, IsSystemKey, Location, Commands);
    }
    /// <summary>Dispatches a key event to the page.</summary>
    /// <param name="Type">Type of the key event.</param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    /// <param name="Text">
    /// Text as generated by processing a virtual key code with a keyboard layout. Not needed for<br/>
    /// for `keyUp` and `rawKeyDown` events (default: &quot;&quot;)<br/>
    /// </param>
    /// <param name="UnmodifiedText">
    /// Text that would have been generated by the keyboard if no modifiers were pressed (except for<br/>
    /// shift). Useful for shortcut (accelerator) key handling (default: &quot;&quot;).<br/>
    /// </param>
    /// <param name="KeyIdentifier">Unique key identifier (e.g., &#39;U+0041&#39;) (default: &quot;&quot;).</param>
    /// <param name="Code">Unique DOM defined string value for each physical key (e.g., &#39;KeyA&#39;) (default: &quot;&quot;).</param>
    /// <param name="Key">
    /// Unique DOM defined string value describing the meaning of the key in the context of active<br/>
    /// modifiers, keyboard layout, etc (e.g., &#39;AltGr&#39;) (default: &quot;&quot;).<br/>
    /// </param>
    /// <param name="WindowsVirtualKeyCode">Windows virtual key code (default: 0).</param>
    /// <param name="NativeVirtualKeyCode">Native virtual key code (default: 0).</param>
    /// <param name="AutoRepeat">Whether the event was generated from auto repeat (default: false).</param>
    /// <param name="IsKeypad">Whether the event was generated from the keypad (default: false).</param>
    /// <param name="IsSystemKey">Whether the event was a system key event (default: false).</param>
    /// <param name="Location">
    /// Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:<br/>
    /// 0).<br/>
    /// </param>
    /// <param name="Commands">
    /// Editing commands to send with the key event (e.g., &#39;selectAll&#39;) (default: []).<br/>
    /// These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.<br/>
    /// See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Input.dispatchKeyEvent")]
    public record DispatchKeyEventRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("modifiers")]
      int? Modifiers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string? Text = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("unmodifiedText")]
      string? UnmodifiedText = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyIdentifier")]
      string? KeyIdentifier = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("code")]
      string? Code = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("key")]
      string? Key = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("windowsVirtualKeyCode")]
      int? WindowsVirtualKeyCode = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nativeVirtualKeyCode")]
      int? NativeVirtualKeyCode = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("autoRepeat")]
      bool? AutoRepeat = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isKeypad")]
      bool? IsKeypad = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("isSystemKey")]
      bool? IsSystemKey = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("location")]
      int? Location = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("commands")]
      System.Collections.Generic.IReadOnlyList<string>? Commands = default
    ) : ChromeProtocol.Core.ICommand<DispatchKeyEventRequestResult>
    {
    }
    public record DispatchKeyEventRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This method emulates inserting text that doesn&#39;t come from a key press,<br/>
    /// for example an emoji keyboard or an IME.<br/>
    /// </summary>
    /// <param name="Text">The text to insert.</param>
    public static ChromeProtocol.Domains.Input.InsertTextRequest InsertText(string Text)    
    {
      return new ChromeProtocol.Domains.Input.InsertTextRequest(Text);
    }
    /// <summary>
    /// This method emulates inserting text that doesn&#39;t come from a key press,<br/>
    /// for example an emoji keyboard or an IME.<br/>
    /// </summary>
    /// <param name="Text">The text to insert.</param>
    [ChromeProtocol.Core.MethodName("Input.insertText")]
    public record InsertTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<InsertTextRequestResult>
    {
    }
    public record InsertTextRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// This method sets the current candidate text for IME.<br/>
    /// Use imeCommitComposition to commit the final text.<br/>
    /// Use imeSetComposition with empty string as text to cancel composition.<br/>
    /// </summary>
    /// <param name="Text">The text to insert</param>
    /// <param name="SelectionStart">selection start</param>
    /// <param name="SelectionEnd">selection end</param>
    /// <param name="ReplacementStart">replacement start</param>
    /// <param name="ReplacementEnd">replacement end</param>
    public static ChromeProtocol.Domains.Input.ImeSetCompositionRequest ImeSetComposition(string Text, int SelectionStart, int SelectionEnd, int? ReplacementStart = default, int? ReplacementEnd = default)    
    {
      return new ChromeProtocol.Domains.Input.ImeSetCompositionRequest(Text, SelectionStart, SelectionEnd, ReplacementStart, ReplacementEnd);
    }
    /// <summary>
    /// This method sets the current candidate text for IME.<br/>
    /// Use imeCommitComposition to commit the final text.<br/>
    /// Use imeSetComposition with empty string as text to cancel composition.<br/>
    /// </summary>
    /// <param name="Text">The text to insert</param>
    /// <param name="SelectionStart">selection start</param>
    /// <param name="SelectionEnd">selection end</param>
    /// <param name="ReplacementStart">replacement start</param>
    /// <param name="ReplacementEnd">replacement end</param>
    [ChromeProtocol.Core.MethodName("Input.imeSetComposition")]
    public record ImeSetCompositionRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("selectionStart")]
      int SelectionStart,
      [property: System.Text.Json.Serialization.JsonPropertyName("selectionEnd")]
      int SelectionEnd,
      [property: System.Text.Json.Serialization.JsonPropertyName("replacementStart")]
      int? ReplacementStart = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("replacementEnd")]
      int? ReplacementEnd = default
    ) : ChromeProtocol.Core.ICommand<ImeSetCompositionRequestResult>
    {
    }
    public record ImeSetCompositionRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Dispatches a mouse event to the page.</summary>
    /// <param name="Type">Type of the mouse event.</param>
    /// <param name="X">X coordinate of the event relative to the main frame&#39;s viewport in CSS pixels.</param>
    /// <param name="Y">
    /// Y coordinate of the event relative to the main frame&#39;s viewport in CSS pixels. 0 refers to<br/>
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    /// <param name="Button">Mouse button (default: &quot;none&quot;).</param>
    /// <param name="Buttons">
    /// A number indicating which buttons are pressed on the mouse when a mouse event is triggered.<br/>
    /// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.<br/>
    /// </param>
    /// <param name="ClickCount">Number of times the mouse button was clicked (default: 0).</param>
    /// <param name="Force">The normalized pressure, which has a range of [0,1] (default: 0).</param>
    /// <param name="TangentialPressure">The normalized tangential pressure, which has a range of [-1,1] (default: 0).</param>
    /// <param name="TiltX">The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).</param>
    /// <param name="TiltY">The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).</param>
    /// <param name="Twist">The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).</param>
    /// <param name="DeltaX">X delta in CSS pixels for mouse wheel event (default: 0).</param>
    /// <param name="DeltaY">Y delta in CSS pixels for mouse wheel event (default: 0).</param>
    /// <param name="PointerType">Pointer type (default: &quot;mouse&quot;).</param>
    public static ChromeProtocol.Domains.Input.DispatchMouseEventRequest DispatchMouseEvent(string Type, double X, double Y, int? Modifiers = default, ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default, ChromeProtocol.Domains.Input.MouseButtonType? Button = default, int? Buttons = default, int? ClickCount = default, double? Force = default, double? TangentialPressure = default, double? TiltX = default, double? TiltY = default, int? Twist = default, double? DeltaX = default, double? DeltaY = default, string? PointerType = default)    
    {
      return new ChromeProtocol.Domains.Input.DispatchMouseEventRequest(Type, X, Y, Modifiers, Timestamp, Button, Buttons, ClickCount, Force, TangentialPressure, TiltX, TiltY, Twist, DeltaX, DeltaY, PointerType);
    }
    /// <summary>Dispatches a mouse event to the page.</summary>
    /// <param name="Type">Type of the mouse event.</param>
    /// <param name="X">X coordinate of the event relative to the main frame&#39;s viewport in CSS pixels.</param>
    /// <param name="Y">
    /// Y coordinate of the event relative to the main frame&#39;s viewport in CSS pixels. 0 refers to<br/>
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    /// <param name="Button">Mouse button (default: &quot;none&quot;).</param>
    /// <param name="Buttons">
    /// A number indicating which buttons are pressed on the mouse when a mouse event is triggered.<br/>
    /// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.<br/>
    /// </param>
    /// <param name="ClickCount">Number of times the mouse button was clicked (default: 0).</param>
    /// <param name="Force">The normalized pressure, which has a range of [0,1] (default: 0).</param>
    /// <param name="TangentialPressure">The normalized tangential pressure, which has a range of [-1,1] (default: 0).</param>
    /// <param name="TiltX">The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).</param>
    /// <param name="TiltY">The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).</param>
    /// <param name="Twist">The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).</param>
    /// <param name="DeltaX">X delta in CSS pixels for mouse wheel event (default: 0).</param>
    /// <param name="DeltaY">Y delta in CSS pixels for mouse wheel event (default: 0).</param>
    /// <param name="PointerType">Pointer type (default: &quot;mouse&quot;).</param>
    [ChromeProtocol.Core.MethodName("Input.dispatchMouseEvent")]
    public record DispatchMouseEventRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("modifiers")]
      int? Modifiers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("button")]
      ChromeProtocol.Domains.Input.MouseButtonType? Button = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("buttons")]
      int? Buttons = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clickCount")]
      int? ClickCount = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("force")]
      double? Force = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tangentialPressure")]
      double? TangentialPressure = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tiltX")]
      double? TiltX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tiltY")]
      double? TiltY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("twist")]
      int? Twist = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("deltaX")]
      double? DeltaX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("deltaY")]
      double? DeltaY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pointerType")]
      string? PointerType = default
    ) : ChromeProtocol.Core.ICommand<DispatchMouseEventRequestResult>
    {
    }
    public record DispatchMouseEventRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Dispatches a touch event to the page.</summary>
    /// <param name="Type">
    /// Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while<br/>
    /// TouchStart and TouchMove must contains at least one.<br/>
    /// </param>
    /// <param name="TouchPoints">
    /// Active touch points on the touch device. One event per any changed point (compared to<br/>
    /// previous touch event in a sequence) is generated, emulating pressing/moving/releasing points<br/>
    /// one by one.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    public static ChromeProtocol.Domains.Input.DispatchTouchEventRequest DispatchTouchEvent(string Type, System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Input.TouchPointType> TouchPoints, int? Modifiers = default, ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default)    
    {
      return new ChromeProtocol.Domains.Input.DispatchTouchEventRequest(Type, TouchPoints, Modifiers, Timestamp);
    }
    /// <summary>Dispatches a touch event to the page.</summary>
    /// <param name="Type">
    /// Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while<br/>
    /// TouchStart and TouchMove must contains at least one.<br/>
    /// </param>
    /// <param name="TouchPoints">
    /// Active touch points on the touch device. One event per any changed point (compared to<br/>
    /// previous touch event in a sequence) is generated, emulating pressing/moving/releasing points<br/>
    /// one by one.<br/>
    /// </param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="Timestamp">Time at which the event occurred.</param>
    [ChromeProtocol.Core.MethodName("Input.dispatchTouchEvent")]
    public record DispatchTouchEventRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("touchPoints")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Input.TouchPointType> TouchPoints,
      [property: System.Text.Json.Serialization.JsonPropertyName("modifiers")]
      int? Modifiers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default
    ) : ChromeProtocol.Core.ICommand<DispatchTouchEventRequestResult>
    {
    }
    public record DispatchTouchEventRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Cancels any active dragging in the page.</summary>
    public static ChromeProtocol.Domains.Input.CancelDraggingRequest CancelDragging()    
    {
      return new ChromeProtocol.Domains.Input.CancelDraggingRequest();
    }
    /// <summary>Cancels any active dragging in the page.</summary>
    [ChromeProtocol.Core.MethodName("Input.cancelDragging")]
    public record CancelDraggingRequest() : ChromeProtocol.Core.ICommand<CancelDraggingRequestResult>
    {
    }
    public record CancelDraggingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Emulates touch event from the mouse event parameters.</summary>
    /// <param name="Type">Type of the mouse event.</param>
    /// <param name="X">X coordinate of the mouse pointer in DIP.</param>
    /// <param name="Y">Y coordinate of the mouse pointer in DIP.</param>
    /// <param name="Button">Mouse button. Only &quot;none&quot;, &quot;left&quot;, &quot;right&quot; are supported.</param>
    /// <param name="Timestamp">Time at which the event occurred (default: current time).</param>
    /// <param name="DeltaX">X delta in DIP for mouse wheel event (default: 0).</param>
    /// <param name="DeltaY">Y delta in DIP for mouse wheel event (default: 0).</param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="ClickCount">Number of times the mouse button was clicked (default: 0).</param>
    public static ChromeProtocol.Domains.Input.EmulateTouchFromMouseEventRequest EmulateTouchFromMouseEvent(string Type, int X, int Y, ChromeProtocol.Domains.Input.MouseButtonType Button, ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default, double? DeltaX = default, double? DeltaY = default, int? Modifiers = default, int? ClickCount = default)    
    {
      return new ChromeProtocol.Domains.Input.EmulateTouchFromMouseEventRequest(Type, X, Y, Button, Timestamp, DeltaX, DeltaY, Modifiers, ClickCount);
    }
    /// <summary>Emulates touch event from the mouse event parameters.</summary>
    /// <param name="Type">Type of the mouse event.</param>
    /// <param name="X">X coordinate of the mouse pointer in DIP.</param>
    /// <param name="Y">Y coordinate of the mouse pointer in DIP.</param>
    /// <param name="Button">Mouse button. Only &quot;none&quot;, &quot;left&quot;, &quot;right&quot; are supported.</param>
    /// <param name="Timestamp">Time at which the event occurred (default: current time).</param>
    /// <param name="DeltaX">X delta in DIP for mouse wheel event (default: 0).</param>
    /// <param name="DeltaY">Y delta in DIP for mouse wheel event (default: 0).</param>
    /// <param name="Modifiers">
    /// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8<br/>
    /// (default: 0).<br/>
    /// </param>
    /// <param name="ClickCount">Number of times the mouse button was clicked (default: 0).</param>
    [ChromeProtocol.Core.MethodName("Input.emulateTouchFromMouseEvent")]
    public record EmulateTouchFromMouseEventRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      int X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      int Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("button")]
      ChromeProtocol.Domains.Input.MouseButtonType Button,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Input.TimeSinceEpochType? Timestamp = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("deltaX")]
      double? DeltaX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("deltaY")]
      double? DeltaY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("modifiers")]
      int? Modifiers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clickCount")]
      int? ClickCount = default
    ) : ChromeProtocol.Core.ICommand<EmulateTouchFromMouseEventRequestResult>
    {
    }
    public record EmulateTouchFromMouseEventRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Ignores input events (useful while auditing page).</summary>
    /// <param name="Ignore">Ignores input events processing when set to true.</param>
    public static ChromeProtocol.Domains.Input.SetIgnoreInputEventsRequest SetIgnoreInputEvents(bool Ignore)    
    {
      return new ChromeProtocol.Domains.Input.SetIgnoreInputEventsRequest(Ignore);
    }
    /// <summary>Ignores input events (useful while auditing page).</summary>
    /// <param name="Ignore">Ignores input events processing when set to true.</param>
    [ChromeProtocol.Core.MethodName("Input.setIgnoreInputEvents")]
    public record SetIgnoreInputEventsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("ignore")]
      bool Ignore
    ) : ChromeProtocol.Core.ICommand<SetIgnoreInputEventsRequestResult>
    {
    }
    public record SetIgnoreInputEventsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Prevents default drag and drop behavior and instead emits `Input.dragIntercepted` events.<br/>
    /// Drag and drop behavior can be directly controlled via `Input.dispatchDragEvent`.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Input.SetInterceptDragsRequest SetInterceptDrags(bool Enabled)    
    {
      return new ChromeProtocol.Domains.Input.SetInterceptDragsRequest(Enabled);
    }
    /// <summary>
    /// Prevents default drag and drop behavior and instead emits `Input.dragIntercepted` events.<br/>
    /// Drag and drop behavior can be directly controlled via `Input.dispatchDragEvent`.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Input.setInterceptDrags")]
    public record SetInterceptDragsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetInterceptDragsRequestResult>
    {
    }
    public record SetInterceptDragsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Synthesizes a pinch gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="ScaleFactor">Relative scale factor after zooming (&gt;1.0 zooms in, &lt;1.0 zooms out).</param>
    /// <param name="RelativeSpeed">Relative pointer speed in pixels per second (default: 800).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    public static ChromeProtocol.Domains.Input.SynthesizePinchGestureRequest SynthesizePinchGesture(double X, double Y, double ScaleFactor, int? RelativeSpeed = default, ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default)    
    {
      return new ChromeProtocol.Domains.Input.SynthesizePinchGestureRequest(X, Y, ScaleFactor, RelativeSpeed, GestureSourceType);
    }
    /// <summary>Synthesizes a pinch gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="ScaleFactor">Relative scale factor after zooming (&gt;1.0 zooms in, &lt;1.0 zooms out).</param>
    /// <param name="RelativeSpeed">Relative pointer speed in pixels per second (default: 800).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Input.synthesizePinchGesture")]
    public record SynthesizePinchGestureRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("scaleFactor")]
      double ScaleFactor,
      [property: System.Text.Json.Serialization.JsonPropertyName("relativeSpeed")]
      int? RelativeSpeed = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gestureSourceType")]
      ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default
    ) : ChromeProtocol.Core.ICommand<SynthesizePinchGestureRequestResult>
    {
    }
    public record SynthesizePinchGestureRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Synthesizes a scroll gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="XDistance">The distance to scroll along the X axis (positive to scroll left).</param>
    /// <param name="YDistance">The distance to scroll along the Y axis (positive to scroll up).</param>
    /// <param name="XOverscroll">
    /// The number of additional pixels to scroll back along the X axis, in addition to the given<br/>
    /// distance.<br/>
    /// </param>
    /// <param name="YOverscroll">
    /// The number of additional pixels to scroll back along the Y axis, in addition to the given<br/>
    /// distance.<br/>
    /// </param>
    /// <param name="PreventFling">Prevent fling (default: true).</param>
    /// <param name="Speed">Swipe speed in pixels per second (default: 800).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    /// <param name="RepeatCount">The number of times to repeat the gesture (default: 0).</param>
    /// <param name="RepeatDelayMs">The number of milliseconds delay between each repeat. (default: 250).</param>
    /// <param name="InteractionMarkerName">The name of the interaction markers to generate, if not empty (default: &quot;&quot;).</param>
    public static ChromeProtocol.Domains.Input.SynthesizeScrollGestureRequest SynthesizeScrollGesture(double X, double Y, double? XDistance = default, double? YDistance = default, double? XOverscroll = default, double? YOverscroll = default, bool? PreventFling = default, int? Speed = default, ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default, int? RepeatCount = default, int? RepeatDelayMs = default, string? InteractionMarkerName = default)    
    {
      return new ChromeProtocol.Domains.Input.SynthesizeScrollGestureRequest(X, Y, XDistance, YDistance, XOverscroll, YOverscroll, PreventFling, Speed, GestureSourceType, RepeatCount, RepeatDelayMs, InteractionMarkerName);
    }
    /// <summary>Synthesizes a scroll gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="XDistance">The distance to scroll along the X axis (positive to scroll left).</param>
    /// <param name="YDistance">The distance to scroll along the Y axis (positive to scroll up).</param>
    /// <param name="XOverscroll">
    /// The number of additional pixels to scroll back along the X axis, in addition to the given<br/>
    /// distance.<br/>
    /// </param>
    /// <param name="YOverscroll">
    /// The number of additional pixels to scroll back along the Y axis, in addition to the given<br/>
    /// distance.<br/>
    /// </param>
    /// <param name="PreventFling">Prevent fling (default: true).</param>
    /// <param name="Speed">Swipe speed in pixels per second (default: 800).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    /// <param name="RepeatCount">The number of times to repeat the gesture (default: 0).</param>
    /// <param name="RepeatDelayMs">The number of milliseconds delay between each repeat. (default: 250).</param>
    /// <param name="InteractionMarkerName">The name of the interaction markers to generate, if not empty (default: &quot;&quot;).</param>
    [ChromeProtocol.Core.MethodName("Input.synthesizeScrollGesture")]
    public record SynthesizeScrollGestureRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("xDistance")]
      double? XDistance = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("yDistance")]
      double? YDistance = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("xOverscroll")]
      double? XOverscroll = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("yOverscroll")]
      double? YOverscroll = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("preventFling")]
      bool? PreventFling = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("speed")]
      int? Speed = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gestureSourceType")]
      ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("repeatCount")]
      int? RepeatCount = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("repeatDelayMs")]
      int? RepeatDelayMs = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("interactionMarkerName")]
      string? InteractionMarkerName = default
    ) : ChromeProtocol.Core.ICommand<SynthesizeScrollGestureRequestResult>
    {
    }
    public record SynthesizeScrollGestureRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Synthesizes a tap gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Duration">Duration between touchdown and touchup events in ms (default: 50).</param>
    /// <param name="TapCount">Number of times to perform the tap (e.g. 2 for double tap, default: 1).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    public static ChromeProtocol.Domains.Input.SynthesizeTapGestureRequest SynthesizeTapGesture(double X, double Y, int? Duration = default, int? TapCount = default, ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default)    
    {
      return new ChromeProtocol.Domains.Input.SynthesizeTapGestureRequest(X, Y, Duration, TapCount, GestureSourceType);
    }
    /// <summary>Synthesizes a tap gesture over a time period by issuing appropriate touch events.</summary>
    /// <param name="X">X coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Y">Y coordinate of the start of the gesture in CSS pixels.</param>
    /// <param name="Duration">Duration between touchdown and touchup events in ms (default: 50).</param>
    /// <param name="TapCount">Number of times to perform the tap (e.g. 2 for double tap, default: 1).</param>
    /// <param name="GestureSourceType">
    /// Which type of input events to be generated (default: &#39;default&#39;, which queries the platform<br/>
    /// for the preferred input type).<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Input.synthesizeTapGesture")]
    public record SynthesizeTapGestureRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("duration")]
      int? Duration = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("tapCount")]
      int? TapCount = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gestureSourceType")]
      ChromeProtocol.Domains.Input.GestureSourceTypeType? GestureSourceType = default
    ) : ChromeProtocol.Core.ICommand<SynthesizeTapGestureRequestResult>
    {
    }
    public record SynthesizeTapGestureRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
