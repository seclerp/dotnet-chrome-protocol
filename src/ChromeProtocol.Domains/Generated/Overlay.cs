// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain provides various functionality related to drawing atop the inspected page.</summary>
  public static partial class Overlay
  {
    /// <summary>Configuration data for drawing the source order of an elements children.</summary>
    /// <param name="ParentOutlineColor">the color to outline the given element in.</param>
    /// <param name="ChildOutlineColor">the color to outline the child elements in.</param>
    public record SourceOrderConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("parentOutlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType ParentOutlineColor,
      [property: System.Text.Json.Serialization.JsonPropertyName("childOutlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType ChildOutlineColor
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Configuration data for the highlighting of Grid elements.</summary>
    /// <param name="ShowGridExtensionLines">Whether the extension lines from grid cells to the rulers should be shown (default: false).</param>
    /// <param name="ShowPositiveLineNumbers">Show Positive line number labels (default: false).</param>
    /// <param name="ShowNegativeLineNumbers">Show Negative line number labels (default: false).</param>
    /// <param name="ShowAreaNames">Show area name labels (default: false).</param>
    /// <param name="ShowLineNames">Show line name labels (default: false).</param>
    /// <param name="ShowTrackSizes">Show track size labels (default: false).</param>
    /// <param name="GridBorderColor">The grid container border highlight color (default: transparent).</param>
    /// <param name="CellBorderColor">The cell border color (default: transparent). Deprecated, please use rowLineColor and columnLineColor instead.</param>
    /// <param name="RowLineColor">The row line color (default: transparent).</param>
    /// <param name="ColumnLineColor">The column line color (default: transparent).</param>
    /// <param name="GridBorderDash">Whether the grid border is dashed (default: false).</param>
    /// <param name="CellBorderDash">Whether the cell border is dashed (default: false). Deprecated, please us rowLineDash and columnLineDash instead.</param>
    /// <param name="RowLineDash">Whether row lines are dashed (default: false).</param>
    /// <param name="ColumnLineDash">Whether column lines are dashed (default: false).</param>
    /// <param name="RowGapColor">The row gap highlight fill color (default: transparent).</param>
    /// <param name="RowHatchColor">The row gap hatching fill color (default: transparent).</param>
    /// <param name="ColumnGapColor">The column gap highlight fill color (default: transparent).</param>
    /// <param name="ColumnHatchColor">The column gap hatching fill color (default: transparent).</param>
    /// <param name="AreaBorderColor">The named grid areas border color (Default: transparent).</param>
    /// <param name="GridBackgroundColor">The grid container background color (Default: transparent).</param>
    public record GridHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("showGridExtensionLines")]
      bool? ShowGridExtensionLines = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showPositiveLineNumbers")]
      bool? ShowPositiveLineNumbers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showNegativeLineNumbers")]
      bool? ShowNegativeLineNumbers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showAreaNames")]
      bool? ShowAreaNames = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showLineNames")]
      bool? ShowLineNames = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showTrackSizes")]
      bool? ShowTrackSizes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gridBorderColor")]
      ChromeProtocol.Domains.DOM.RGBAType? GridBorderColor = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("cellBorderColor")]
      ChromeProtocol.Domains.DOM.RGBAType? CellBorderColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rowLineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? RowLineColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnLineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ColumnLineColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gridBorderDash")]
      bool? GridBorderDash = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("cellBorderDash")]
      bool? CellBorderDash = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rowLineDash")]
      bool? RowLineDash = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnLineDash")]
      bool? ColumnLineDash = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rowGapColor")]
      ChromeProtocol.Domains.DOM.RGBAType? RowGapColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rowHatchColor")]
      ChromeProtocol.Domains.DOM.RGBAType? RowHatchColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnGapColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ColumnGapColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnHatchColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ColumnHatchColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("areaBorderColor")]
      ChromeProtocol.Domains.DOM.RGBAType? AreaBorderColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gridBackgroundColor")]
      ChromeProtocol.Domains.DOM.RGBAType? GridBackgroundColor = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Configuration data for the highlighting of Flex container elements.</summary>
    /// <param name="ContainerBorder">The style of the container border</param>
    /// <param name="LineSeparator">The style of the separator between lines</param>
    /// <param name="ItemSeparator">The style of the separator between items</param>
    /// <param name="MainDistributedSpace">Style of content-distribution space on the main axis (justify-content).</param>
    /// <param name="CrossDistributedSpace">Style of content-distribution space on the cross axis (align-content).</param>
    /// <param name="RowGapSpace">Style of empty space caused by row gaps (gap/row-gap).</param>
    /// <param name="ColumnGapSpace">Style of empty space caused by columns gaps (gap/column-gap).</param>
    /// <param name="CrossAlignment">Style of the self-alignment line (align-items).</param>
    public record FlexContainerHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("containerBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? ContainerBorder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("lineSeparator")]
      ChromeProtocol.Domains.Overlay.LineStyleType? LineSeparator = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("itemSeparator")]
      ChromeProtocol.Domains.Overlay.LineStyleType? ItemSeparator = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("mainDistributedSpace")]
      ChromeProtocol.Domains.Overlay.BoxStyleType? MainDistributedSpace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("crossDistributedSpace")]
      ChromeProtocol.Domains.Overlay.BoxStyleType? CrossDistributedSpace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("rowGapSpace")]
      ChromeProtocol.Domains.Overlay.BoxStyleType? RowGapSpace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("columnGapSpace")]
      ChromeProtocol.Domains.Overlay.BoxStyleType? ColumnGapSpace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("crossAlignment")]
      ChromeProtocol.Domains.Overlay.LineStyleType? CrossAlignment = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Configuration data for the highlighting of Flex item elements.</summary>
    /// <param name="BaseSizeBox">Style of the box representing the item&#39;s base size</param>
    /// <param name="BaseSizeBorder">Style of the border around the box representing the item&#39;s base size</param>
    /// <param name="FlexibilityArrow">Style of the arrow representing if the item grew or shrank</param>
    public record FlexItemHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("baseSizeBox")]
      ChromeProtocol.Domains.Overlay.BoxStyleType? BaseSizeBox = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("baseSizeBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? BaseSizeBorder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("flexibilityArrow")]
      ChromeProtocol.Domains.Overlay.LineStyleType? FlexibilityArrow = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Style information for drawing a line.</summary>
    /// <param name="Color">The color of the line (default: transparent)</param>
    /// <param name="Pattern">The line pattern (default: solid)</param>
    public record LineStyleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("color")]
      ChromeProtocol.Domains.DOM.RGBAType? Color = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pattern")]
      string? Pattern = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Style information for drawing a box.</summary>
    /// <param name="FillColor">The background color for the box (default: transparent)</param>
    /// <param name="HatchColor">The hatching color for the box (default: transparent)</param>
    public record BoxStyleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("fillColor")]
      ChromeProtocol.Domains.DOM.RGBAType? FillColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hatchColor")]
      ChromeProtocol.Domains.DOM.RGBAType? HatchColor = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record ContrastAlgorithmType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Configuration data for the highlighting of page elements.</summary>
    /// <param name="ShowInfo">Whether the node info tooltip should be shown (default: false).</param>
    /// <param name="ShowStyles">Whether the node styles in the tooltip (default: false).</param>
    /// <param name="ShowRulers">Whether the rulers should be shown (default: false).</param>
    /// <param name="ShowAccessibilityInfo">Whether the a11y info should be shown (default: true).</param>
    /// <param name="ShowExtensionLines">Whether the extension lines from node to the rulers should be shown (default: false).</param>
    /// <param name="ContentColor">The content box highlight fill color (default: transparent).</param>
    /// <param name="PaddingColor">The padding highlight fill color (default: transparent).</param>
    /// <param name="BorderColor">The border highlight fill color (default: transparent).</param>
    /// <param name="MarginColor">The margin highlight fill color (default: transparent).</param>
    /// <param name="EventTargetColor">The event target element highlight fill color (default: transparent).</param>
    /// <param name="ShapeColor">The shape outside fill color (default: transparent).</param>
    /// <param name="ShapeMarginColor">The shape margin fill color (default: transparent).</param>
    /// <param name="CssGridColor">The grid layout color (default: transparent).</param>
    /// <param name="ColorFormat">The color format used to format color styles (default: hex).</param>
    /// <param name="GridHighlightConfig">The grid layout highlight configuration (default: all transparent).</param>
    /// <param name="FlexContainerHighlightConfig">The flex container highlight configuration (default: all transparent).</param>
    /// <param name="FlexItemHighlightConfig">The flex item highlight configuration (default: all transparent).</param>
    /// <param name="ContrastAlgorithm">The contrast algorithm to use for the contrast ratio (default: aa).</param>
    /// <param name="ContainerQueryContainerHighlightConfig">The container query container highlight configuration (default: all transparent).</param>
    public record HighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("showInfo")]
      bool? ShowInfo = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showStyles")]
      bool? ShowStyles = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showRulers")]
      bool? ShowRulers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showAccessibilityInfo")]
      bool? ShowAccessibilityInfo = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showExtensionLines")]
      bool? ShowExtensionLines = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ContentColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("paddingColor")]
      ChromeProtocol.Domains.DOM.RGBAType? PaddingColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("borderColor")]
      ChromeProtocol.Domains.DOM.RGBAType? BorderColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("marginColor")]
      ChromeProtocol.Domains.DOM.RGBAType? MarginColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("eventTargetColor")]
      ChromeProtocol.Domains.DOM.RGBAType? EventTargetColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("shapeColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ShapeColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("shapeMarginColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ShapeMarginColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssGridColor")]
      ChromeProtocol.Domains.DOM.RGBAType? CssGridColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("colorFormat")]
      ChromeProtocol.Domains.Overlay.ColorFormatType? ColorFormat = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("gridHighlightConfig")]
      ChromeProtocol.Domains.Overlay.GridHighlightConfigType? GridHighlightConfig = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("flexContainerHighlightConfig")]
      ChromeProtocol.Domains.Overlay.FlexContainerHighlightConfigType? FlexContainerHighlightConfig = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("flexItemHighlightConfig")]
      ChromeProtocol.Domains.Overlay.FlexItemHighlightConfigType? FlexItemHighlightConfig = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contrastAlgorithm")]
      ChromeProtocol.Domains.Overlay.ContrastAlgorithmType? ContrastAlgorithm = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("containerQueryContainerHighlightConfig")]
      ChromeProtocol.Domains.Overlay.ContainerQueryContainerHighlightConfigType? ContainerQueryContainerHighlightConfig = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record ColorFormatType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Configurations for Persistent Grid Highlight</summary>
    /// <param name="GridHighlightConfig">A descriptor for the highlight appearance.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    public record GridNodeHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("gridHighlightConfig")]
      ChromeProtocol.Domains.Overlay.GridHighlightConfigType GridHighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="FlexContainerHighlightConfig">A descriptor for the highlight appearance of flex containers.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    public record FlexNodeHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("flexContainerHighlightConfig")]
      ChromeProtocol.Domains.Overlay.FlexContainerHighlightConfigType FlexContainerHighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="SnapportBorder">The style of the snapport border (default: transparent)</param>
    /// <param name="SnapAreaBorder">The style of the snap area border (default: transparent)</param>
    /// <param name="ScrollMarginColor">The margin highlight fill color (default: transparent).</param>
    /// <param name="ScrollPaddingColor">The padding highlight fill color (default: transparent).</param>
    public record ScrollSnapContainerHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapportBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? SnapportBorder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("snapAreaBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? SnapAreaBorder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollMarginColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ScrollMarginColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollPaddingColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ScrollPaddingColor = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ScrollSnapContainerHighlightConfig">A descriptor for the highlight appearance of scroll snap containers.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    public record ScrollSnapHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollSnapContainerHighlightConfig")]
      ChromeProtocol.Domains.Overlay.ScrollSnapContainerHighlightConfigType ScrollSnapContainerHighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Configuration for dual screen hinge</summary>
    /// <param name="Rect">A rectangle represent hinge</param>
    /// <param name="ContentColor">The content box highlight fill color (default: a dark color).</param>
    /// <param name="OutlineColor">The content box highlight outline color (default: transparent).</param>
    public record HingeConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("rect")]
      ChromeProtocol.Domains.DOM.RectType Rect,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ContentColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("outlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? OutlineColor = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Configuration for Window Controls Overlay</summary>
    /// <param name="ShowCSS">Whether the title bar CSS should be shown when emulating the Window Controls Overlay.</param>
    /// <param name="SelectedPlatform">Selected platforms to show the overlay.</param>
    /// <param name="ThemeColor">The theme color defined in app manifest.</param>
    public record WindowControlsOverlayConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("showCSS")]
      bool ShowCSS,
      [property: System.Text.Json.Serialization.JsonPropertyName("selectedPlatform")]
      string SelectedPlatform,
      [property: System.Text.Json.Serialization.JsonPropertyName("themeColor")]
      string ThemeColor
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ContainerQueryContainerHighlightConfig">A descriptor for the highlight appearance of container query containers.</param>
    /// <param name="NodeId">Identifier of the container node to highlight.</param>
    public record ContainerQueryHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("containerQueryContainerHighlightConfig")]
      ChromeProtocol.Domains.Overlay.ContainerQueryContainerHighlightConfigType ContainerQueryContainerHighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ContainerBorder">The style of the container border.</param>
    /// <param name="DescendantBorder">The style of the descendants&#39; borders.</param>
    public record ContainerQueryContainerHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("containerBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? ContainerBorder = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("descendantBorder")]
      ChromeProtocol.Domains.Overlay.LineStyleType? DescendantBorder = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="IsolationModeHighlightConfig">A descriptor for the highlight appearance of an element in isolation mode.</param>
    /// <param name="NodeId">Identifier of the isolated element to highlight.</param>
    public record IsolatedElementHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("isolationModeHighlightConfig")]
      ChromeProtocol.Domains.Overlay.IsolationModeHighlightConfigType IsolationModeHighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ResizerColor">The fill color of the resizers (default: transparent).</param>
    /// <param name="ResizerHandleColor">The fill color for resizer handles (default: transparent).</param>
    /// <param name="MaskColor">The fill color for the mask covering non-isolated elements (default: transparent).</param>
    public record IsolationModeHighlightConfigType(
      [property: System.Text.Json.Serialization.JsonPropertyName("resizerColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ResizerColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("resizerHandleColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ResizerHandleColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("maskColor")]
      ChromeProtocol.Domains.DOM.RGBAType? MaskColor = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InspectModeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Fired when the node should be inspected. This happens after call to `setInspectMode` or when<br/>
    /// user manually inspects an element.<br/>
    /// </summary>
    /// <param name="BackendNodeId">Id of the node to inspect.</param>
    [ChromeProtocol.Core.MethodName("Overlay.inspectNodeRequested")]
    public record InspectNodeRequested(
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType BackendNodeId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired when the node should be highlighted. This happens after call to `setInspectMode`.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.nodeHighlightRequested")]
    public record NodeHighlightRequested(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired when user asks to capture screenshot of some area on the page.</summary>
    /// <param name="Viewport">Viewport to capture, in device independent pixels (dip).</param>
    [ChromeProtocol.Core.MethodName("Overlay.screenshotRequested")]
    public record ScreenshotRequested(
      [property: System.Text.Json.Serialization.JsonPropertyName("viewport")]
      ChromeProtocol.Domains.Page.ViewportType Viewport
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired when user cancels the inspect mode.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.inspectModeCanceled")]
    public record InspectModeCanceled() : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Disables domain notifications.</summary>
    public static ChromeProtocol.Domains.Overlay.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Overlay.DisableRequest();
    }
    /// <summary>Disables domain notifications.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables domain notifications.</summary>
    public static ChromeProtocol.Domains.Overlay.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Overlay.EnableRequest();
    }
    /// <summary>Enables domain notifications.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>For testing.</summary>
    /// <param name="NodeId">Id of the node to get highlight object for.</param>
    /// <param name="IncludeDistance">Whether to include distance info.</param>
    /// <param name="IncludeStyle">Whether to include style info.</param>
    /// <param name="ColorFormat">The color format to get config with (default: hex).</param>
    /// <param name="ShowAccessibilityInfo">Whether to show accessibility info (default: true).</param>
    public static ChromeProtocol.Domains.Overlay.GetHighlightObjectForTestRequest GetHighlightObjectForTest(ChromeProtocol.Domains.DOM.NodeIdType NodeId, bool? IncludeDistance = default, bool? IncludeStyle = default, ChromeProtocol.Domains.Overlay.ColorFormatType? ColorFormat = default, bool? ShowAccessibilityInfo = default)    
    {
      return new ChromeProtocol.Domains.Overlay.GetHighlightObjectForTestRequest(NodeId, IncludeDistance, IncludeStyle, ColorFormat, ShowAccessibilityInfo);
    }
    /// <summary>For testing.</summary>
    /// <param name="NodeId">Id of the node to get highlight object for.</param>
    /// <param name="IncludeDistance">Whether to include distance info.</param>
    /// <param name="IncludeStyle">Whether to include style info.</param>
    /// <param name="ColorFormat">The color format to get config with (default: hex).</param>
    /// <param name="ShowAccessibilityInfo">Whether to show accessibility info (default: true).</param>
    [ChromeProtocol.Core.MethodName("Overlay.getHighlightObjectForTest")]
    public record GetHighlightObjectForTestRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeDistance")]
      bool? IncludeDistance = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeStyle")]
      bool? IncludeStyle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("colorFormat")]
      ChromeProtocol.Domains.Overlay.ColorFormatType? ColorFormat = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("showAccessibilityInfo")]
      bool? ShowAccessibilityInfo = default
    ) : ChromeProtocol.Core.ICommand<GetHighlightObjectForTestRequestResult>
    {
    }
    /// <param name="Highlight">Highlight data for the node.</param>
    public record GetHighlightObjectForTestRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("highlight")]
      System.Text.Json.Nodes.JsonObject Highlight
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>For Persistent Grid testing.</summary>
    /// <param name="NodeIds">Ids of the node to get highlight object for.</param>
    public static ChromeProtocol.Domains.Overlay.GetGridHighlightObjectsForTestRequest GetGridHighlightObjectsForTest(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOM.NodeIdType> NodeIds)    
    {
      return new ChromeProtocol.Domains.Overlay.GetGridHighlightObjectsForTestRequest(NodeIds);
    }
    /// <summary>For Persistent Grid testing.</summary>
    /// <param name="NodeIds">Ids of the node to get highlight object for.</param>
    [ChromeProtocol.Core.MethodName("Overlay.getGridHighlightObjectsForTest")]
    public record GetGridHighlightObjectsForTestRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeIds")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOM.NodeIdType> NodeIds
    ) : ChromeProtocol.Core.ICommand<GetGridHighlightObjectsForTestRequestResult>
    {
    }
    /// <param name="Highlights">Grid Highlight data for the node ids provided.</param>
    public record GetGridHighlightObjectsForTestRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("highlights")]
      System.Text.Json.Nodes.JsonObject Highlights
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>For Source Order Viewer testing.</summary>
    /// <param name="NodeId">Id of the node to highlight.</param>
    public static ChromeProtocol.Domains.Overlay.GetSourceOrderHighlightObjectForTestRequest GetSourceOrderHighlightObjectForTest(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.Overlay.GetSourceOrderHighlightObjectForTestRequest(NodeId);
    }
    /// <summary>For Source Order Viewer testing.</summary>
    /// <param name="NodeId">Id of the node to highlight.</param>
    [ChromeProtocol.Core.MethodName("Overlay.getSourceOrderHighlightObjectForTest")]
    public record GetSourceOrderHighlightObjectForTestRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetSourceOrderHighlightObjectForTestRequestResult>
    {
    }
    /// <param name="Highlight">Source order highlight data for the node id provided.</param>
    public record GetSourceOrderHighlightObjectForTestRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("highlight")]
      System.Text.Json.Nodes.JsonObject Highlight
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Hides any highlight.</summary>
    public static ChromeProtocol.Domains.Overlay.HideHighlightRequest HideHighlight()    
    {
      return new ChromeProtocol.Domains.Overlay.HideHighlightRequest();
    }
    /// <summary>Hides any highlight.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.hideHighlight")]
    public record HideHighlightRequest() : ChromeProtocol.Core.ICommand<HideHighlightRequestResult>
    {
    }
    public record HideHighlightRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Highlights owner element of the frame with given id.<br/>
    /// Deprecated: Doesn&#39;t work reliably and cannot be fixed due to process<br/>
    /// separation (the owner node might be in a different process). Determine<br/>
    /// the owner node in the client and use highlightNode.<br/>
    /// </summary>
    /// <param name="FrameId">Identifier of the frame to highlight.</param>
    /// <param name="ContentColor">The content box highlight fill color (default: transparent).</param>
    /// <param name="ContentOutlineColor">The content box highlight outline color (default: transparent).</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Overlay.HighlightFrameRequest HighlightFrame(ChromeProtocol.Domains.Page.FrameIdType FrameId, ChromeProtocol.Domains.DOM.RGBAType? ContentColor = default, ChromeProtocol.Domains.DOM.RGBAType? ContentOutlineColor = default)    
    {
      return new ChromeProtocol.Domains.Overlay.HighlightFrameRequest(FrameId, ContentColor, ContentOutlineColor);
    }
    /// <summary>
    /// Highlights owner element of the frame with given id.<br/>
    /// Deprecated: Doesn&#39;t work reliably and cannot be fixed due to process<br/>
    /// separation (the owner node might be in a different process). Determine<br/>
    /// the owner node in the client and use highlightNode.<br/>
    /// </summary>
    /// <param name="FrameId">Identifier of the frame to highlight.</param>
    /// <param name="ContentColor">The content box highlight fill color (default: transparent).</param>
    /// <param name="ContentOutlineColor">The content box highlight outline color (default: transparent).</param>
    [ChromeProtocol.Core.MethodName("Overlay.highlightFrame")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record HighlightFrameRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ContentColor = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("contentOutlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? ContentOutlineColor = default
    ) : ChromeProtocol.Core.ICommand<HighlightFrameRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record HighlightFrameRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or<br/>
    /// objectId must be specified.<br/>
    /// </summary>
    /// <param name="HighlightConfig">A descriptor for the highlight appearance.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to highlight.</param>
    /// <param name="ObjectId">JavaScript object id of the node to be highlighted.</param>
    /// <param name="Selector">Selectors to highlight relevant nodes.</param>
    public static ChromeProtocol.Domains.Overlay.HighlightNodeRequest HighlightNode(ChromeProtocol.Domains.Overlay.HighlightConfigType HighlightConfig, ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default, ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default, ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default, string? Selector = default)    
    {
      return new ChromeProtocol.Domains.Overlay.HighlightNodeRequest(HighlightConfig, NodeId, BackendNodeId, ObjectId, Selector);
    }
    /// <summary>
    /// Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or<br/>
    /// objectId must be specified.<br/>
    /// </summary>
    /// <param name="HighlightConfig">A descriptor for the highlight appearance.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to highlight.</param>
    /// <param name="ObjectId">JavaScript object id of the node to be highlighted.</param>
    /// <param name="Selector">Selectors to highlight relevant nodes.</param>
    [ChromeProtocol.Core.MethodName("Overlay.highlightNode")]
    public record HighlightNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("highlightConfig")]
      ChromeProtocol.Domains.Overlay.HighlightConfigType HighlightConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("selector")]
      string? Selector = default
    ) : ChromeProtocol.Core.ICommand<HighlightNodeRequestResult>
    {
    }
    public record HighlightNodeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Highlights given quad. Coordinates are absolute with respect to the main frame viewport.</summary>
    /// <param name="Quad">Quad to highlight</param>
    /// <param name="Color">The highlight fill color (default: transparent).</param>
    /// <param name="OutlineColor">The highlight outline color (default: transparent).</param>
    public static ChromeProtocol.Domains.Overlay.HighlightQuadRequest HighlightQuad(ChromeProtocol.Domains.DOM.QuadType Quad, ChromeProtocol.Domains.DOM.RGBAType? Color = default, ChromeProtocol.Domains.DOM.RGBAType? OutlineColor = default)    
    {
      return new ChromeProtocol.Domains.Overlay.HighlightQuadRequest(Quad, Color, OutlineColor);
    }
    /// <summary>Highlights given quad. Coordinates are absolute with respect to the main frame viewport.</summary>
    /// <param name="Quad">Quad to highlight</param>
    /// <param name="Color">The highlight fill color (default: transparent).</param>
    /// <param name="OutlineColor">The highlight outline color (default: transparent).</param>
    [ChromeProtocol.Core.MethodName("Overlay.highlightQuad")]
    public record HighlightQuadRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("quad")]
      ChromeProtocol.Domains.DOM.QuadType Quad,
      [property: System.Text.Json.Serialization.JsonPropertyName("color")]
      ChromeProtocol.Domains.DOM.RGBAType? Color = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("outlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? OutlineColor = default
    ) : ChromeProtocol.Core.ICommand<HighlightQuadRequestResult>
    {
    }
    public record HighlightQuadRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.</summary>
    /// <param name="X">X coordinate</param>
    /// <param name="Y">Y coordinate</param>
    /// <param name="Width">Rectangle width</param>
    /// <param name="Height">Rectangle height</param>
    /// <param name="Color">The highlight fill color (default: transparent).</param>
    /// <param name="OutlineColor">The highlight outline color (default: transparent).</param>
    public static ChromeProtocol.Domains.Overlay.HighlightRectRequest HighlightRect(int X, int Y, int Width, int Height, ChromeProtocol.Domains.DOM.RGBAType? Color = default, ChromeProtocol.Domains.DOM.RGBAType? OutlineColor = default)    
    {
      return new ChromeProtocol.Domains.Overlay.HighlightRectRequest(X, Y, Width, Height, Color, OutlineColor);
    }
    /// <summary>Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.</summary>
    /// <param name="X">X coordinate</param>
    /// <param name="Y">Y coordinate</param>
    /// <param name="Width">Rectangle width</param>
    /// <param name="Height">Rectangle height</param>
    /// <param name="Color">The highlight fill color (default: transparent).</param>
    /// <param name="OutlineColor">The highlight outline color (default: transparent).</param>
    [ChromeProtocol.Core.MethodName("Overlay.highlightRect")]
    public record HighlightRectRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      int X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      int Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("width")]
      int Width,
      [property: System.Text.Json.Serialization.JsonPropertyName("height")]
      int Height,
      [property: System.Text.Json.Serialization.JsonPropertyName("color")]
      ChromeProtocol.Domains.DOM.RGBAType? Color = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("outlineColor")]
      ChromeProtocol.Domains.DOM.RGBAType? OutlineColor = default
    ) : ChromeProtocol.Core.ICommand<HighlightRectRequestResult>
    {
    }
    public record HighlightRectRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Highlights the source order of the children of the DOM node with given id or with the given<br/>
    /// JavaScript object wrapper. Either nodeId or objectId must be specified.<br/>
    /// </summary>
    /// <param name="SourceOrderConfig">A descriptor for the appearance of the overlay drawing.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to highlight.</param>
    /// <param name="ObjectId">JavaScript object id of the node to be highlighted.</param>
    public static ChromeProtocol.Domains.Overlay.HighlightSourceOrderRequest HighlightSourceOrder(ChromeProtocol.Domains.Overlay.SourceOrderConfigType SourceOrderConfig, ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default, ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default, ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default)    
    {
      return new ChromeProtocol.Domains.Overlay.HighlightSourceOrderRequest(SourceOrderConfig, NodeId, BackendNodeId, ObjectId);
    }
    /// <summary>
    /// Highlights the source order of the children of the DOM node with given id or with the given<br/>
    /// JavaScript object wrapper. Either nodeId or objectId must be specified.<br/>
    /// </summary>
    /// <param name="SourceOrderConfig">A descriptor for the appearance of the overlay drawing.</param>
    /// <param name="NodeId">Identifier of the node to highlight.</param>
    /// <param name="BackendNodeId">Identifier of the backend node to highlight.</param>
    /// <param name="ObjectId">JavaScript object id of the node to be highlighted.</param>
    [ChromeProtocol.Core.MethodName("Overlay.highlightSourceOrder")]
    public record HighlightSourceOrderRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceOrderConfig")]
      ChromeProtocol.Domains.Overlay.SourceOrderConfigType SourceOrderConfig,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType? ObjectId = default
    ) : ChromeProtocol.Core.ICommand<HighlightSourceOrderRequestResult>
    {
    }
    public record HighlightSourceOrderRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enters the &#39;inspect&#39; mode. In this mode, elements that user is hovering over are highlighted.<br/>
    /// Backend then generates &#39;inspectNodeRequested&#39; event upon element selection.<br/>
    /// </summary>
    /// <param name="Mode">Set an inspection mode.</param>
    /// <param name="HighlightConfig">
    /// A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled<br/>
    /// == false`.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Overlay.SetInspectModeRequest SetInspectMode(ChromeProtocol.Domains.Overlay.InspectModeType Mode, ChromeProtocol.Domains.Overlay.HighlightConfigType? HighlightConfig = default)    
    {
      return new ChromeProtocol.Domains.Overlay.SetInspectModeRequest(Mode, HighlightConfig);
    }
    /// <summary>
    /// Enters the &#39;inspect&#39; mode. In this mode, elements that user is hovering over are highlighted.<br/>
    /// Backend then generates &#39;inspectNodeRequested&#39; event upon element selection.<br/>
    /// </summary>
    /// <param name="Mode">Set an inspection mode.</param>
    /// <param name="HighlightConfig">
    /// A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled<br/>
    /// == false`.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Overlay.setInspectMode")]
    public record SetInspectModeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("mode")]
      ChromeProtocol.Domains.Overlay.InspectModeType Mode,
      [property: System.Text.Json.Serialization.JsonPropertyName("highlightConfig")]
      ChromeProtocol.Domains.Overlay.HighlightConfigType? HighlightConfig = default
    ) : ChromeProtocol.Core.ICommand<SetInspectModeRequestResult>
    {
    }
    public record SetInspectModeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Highlights owner element of all frames detected to be ads.</summary>
    /// <param name="Show">True for showing ad highlights</param>
    public static ChromeProtocol.Domains.Overlay.SetShowAdHighlightsRequest SetShowAdHighlights(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowAdHighlightsRequest(Show);
    }
    /// <summary>Highlights owner element of all frames detected to be ads.</summary>
    /// <param name="Show">True for showing ad highlights</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowAdHighlights")]
    public record SetShowAdHighlightsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowAdHighlightsRequestResult>
    {
    }
    public record SetShowAdHighlightsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Message">The message to display, also triggers resume and step over controls.</param>
    public static ChromeProtocol.Domains.Overlay.SetPausedInDebuggerMessageRequest SetPausedInDebuggerMessage(string? Message = default)    
    {
      return new ChromeProtocol.Domains.Overlay.SetPausedInDebuggerMessageRequest(Message);
    }
    /// <param name="Message">The message to display, also triggers resume and step over controls.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setPausedInDebuggerMessage")]
    public record SetPausedInDebuggerMessageRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("message")]
      string? Message = default
    ) : ChromeProtocol.Core.ICommand<SetPausedInDebuggerMessageRequestResult>
    {
    }
    public record SetPausedInDebuggerMessageRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that backend shows debug borders on layers</summary>
    /// <param name="Show">True for showing debug borders</param>
    public static ChromeProtocol.Domains.Overlay.SetShowDebugBordersRequest SetShowDebugBorders(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowDebugBordersRequest(Show);
    }
    /// <summary>Requests that backend shows debug borders on layers</summary>
    /// <param name="Show">True for showing debug borders</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowDebugBorders")]
    public record SetShowDebugBordersRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowDebugBordersRequestResult>
    {
    }
    public record SetShowDebugBordersRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that backend shows the FPS counter</summary>
    /// <param name="Show">True for showing the FPS counter</param>
    public static ChromeProtocol.Domains.Overlay.SetShowFPSCounterRequest SetShowFPSCounter(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowFPSCounterRequest(Show);
    }
    /// <summary>Requests that backend shows the FPS counter</summary>
    /// <param name="Show">True for showing the FPS counter</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowFPSCounter")]
    public record SetShowFPSCounterRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowFPSCounterRequestResult>
    {
    }
    public record SetShowFPSCounterRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Highlight multiple elements with the CSS Grid overlay.</summary>
    /// <param name="GridNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowGridOverlaysRequest SetShowGridOverlays(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.GridNodeHighlightConfigType> GridNodeHighlightConfigs)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowGridOverlaysRequest(GridNodeHighlightConfigs);
    }
    /// <summary>Highlight multiple elements with the CSS Grid overlay.</summary>
    /// <param name="GridNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowGridOverlays")]
    public record SetShowGridOverlaysRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("gridNodeHighlightConfigs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.GridNodeHighlightConfigType> GridNodeHighlightConfigs
    ) : ChromeProtocol.Core.ICommand<SetShowGridOverlaysRequestResult>
    {
    }
    public record SetShowGridOverlaysRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="FlexNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowFlexOverlaysRequest SetShowFlexOverlays(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.FlexNodeHighlightConfigType> FlexNodeHighlightConfigs)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowFlexOverlaysRequest(FlexNodeHighlightConfigs);
    }
    /// <param name="FlexNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowFlexOverlays")]
    public record SetShowFlexOverlaysRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("flexNodeHighlightConfigs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.FlexNodeHighlightConfigType> FlexNodeHighlightConfigs
    ) : ChromeProtocol.Core.ICommand<SetShowFlexOverlaysRequestResult>
    {
    }
    public record SetShowFlexOverlaysRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ScrollSnapHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowScrollSnapOverlaysRequest SetShowScrollSnapOverlays(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.ScrollSnapHighlightConfigType> ScrollSnapHighlightConfigs)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowScrollSnapOverlaysRequest(ScrollSnapHighlightConfigs);
    }
    /// <param name="ScrollSnapHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowScrollSnapOverlays")]
    public record SetShowScrollSnapOverlaysRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollSnapHighlightConfigs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.ScrollSnapHighlightConfigType> ScrollSnapHighlightConfigs
    ) : ChromeProtocol.Core.ICommand<SetShowScrollSnapOverlaysRequestResult>
    {
    }
    public record SetShowScrollSnapOverlaysRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ContainerQueryHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowContainerQueryOverlaysRequest SetShowContainerQueryOverlays(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.ContainerQueryHighlightConfigType> ContainerQueryHighlightConfigs)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowContainerQueryOverlaysRequest(ContainerQueryHighlightConfigs);
    }
    /// <param name="ContainerQueryHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowContainerQueryOverlays")]
    public record SetShowContainerQueryOverlaysRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("containerQueryHighlightConfigs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.ContainerQueryHighlightConfigType> ContainerQueryHighlightConfigs
    ) : ChromeProtocol.Core.ICommand<SetShowContainerQueryOverlaysRequestResult>
    {
    }
    public record SetShowContainerQueryOverlaysRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that backend shows paint rectangles</summary>
    /// <param name="Result">True for showing paint rectangles</param>
    public static ChromeProtocol.Domains.Overlay.SetShowPaintRectsRequest SetShowPaintRects(bool Result)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowPaintRectsRequest(Result);
    }
    /// <summary>Requests that backend shows paint rectangles</summary>
    /// <param name="Result">True for showing paint rectangles</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowPaintRects")]
    public record SetShowPaintRectsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("result")]
      bool Result
    ) : ChromeProtocol.Core.ICommand<SetShowPaintRectsRequestResult>
    {
    }
    public record SetShowPaintRectsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that backend shows layout shift regions</summary>
    /// <param name="Result">True for showing layout shift regions</param>
    public static ChromeProtocol.Domains.Overlay.SetShowLayoutShiftRegionsRequest SetShowLayoutShiftRegions(bool Result)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowLayoutShiftRegionsRequest(Result);
    }
    /// <summary>Requests that backend shows layout shift regions</summary>
    /// <param name="Result">True for showing layout shift regions</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowLayoutShiftRegions")]
    public record SetShowLayoutShiftRegionsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("result")]
      bool Result
    ) : ChromeProtocol.Core.ICommand<SetShowLayoutShiftRegionsRequestResult>
    {
    }
    public record SetShowLayoutShiftRegionsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that backend shows scroll bottleneck rects</summary>
    /// <param name="Show">True for showing scroll bottleneck rects</param>
    public static ChromeProtocol.Domains.Overlay.SetShowScrollBottleneckRectsRequest SetShowScrollBottleneckRects(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowScrollBottleneckRectsRequest(Show);
    }
    /// <summary>Requests that backend shows scroll bottleneck rects</summary>
    /// <param name="Show">True for showing scroll bottleneck rects</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowScrollBottleneckRects")]
    public record SetShowScrollBottleneckRectsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowScrollBottleneckRectsRequestResult>
    {
    }
    public record SetShowScrollBottleneckRectsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deprecated, no longer has any effect.</summary>
    /// <param name="Show">True for showing hit-test borders</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Overlay.SetShowHitTestBordersRequest SetShowHitTestBorders(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowHitTestBordersRequest(Show);
    }
    /// <summary>Deprecated, no longer has any effect.</summary>
    /// <param name="Show">True for showing hit-test borders</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowHitTestBorders")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetShowHitTestBordersRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowHitTestBordersRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetShowHitTestBordersRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deprecated, no longer has any effect.</summary>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Overlay.SetShowWebVitalsRequest SetShowWebVitals(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowWebVitalsRequest(Show);
    }
    /// <summary>Deprecated, no longer has any effect.</summary>
    [ChromeProtocol.Core.MethodName("Overlay.setShowWebVitals")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetShowWebVitalsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowWebVitalsRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetShowWebVitalsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Paints viewport size upon main frame resize.</summary>
    /// <param name="Show">Whether to paint size or not.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowViewportSizeOnResizeRequest SetShowViewportSizeOnResize(bool Show)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowViewportSizeOnResizeRequest(Show);
    }
    /// <summary>Paints viewport size upon main frame resize.</summary>
    /// <param name="Show">Whether to paint size or not.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowViewportSizeOnResize")]
    public record SetShowViewportSizeOnResizeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("show")]
      bool Show
    ) : ChromeProtocol.Core.ICommand<SetShowViewportSizeOnResizeRequestResult>
    {
    }
    public record SetShowViewportSizeOnResizeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Add a dual screen device hinge</summary>
    /// <param name="HingeConfig">hinge data, null means hideHinge</param>
    public static ChromeProtocol.Domains.Overlay.SetShowHingeRequest SetShowHinge(ChromeProtocol.Domains.Overlay.HingeConfigType? HingeConfig = default)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowHingeRequest(HingeConfig);
    }
    /// <summary>Add a dual screen device hinge</summary>
    /// <param name="HingeConfig">hinge data, null means hideHinge</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowHinge")]
    public record SetShowHingeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("hingeConfig")]
      ChromeProtocol.Domains.Overlay.HingeConfigType? HingeConfig = default
    ) : ChromeProtocol.Core.ICommand<SetShowHingeRequestResult>
    {
    }
    public record SetShowHingeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Show elements in isolation mode with overlays.</summary>
    /// <param name="IsolatedElementHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    public static ChromeProtocol.Domains.Overlay.SetShowIsolatedElementsRequest SetShowIsolatedElements(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.IsolatedElementHighlightConfigType> IsolatedElementHighlightConfigs)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowIsolatedElementsRequest(IsolatedElementHighlightConfigs);
    }
    /// <summary>Show elements in isolation mode with overlays.</summary>
    /// <param name="IsolatedElementHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowIsolatedElements")]
    public record SetShowIsolatedElementsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("isolatedElementHighlightConfigs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Overlay.IsolatedElementHighlightConfigType> IsolatedElementHighlightConfigs
    ) : ChromeProtocol.Core.ICommand<SetShowIsolatedElementsRequestResult>
    {
    }
    public record SetShowIsolatedElementsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Show Window Controls Overlay for PWA</summary>
    /// <param name="WindowControlsOverlayConfig">Window Controls Overlay data, null means hide Window Controls Overlay</param>
    public static ChromeProtocol.Domains.Overlay.SetShowWindowControlsOverlayRequest SetShowWindowControlsOverlay(ChromeProtocol.Domains.Overlay.WindowControlsOverlayConfigType? WindowControlsOverlayConfig = default)    
    {
      return new ChromeProtocol.Domains.Overlay.SetShowWindowControlsOverlayRequest(WindowControlsOverlayConfig);
    }
    /// <summary>Show Window Controls Overlay for PWA</summary>
    /// <param name="WindowControlsOverlayConfig">Window Controls Overlay data, null means hide Window Controls Overlay</param>
    [ChromeProtocol.Core.MethodName("Overlay.setShowWindowControlsOverlay")]
    public record SetShowWindowControlsOverlayRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("windowControlsOverlayConfig")]
      ChromeProtocol.Domains.Overlay.WindowControlsOverlayConfigType? WindowControlsOverlayConfig = default
    ) : ChromeProtocol.Core.ICommand<SetShowWindowControlsOverlayRequestResult>
    {
    }
    public record SetShowWindowControlsOverlayRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
