// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>
  /// This domain allows configuring virtual Bluetooth devices to test<br/>
  /// the web-bluetooth API.<br/>
  /// </summary>
  public static partial class BluetoothEmulation
  {
    /// <summary>Indicates the various states of Central.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CentralStateType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Stores the manufacturer data</summary>
    /// <param name="Key">
    /// Company identifier<br/>
    /// https://bitbucket.org/bluetooth-SIG/public/src/main/assigned_numbers/company_identifiers/company_identifiers.yaml<br/>
    /// https://usb.org/developers<br/>
    /// </param>
    /// <param name="Data">Manufacturer-specific data (Encoded as a base64 string when passed over JSON)</param>
    public record ManufacturerDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("key")]
      int Key,
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      string Data
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Stores the byte data of the advertisement packet sent by a Bluetooth device.</summary>
    /// <param name="Appearance">Stores the external appearance description of the device.</param>
    /// <param name="TxPower">Stores the transmission power of a broadcasting device.</param>
    /// <param name="ManufacturerData">
    /// Key is the company identifier and the value is an array of bytes of<br/>
    /// manufacturer specific data.<br/>
    /// </param>
    public record ScanRecordType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string? Name = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("uuids")]
      System.Collections.Generic.IReadOnlyList<string>? Uuids = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("appearance")]
      int? Appearance = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("txPower")]
      int? TxPower = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("manufacturerData")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.BluetoothEmulation.ManufacturerDataType>? ManufacturerData = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Stores the advertisement packet information that is sent by a Bluetooth device.</summary>
    public record ScanEntryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("deviceAddress")]
      string DeviceAddress,
      [property: System.Text.Json.Serialization.JsonPropertyName("rssi")]
      int Rssi,
      [property: System.Text.Json.Serialization.JsonPropertyName("scanRecord")]
      ChromeProtocol.Domains.BluetoothEmulation.ScanRecordType ScanRecord
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enable the BluetoothEmulation domain.</summary>
    /// <param name="State">State of the simulated central.</param>
    public static ChromeProtocol.Domains.BluetoothEmulation.EnableRequest Enable(ChromeProtocol.Domains.BluetoothEmulation.CentralStateType State)    
    {
      return new ChromeProtocol.Domains.BluetoothEmulation.EnableRequest(State);
    }
    /// <summary>Enable the BluetoothEmulation domain.</summary>
    /// <param name="State">State of the simulated central.</param>
    [ChromeProtocol.Core.MethodName("BluetoothEmulation.enable")]
    public record EnableRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("state")]
      ChromeProtocol.Domains.BluetoothEmulation.CentralStateType State
    ) : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disable the BluetoothEmulation domain.</summary>
    public static ChromeProtocol.Domains.BluetoothEmulation.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.BluetoothEmulation.DisableRequest();
    }
    /// <summary>Disable the BluetoothEmulation domain.</summary>
    [ChromeProtocol.Core.MethodName("BluetoothEmulation.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Simulates a peripheral with |address|, |name| and |knownServiceUuids|<br/>
    /// that has already been connected to the system.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.BluetoothEmulation.SimulatePreconnectedPeripheralRequest SimulatePreconnectedPeripheral(string Address, string Name, System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.BluetoothEmulation.ManufacturerDataType> ManufacturerData, System.Collections.Generic.IReadOnlyList<string> KnownServiceUuids)    
    {
      return new ChromeProtocol.Domains.BluetoothEmulation.SimulatePreconnectedPeripheralRequest(Address, Name, ManufacturerData, KnownServiceUuids);
    }
    /// <summary>
    /// Simulates a peripheral with |address|, |name| and |knownServiceUuids|<br/>
    /// that has already been connected to the system.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("BluetoothEmulation.simulatePreconnectedPeripheral")]
    public record SimulatePreconnectedPeripheralRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("address")]
      string Address,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("manufacturerData")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.BluetoothEmulation.ManufacturerDataType> ManufacturerData,
      [property: System.Text.Json.Serialization.JsonPropertyName("knownServiceUuids")]
      System.Collections.Generic.IReadOnlyList<string> KnownServiceUuids
    ) : ChromeProtocol.Core.ICommand<SimulatePreconnectedPeripheralRequestResult>
    {
    }
    public record SimulatePreconnectedPeripheralRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Simulates an advertisement packet described in |entry| being received by<br/>
    /// the central.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.BluetoothEmulation.SimulateAdvertisementRequest SimulateAdvertisement(ChromeProtocol.Domains.BluetoothEmulation.ScanEntryType Entry)    
    {
      return new ChromeProtocol.Domains.BluetoothEmulation.SimulateAdvertisementRequest(Entry);
    }
    /// <summary>
    /// Simulates an advertisement packet described in |entry| being received by<br/>
    /// the central.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("BluetoothEmulation.simulateAdvertisement")]
    public record SimulateAdvertisementRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("entry")]
      ChromeProtocol.Domains.BluetoothEmulation.ScanEntryType Entry
    ) : ChromeProtocol.Core.ICommand<SimulateAdvertisementRequestResult>
    {
    }
    public record SimulateAdvertisementRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
