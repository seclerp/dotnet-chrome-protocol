// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain emulates different environments for the page.</summary>
  public static partial class Emulation
  {
    /// <summary>Screen orientation.</summary>
    /// <param name="Type">Orientation type.</param>
    /// <param name="Angle">Orientation angle.</param>
    public record ScreenOrientationType(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("angle")]
      int Angle
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Orientation">Orientation of a display feature in relation to screen</param>
    /// <param name="Offset">
    /// The offset from the screen origin in either the x (for vertical<br/>
    /// orientation) or y (for horizontal orientation) direction.<br/>
    /// </param>
    /// <param name="MaskLength">
    /// A display feature may mask content such that it is not physically<br/>
    /// displayed - this length along with the offset describes this area.<br/>
    /// A display feature that only splits content will have a 0 mask_length.<br/>
    /// </param>
    public record DisplayFeatureType(
      [property: System.Text.Json.Serialization.JsonPropertyName("orientation")]
      string Orientation,
      [property: System.Text.Json.Serialization.JsonPropertyName("offset")]
      int Offset,
      [property: System.Text.Json.Serialization.JsonPropertyName("maskLength")]
      int MaskLength
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Type">Current posture of the device</param>
    public record DevicePostureType(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type
    ) : ChromeProtocol.Core.IType
    {
    }
    public record MediaFeatureType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to<br/>
    /// allow the next delayed task (if any) to run; pause: The virtual time base may not advance;<br/>
    /// pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending<br/>
    /// resource fetches.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record VirtualTimePolicyType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints</summary>
    public record UserAgentBrandVersionType(
      [property: System.Text.Json.Serialization.JsonPropertyName("brand")]
      string Brand,
      [property: System.Text.Json.Serialization.JsonPropertyName("version")]
      string Version
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints<br/>
    /// Missing optional values will be filled in by the target with what it would normally use.<br/>
    /// </summary>
    /// <param name="Brands">Brands appearing in Sec-CH-UA.</param>
    /// <param name="FullVersionList">Brands appearing in Sec-CH-UA-Full-Version-List.</param>
    public record UserAgentMetadataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("platform")]
      string Platform,
      [property: System.Text.Json.Serialization.JsonPropertyName("platformVersion")]
      string PlatformVersion,
      [property: System.Text.Json.Serialization.JsonPropertyName("architecture")]
      string Architecture,
      [property: System.Text.Json.Serialization.JsonPropertyName("model")]
      string Model,
      [property: System.Text.Json.Serialization.JsonPropertyName("mobile")]
      bool Mobile,
      [property: System.Text.Json.Serialization.JsonPropertyName("brands")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.UserAgentBrandVersionType>? Brands = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("fullVersionList")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.UserAgentBrandVersionType>? FullVersionList = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("fullVersion")]
      string? FullVersion = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("bitness")]
      string? Bitness = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("wow64")]
      bool? Wow64 = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Used to specify sensor types to emulate.<br/>
    /// See https://w3c.github.io/sensors/#automation for more information.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SensorTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record SensorMetadataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("available")]
      bool? Available = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("minimumFrequency")]
      double? MinimumFrequency = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("maximumFrequency")]
      double? MaximumFrequency = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record SensorReadingSingleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      double Value
    ) : ChromeProtocol.Core.IType
    {
    }
    public record SensorReadingXYZType(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("z")]
      double Z
    ) : ChromeProtocol.Core.IType
    {
    }
    public record SensorReadingQuaternionType(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("z")]
      double Z,
      [property: System.Text.Json.Serialization.JsonPropertyName("w")]
      double W
    ) : ChromeProtocol.Core.IType
    {
    }
    public record SensorReadingType(
      [property: System.Text.Json.Serialization.JsonPropertyName("single")]
      ChromeProtocol.Domains.Emulation.SensorReadingSingleType? Single = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("xyz")]
      ChromeProtocol.Domains.Emulation.SensorReadingXYZType? Xyz = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("quaternion")]
      ChromeProtocol.Domains.Emulation.SensorReadingQuaternionType? Quaternion = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record PressureSourceType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record PressureStateType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record PressureMetadataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("available")]
      bool? Available = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enum of image types that can be disabled.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record DisabledImageTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.virtualTimeBudgetExpired")]
    public record VirtualTimeBudgetExpired() : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Tells whether emulation is supported.</summary>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Emulation.CanEmulateRequest CanEmulate()    
    {
      return new ChromeProtocol.Domains.Emulation.CanEmulateRequest();
    }
    /// <summary>Tells whether emulation is supported.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.canEmulate")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record CanEmulateRequest() : ChromeProtocol.Core.ICommand<CanEmulateRequestResult>
    {
    }
    /// <param name="Result">True if emulation is supported.</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record CanEmulateRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("result")]
      bool Result
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears the overridden device metrics.</summary>
    public static ChromeProtocol.Domains.Emulation.ClearDeviceMetricsOverrideRequest ClearDeviceMetricsOverride()    
    {
      return new ChromeProtocol.Domains.Emulation.ClearDeviceMetricsOverrideRequest();
    }
    /// <summary>Clears the overridden device metrics.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.clearDeviceMetricsOverride")]
    public record ClearDeviceMetricsOverrideRequest() : ChromeProtocol.Core.ICommand<ClearDeviceMetricsOverrideRequestResult>
    {
    }
    public record ClearDeviceMetricsOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears the overridden Geolocation Position and Error.</summary>
    public static ChromeProtocol.Domains.Emulation.ClearGeolocationOverrideRequest ClearGeolocationOverride()    
    {
      return new ChromeProtocol.Domains.Emulation.ClearGeolocationOverrideRequest();
    }
    /// <summary>Clears the overridden Geolocation Position and Error.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.clearGeolocationOverride")]
    public record ClearGeolocationOverrideRequest() : ChromeProtocol.Core.ICommand<ClearGeolocationOverrideRequestResult>
    {
    }
    public record ClearGeolocationOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests that page scale factor is reset to initial values.</summary>
    public static ChromeProtocol.Domains.Emulation.ResetPageScaleFactorRequest ResetPageScaleFactor()    
    {
      return new ChromeProtocol.Domains.Emulation.ResetPageScaleFactorRequest();
    }
    /// <summary>Requests that page scale factor is reset to initial values.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.resetPageScaleFactor")]
    public record ResetPageScaleFactorRequest() : ChromeProtocol.Core.ICommand<ResetPageScaleFactorRequestResult>
    {
    }
    public record ResetPageScaleFactorRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables or disables simulating a focused and active page.</summary>
    /// <param name="Enabled">Whether to enable to disable focus emulation.</param>
    public static ChromeProtocol.Domains.Emulation.SetFocusEmulationEnabledRequest SetFocusEmulationEnabled(bool Enabled)    
    {
      return new ChromeProtocol.Domains.Emulation.SetFocusEmulationEnabledRequest(Enabled);
    }
    /// <summary>Enables or disables simulating a focused and active page.</summary>
    /// <param name="Enabled">Whether to enable to disable focus emulation.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setFocusEmulationEnabled")]
    public record SetFocusEmulationEnabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetFocusEmulationEnabledRequestResult>
    {
    }
    public record SetFocusEmulationEnabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Automatically render all web contents using a dark theme.</summary>
    /// <param name="Enabled">
    /// Whether to enable or disable automatic dark mode.<br/>
    /// If not specified, any existing override will be cleared.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetAutoDarkModeOverrideRequest SetAutoDarkModeOverride(bool? Enabled = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetAutoDarkModeOverrideRequest(Enabled);
    }
    /// <summary>Automatically render all web contents using a dark theme.</summary>
    /// <param name="Enabled">
    /// Whether to enable or disable automatic dark mode.<br/>
    /// If not specified, any existing override will be cleared.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setAutoDarkModeOverride")]
    public record SetAutoDarkModeOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool? Enabled = default
    ) : ChromeProtocol.Core.ICommand<SetAutoDarkModeOverrideRequestResult>
    {
    }
    public record SetAutoDarkModeOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables CPU throttling to emulate slow CPUs.</summary>
    /// <param name="Rate">Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).</param>
    public static ChromeProtocol.Domains.Emulation.SetCPUThrottlingRateRequest SetCPUThrottlingRate(double Rate)    
    {
      return new ChromeProtocol.Domains.Emulation.SetCPUThrottlingRateRequest(Rate);
    }
    /// <summary>Enables CPU throttling to emulate slow CPUs.</summary>
    /// <param name="Rate">Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).</param>
    [ChromeProtocol.Core.MethodName("Emulation.setCPUThrottlingRate")]
    public record SetCPUThrottlingRateRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("rate")]
      double Rate
    ) : ChromeProtocol.Core.ICommand<SetCPUThrottlingRateRequestResult>
    {
    }
    public record SetCPUThrottlingRateRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sets or clears an override of the default background color of the frame. This override is used<br/>
    /// if the content does not specify one.<br/>
    /// </summary>
    /// <param name="Color">
    /// RGBA of the default background color. If not specified, any existing override will be<br/>
    /// cleared.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetDefaultBackgroundColorOverrideRequest SetDefaultBackgroundColorOverride(ChromeProtocol.Domains.DOM.RGBAType? Color = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetDefaultBackgroundColorOverrideRequest(Color);
    }
    /// <summary>
    /// Sets or clears an override of the default background color of the frame. This override is used<br/>
    /// if the content does not specify one.<br/>
    /// </summary>
    /// <param name="Color">
    /// RGBA of the default background color. If not specified, any existing override will be<br/>
    /// cleared.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setDefaultBackgroundColorOverride")]
    public record SetDefaultBackgroundColorOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("color")]
      ChromeProtocol.Domains.DOM.RGBAType? Color = default
    ) : ChromeProtocol.Core.ICommand<SetDefaultBackgroundColorOverrideRequestResult>
    {
    }
    public record SetDefaultBackgroundColorOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Overrides the values of device screen dimensions (window.screen.width, window.screen.height,<br/>
    /// window.innerWidth, window.innerHeight, and &quot;device-width&quot;/&quot;device-height&quot;-related CSS media<br/>
    /// query results).<br/>
    /// </summary>
    /// <param name="Width">Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
    /// <param name="Height">Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
    /// <param name="DeviceScaleFactor">Overriding device scale factor value. 0 disables the override.</param>
    /// <param name="Mobile">
    /// Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text<br/>
    /// autosizing and more.<br/>
    /// </param>
    /// <param name="Scale">Scale to apply to resulting view image.</param>
    /// <param name="ScreenWidth">Overriding screen width value in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="ScreenHeight">Overriding screen height value in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="PositionX">Overriding view X position on screen in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="PositionY">Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="DontSetVisibleSize">Do not set visible view size, rely upon explicit setVisibleSize call.</param>
    /// <param name="ScreenOrientation">Screen orientation override.</param>
    /// <param name="Viewport">
    /// If set, the visible area of the page will be overridden to this viewport. This viewport<br/>
    /// change is not observed by the page, e.g. viewport-relative elements do not change positions.<br/>
    /// </param>
    /// <param name="DisplayFeature">
    /// If set, the display feature of a multi-segment screen. If not set, multi-segment support<br/>
    /// is turned-off.<br/>
    /// </param>
    /// <param name="DevicePosture">
    /// If set, the posture of a foldable device. If not set the posture is set<br/>
    /// to continuous.<br/>
    /// Deprecated, use Emulation.setDevicePostureOverride.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetDeviceMetricsOverrideRequest SetDeviceMetricsOverride(int Width, int Height, double DeviceScaleFactor, bool Mobile, double? Scale = default, int? ScreenWidth = default, int? ScreenHeight = default, int? PositionX = default, int? PositionY = default, bool? DontSetVisibleSize = default, ChromeProtocol.Domains.Emulation.ScreenOrientationType? ScreenOrientation = default, ChromeProtocol.Domains.Page.ViewportType? Viewport = default, ChromeProtocol.Domains.Emulation.DisplayFeatureType? DisplayFeature = default, ChromeProtocol.Domains.Emulation.DevicePostureType? DevicePosture = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetDeviceMetricsOverrideRequest(Width, Height, DeviceScaleFactor, Mobile, Scale, ScreenWidth, ScreenHeight, PositionX, PositionY, DontSetVisibleSize, ScreenOrientation, Viewport, DisplayFeature, DevicePosture);
    }
    /// <summary>
    /// Overrides the values of device screen dimensions (window.screen.width, window.screen.height,<br/>
    /// window.innerWidth, window.innerHeight, and &quot;device-width&quot;/&quot;device-height&quot;-related CSS media<br/>
    /// query results).<br/>
    /// </summary>
    /// <param name="Width">Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
    /// <param name="Height">Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
    /// <param name="DeviceScaleFactor">Overriding device scale factor value. 0 disables the override.</param>
    /// <param name="Mobile">
    /// Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text<br/>
    /// autosizing and more.<br/>
    /// </param>
    /// <param name="Scale">Scale to apply to resulting view image.</param>
    /// <param name="ScreenWidth">Overriding screen width value in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="ScreenHeight">Overriding screen height value in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="PositionX">Overriding view X position on screen in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="PositionY">Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).</param>
    /// <param name="DontSetVisibleSize">Do not set visible view size, rely upon explicit setVisibleSize call.</param>
    /// <param name="ScreenOrientation">Screen orientation override.</param>
    /// <param name="Viewport">
    /// If set, the visible area of the page will be overridden to this viewport. This viewport<br/>
    /// change is not observed by the page, e.g. viewport-relative elements do not change positions.<br/>
    /// </param>
    /// <param name="DisplayFeature">
    /// If set, the display feature of a multi-segment screen. If not set, multi-segment support<br/>
    /// is turned-off.<br/>
    /// </param>
    /// <param name="DevicePosture">
    /// If set, the posture of a foldable device. If not set the posture is set<br/>
    /// to continuous.<br/>
    /// Deprecated, use Emulation.setDevicePostureOverride.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setDeviceMetricsOverride")]
    public record SetDeviceMetricsOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("width")]
      int Width,
      [property: System.Text.Json.Serialization.JsonPropertyName("height")]
      int Height,
      [property: System.Text.Json.Serialization.JsonPropertyName("deviceScaleFactor")]
      double DeviceScaleFactor,
      [property: System.Text.Json.Serialization.JsonPropertyName("mobile")]
      bool Mobile,
      [property: System.Text.Json.Serialization.JsonPropertyName("scale")]
      double? Scale = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("screenWidth")]
      int? ScreenWidth = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("screenHeight")]
      int? ScreenHeight = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("positionX")]
      int? PositionX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("positionY")]
      int? PositionY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("dontSetVisibleSize")]
      bool? DontSetVisibleSize = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("screenOrientation")]
      ChromeProtocol.Domains.Emulation.ScreenOrientationType? ScreenOrientation = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("viewport")]
      ChromeProtocol.Domains.Page.ViewportType? Viewport = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("displayFeature")]
      ChromeProtocol.Domains.Emulation.DisplayFeatureType? DisplayFeature = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("devicePosture")]
      ChromeProtocol.Domains.Emulation.DevicePostureType? DevicePosture = default
    ) : ChromeProtocol.Core.ICommand<SetDeviceMetricsOverrideRequestResult>
    {
    }
    public record SetDeviceMetricsOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Start reporting the given posture value to the Device Posture API.<br/>
    /// This override can also be set in setDeviceMetricsOverride().<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.SetDevicePostureOverrideRequest SetDevicePostureOverride(ChromeProtocol.Domains.Emulation.DevicePostureType Posture)    
    {
      return new ChromeProtocol.Domains.Emulation.SetDevicePostureOverrideRequest(Posture);
    }
    /// <summary>
    /// Start reporting the given posture value to the Device Posture API.<br/>
    /// This override can also be set in setDeviceMetricsOverride().<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.setDevicePostureOverride")]
    public record SetDevicePostureOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("posture")]
      ChromeProtocol.Domains.Emulation.DevicePostureType Posture
    ) : ChromeProtocol.Core.ICommand<SetDevicePostureOverrideRequestResult>
    {
    }
    public record SetDevicePostureOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Clears a device posture override set with either setDeviceMetricsOverride()<br/>
    /// or setDevicePostureOverride() and starts using posture information from the<br/>
    /// platform again.<br/>
    /// Does nothing if no override is set.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.ClearDevicePostureOverrideRequest ClearDevicePostureOverride()    
    {
      return new ChromeProtocol.Domains.Emulation.ClearDevicePostureOverrideRequest();
    }
    /// <summary>
    /// Clears a device posture override set with either setDeviceMetricsOverride()<br/>
    /// or setDevicePostureOverride() and starts using posture information from the<br/>
    /// platform again.<br/>
    /// Does nothing if no override is set.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.clearDevicePostureOverride")]
    public record ClearDevicePostureOverrideRequest() : ChromeProtocol.Core.ICommand<ClearDevicePostureOverrideRequestResult>
    {
    }
    public record ClearDevicePostureOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Hidden">Whether scrollbars should be always hidden.</param>
    public static ChromeProtocol.Domains.Emulation.SetScrollbarsHiddenRequest SetScrollbarsHidden(bool Hidden)    
    {
      return new ChromeProtocol.Domains.Emulation.SetScrollbarsHiddenRequest(Hidden);
    }
    /// <param name="Hidden">Whether scrollbars should be always hidden.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setScrollbarsHidden")]
    public record SetScrollbarsHiddenRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("hidden")]
      bool Hidden
    ) : ChromeProtocol.Core.ICommand<SetScrollbarsHiddenRequestResult>
    {
    }
    public record SetScrollbarsHiddenRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Disabled">Whether document.coookie API should be disabled.</param>
    public static ChromeProtocol.Domains.Emulation.SetDocumentCookieDisabledRequest SetDocumentCookieDisabled(bool Disabled)    
    {
      return new ChromeProtocol.Domains.Emulation.SetDocumentCookieDisabledRequest(Disabled);
    }
    /// <param name="Disabled">Whether document.coookie API should be disabled.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setDocumentCookieDisabled")]
    public record SetDocumentCookieDisabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("disabled")]
      bool Disabled
    ) : ChromeProtocol.Core.ICommand<SetDocumentCookieDisabledRequestResult>
    {
    }
    public record SetDocumentCookieDisabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Enabled">Whether touch emulation based on mouse input should be enabled.</param>
    /// <param name="Configuration">Touch/gesture events configuration. Default: current platform.</param>
    public static ChromeProtocol.Domains.Emulation.SetEmitTouchEventsForMouseRequest SetEmitTouchEventsForMouse(bool Enabled, string? Configuration = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetEmitTouchEventsForMouseRequest(Enabled, Configuration);
    }
    /// <param name="Enabled">Whether touch emulation based on mouse input should be enabled.</param>
    /// <param name="Configuration">Touch/gesture events configuration. Default: current platform.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setEmitTouchEventsForMouse")]
    public record SetEmitTouchEventsForMouseRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled,
      [property: System.Text.Json.Serialization.JsonPropertyName("configuration")]
      string? Configuration = default
    ) : ChromeProtocol.Core.ICommand<SetEmitTouchEventsForMouseRequestResult>
    {
    }
    public record SetEmitTouchEventsForMouseRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Emulates the given media type or media feature for CSS media queries.</summary>
    /// <param name="Media">Media type to emulate. Empty string disables the override.</param>
    /// <param name="Features">Media features to emulate.</param>
    public static ChromeProtocol.Domains.Emulation.SetEmulatedMediaRequest SetEmulatedMedia(string? Media = default, System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.MediaFeatureType>? Features = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetEmulatedMediaRequest(Media, Features);
    }
    /// <summary>Emulates the given media type or media feature for CSS media queries.</summary>
    /// <param name="Media">Media type to emulate. Empty string disables the override.</param>
    /// <param name="Features">Media features to emulate.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setEmulatedMedia")]
    public record SetEmulatedMediaRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("media")]
      string? Media = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("features")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.MediaFeatureType>? Features = default
    ) : ChromeProtocol.Core.ICommand<SetEmulatedMediaRequestResult>
    {
    }
    public record SetEmulatedMediaRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Emulates the given vision deficiency.</summary>
    /// <param name="Type">
    /// Vision deficiency to emulate. Order: best-effort emulations come first, followed by any<br/>
    /// physiologically accurate emulations for medically recognized color vision deficiencies.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetEmulatedVisionDeficiencyRequest SetEmulatedVisionDeficiency(string Type)    
    {
      return new ChromeProtocol.Domains.Emulation.SetEmulatedVisionDeficiencyRequest(Type);
    }
    /// <summary>Emulates the given vision deficiency.</summary>
    /// <param name="Type">
    /// Vision deficiency to emulate. Order: best-effort emulations come first, followed by any<br/>
    /// physiologically accurate emulations for medically recognized color vision deficiencies.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setEmulatedVisionDeficiency")]
    public record SetEmulatedVisionDeficiencyRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type
    ) : ChromeProtocol.Core.ICommand<SetEmulatedVisionDeficiencyRequestResult>
    {
    }
    public record SetEmulatedVisionDeficiencyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position<br/>
    /// unavailable.<br/>
    /// </summary>
    /// <param name="Latitude">Mock latitude</param>
    /// <param name="Longitude">Mock longitude</param>
    /// <param name="Accuracy">Mock accuracy</param>
    public static ChromeProtocol.Domains.Emulation.SetGeolocationOverrideRequest SetGeolocationOverride(double? Latitude = default, double? Longitude = default, double? Accuracy = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetGeolocationOverrideRequest(Latitude, Longitude, Accuracy);
    }
    /// <summary>
    /// Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position<br/>
    /// unavailable.<br/>
    /// </summary>
    /// <param name="Latitude">Mock latitude</param>
    /// <param name="Longitude">Mock longitude</param>
    /// <param name="Accuracy">Mock accuracy</param>
    [ChromeProtocol.Core.MethodName("Emulation.setGeolocationOverride")]
    public record SetGeolocationOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("latitude")]
      double? Latitude = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("longitude")]
      double? Longitude = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("accuracy")]
      double? Accuracy = default
    ) : ChromeProtocol.Core.ICommand<SetGeolocationOverrideRequestResult>
    {
    }
    public record SetGeolocationOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.Emulation.GetOverriddenSensorInformationRequest GetOverriddenSensorInformation(ChromeProtocol.Domains.Emulation.SensorTypeType Type)    
    {
      return new ChromeProtocol.Domains.Emulation.GetOverriddenSensorInformationRequest(Type);
    }
    [ChromeProtocol.Core.MethodName("Emulation.getOverriddenSensorInformation")]
    public record GetOverriddenSensorInformationRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Emulation.SensorTypeType Type
    ) : ChromeProtocol.Core.ICommand<GetOverriddenSensorInformationRequestResult>
    {
    }
    public record GetOverriddenSensorInformationRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("requestedSamplingFrequency")]
      double RequestedSamplingFrequency
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Overrides a platform sensor of a given type. If |enabled| is true, calls to<br/>
    /// Sensor.start() will use a virtual sensor as backend rather than fetching<br/>
    /// data from a real hardware sensor. Otherwise, existing virtual<br/>
    /// sensor-backend Sensor objects will fire an error event and new calls to<br/>
    /// Sensor.start() will attempt to use a real sensor instead.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.SetSensorOverrideEnabledRequest SetSensorOverrideEnabled(bool Enabled, ChromeProtocol.Domains.Emulation.SensorTypeType Type, ChromeProtocol.Domains.Emulation.SensorMetadataType? Metadata = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetSensorOverrideEnabledRequest(Enabled, Type, Metadata);
    }
    /// <summary>
    /// Overrides a platform sensor of a given type. If |enabled| is true, calls to<br/>
    /// Sensor.start() will use a virtual sensor as backend rather than fetching<br/>
    /// data from a real hardware sensor. Otherwise, existing virtual<br/>
    /// sensor-backend Sensor objects will fire an error event and new calls to<br/>
    /// Sensor.start() will attempt to use a real sensor instead.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.setSensorOverrideEnabled")]
    public record SetSensorOverrideEnabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Emulation.SensorTypeType Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("metadata")]
      ChromeProtocol.Domains.Emulation.SensorMetadataType? Metadata = default
    ) : ChromeProtocol.Core.ICommand<SetSensorOverrideEnabledRequestResult>
    {
    }
    public record SetSensorOverrideEnabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Updates the sensor readings reported by a sensor type previously overridden<br/>
    /// by setSensorOverrideEnabled.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.SetSensorOverrideReadingsRequest SetSensorOverrideReadings(ChromeProtocol.Domains.Emulation.SensorTypeType Type, ChromeProtocol.Domains.Emulation.SensorReadingType Reading)    
    {
      return new ChromeProtocol.Domains.Emulation.SetSensorOverrideReadingsRequest(Type, Reading);
    }
    /// <summary>
    /// Updates the sensor readings reported by a sensor type previously overridden<br/>
    /// by setSensorOverrideEnabled.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.setSensorOverrideReadings")]
    public record SetSensorOverrideReadingsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      ChromeProtocol.Domains.Emulation.SensorTypeType Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("reading")]
      ChromeProtocol.Domains.Emulation.SensorReadingType Reading
    ) : ChromeProtocol.Core.ICommand<SetSensorOverrideReadingsRequestResult>
    {
    }
    public record SetSensorOverrideReadingsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Overrides a pressure source of a given type, as used by the Compute<br/>
    /// Pressure API, so that updates to PressureObserver.observe() are provided<br/>
    /// via setPressureStateOverride instead of being retrieved from<br/>
    /// platform-provided telemetry data.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.SetPressureSourceOverrideEnabledRequest SetPressureSourceOverrideEnabled(bool Enabled, ChromeProtocol.Domains.Emulation.PressureSourceType Source, ChromeProtocol.Domains.Emulation.PressureMetadataType? Metadata = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetPressureSourceOverrideEnabledRequest(Enabled, Source, Metadata);
    }
    /// <summary>
    /// Overrides a pressure source of a given type, as used by the Compute<br/>
    /// Pressure API, so that updates to PressureObserver.observe() are provided<br/>
    /// via setPressureStateOverride instead of being retrieved from<br/>
    /// platform-provided telemetry data.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.setPressureSourceOverrideEnabled")]
    public record SetPressureSourceOverrideEnabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled,
      [property: System.Text.Json.Serialization.JsonPropertyName("source")]
      ChromeProtocol.Domains.Emulation.PressureSourceType Source,
      [property: System.Text.Json.Serialization.JsonPropertyName("metadata")]
      ChromeProtocol.Domains.Emulation.PressureMetadataType? Metadata = default
    ) : ChromeProtocol.Core.ICommand<SetPressureSourceOverrideEnabledRequestResult>
    {
    }
    public record SetPressureSourceOverrideEnabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Provides a given pressure state that will be processed and eventually be<br/>
    /// delivered to PressureObserver users. |source| must have been previously<br/>
    /// overridden by setPressureSourceOverrideEnabled.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Emulation.SetPressureStateOverrideRequest SetPressureStateOverride(ChromeProtocol.Domains.Emulation.PressureSourceType Source, ChromeProtocol.Domains.Emulation.PressureStateType State)    
    {
      return new ChromeProtocol.Domains.Emulation.SetPressureStateOverrideRequest(Source, State);
    }
    /// <summary>
    /// Provides a given pressure state that will be processed and eventually be<br/>
    /// delivered to PressureObserver users. |source| must have been previously<br/>
    /// overridden by setPressureSourceOverrideEnabled.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Emulation.setPressureStateOverride")]
    public record SetPressureStateOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("source")]
      ChromeProtocol.Domains.Emulation.PressureSourceType Source,
      [property: System.Text.Json.Serialization.JsonPropertyName("state")]
      ChromeProtocol.Domains.Emulation.PressureStateType State
    ) : ChromeProtocol.Core.ICommand<SetPressureStateOverrideRequestResult>
    {
    }
    public record SetPressureStateOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Overrides the Idle state.</summary>
    /// <param name="IsUserActive">Mock isUserActive</param>
    /// <param name="IsScreenUnlocked">Mock isScreenUnlocked</param>
    public static ChromeProtocol.Domains.Emulation.SetIdleOverrideRequest SetIdleOverride(bool IsUserActive, bool IsScreenUnlocked)    
    {
      return new ChromeProtocol.Domains.Emulation.SetIdleOverrideRequest(IsUserActive, IsScreenUnlocked);
    }
    /// <summary>Overrides the Idle state.</summary>
    /// <param name="IsUserActive">Mock isUserActive</param>
    /// <param name="IsScreenUnlocked">Mock isScreenUnlocked</param>
    [ChromeProtocol.Core.MethodName("Emulation.setIdleOverride")]
    public record SetIdleOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("isUserActive")]
      bool IsUserActive,
      [property: System.Text.Json.Serialization.JsonPropertyName("isScreenUnlocked")]
      bool IsScreenUnlocked
    ) : ChromeProtocol.Core.ICommand<SetIdleOverrideRequestResult>
    {
    }
    public record SetIdleOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears Idle state overrides.</summary>
    public static ChromeProtocol.Domains.Emulation.ClearIdleOverrideRequest ClearIdleOverride()    
    {
      return new ChromeProtocol.Domains.Emulation.ClearIdleOverrideRequest();
    }
    /// <summary>Clears Idle state overrides.</summary>
    [ChromeProtocol.Core.MethodName("Emulation.clearIdleOverride")]
    public record ClearIdleOverrideRequest() : ChromeProtocol.Core.ICommand<ClearIdleOverrideRequestResult>
    {
    }
    public record ClearIdleOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Overrides value returned by the javascript navigator object.</summary>
    /// <param name="Platform">The platform navigator.platform should return.</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Emulation.SetNavigatorOverridesRequest SetNavigatorOverrides(string Platform)    
    {
      return new ChromeProtocol.Domains.Emulation.SetNavigatorOverridesRequest(Platform);
    }
    /// <summary>Overrides value returned by the javascript navigator object.</summary>
    /// <param name="Platform">The platform navigator.platform should return.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setNavigatorOverrides")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetNavigatorOverridesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("platform")]
      string Platform
    ) : ChromeProtocol.Core.ICommand<SetNavigatorOverridesRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetNavigatorOverridesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets a specified page scale factor.</summary>
    /// <param name="PageScaleFactor">Page scale factor.</param>
    public static ChromeProtocol.Domains.Emulation.SetPageScaleFactorRequest SetPageScaleFactor(double PageScaleFactor)    
    {
      return new ChromeProtocol.Domains.Emulation.SetPageScaleFactorRequest(PageScaleFactor);
    }
    /// <summary>Sets a specified page scale factor.</summary>
    /// <param name="PageScaleFactor">Page scale factor.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setPageScaleFactor")]
    public record SetPageScaleFactorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("pageScaleFactor")]
      double PageScaleFactor
    ) : ChromeProtocol.Core.ICommand<SetPageScaleFactorRequestResult>
    {
    }
    public record SetPageScaleFactorRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Switches script execution in the page.</summary>
    /// <param name="Value">Whether script execution should be disabled in the page.</param>
    public static ChromeProtocol.Domains.Emulation.SetScriptExecutionDisabledRequest SetScriptExecutionDisabled(bool Value)    
    {
      return new ChromeProtocol.Domains.Emulation.SetScriptExecutionDisabledRequest(Value);
    }
    /// <summary>Switches script execution in the page.</summary>
    /// <param name="Value">Whether script execution should be disabled in the page.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setScriptExecutionDisabled")]
    public record SetScriptExecutionDisabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      bool Value
    ) : ChromeProtocol.Core.ICommand<SetScriptExecutionDisabledRequestResult>
    {
    }
    public record SetScriptExecutionDisabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables touch on platforms which do not support them.</summary>
    /// <param name="Enabled">Whether the touch event emulation should be enabled.</param>
    /// <param name="MaxTouchPoints">Maximum touch points supported. Defaults to one.</param>
    public static ChromeProtocol.Domains.Emulation.SetTouchEmulationEnabledRequest SetTouchEmulationEnabled(bool Enabled, int? MaxTouchPoints = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetTouchEmulationEnabledRequest(Enabled, MaxTouchPoints);
    }
    /// <summary>Enables touch on platforms which do not support them.</summary>
    /// <param name="Enabled">Whether the touch event emulation should be enabled.</param>
    /// <param name="MaxTouchPoints">Maximum touch points supported. Defaults to one.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setTouchEmulationEnabled")]
    public record SetTouchEmulationEnabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled,
      [property: System.Text.Json.Serialization.JsonPropertyName("maxTouchPoints")]
      int? MaxTouchPoints = default
    ) : ChromeProtocol.Core.ICommand<SetTouchEmulationEnabledRequestResult>
    {
    }
    public record SetTouchEmulationEnabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets<br/>
    /// the current virtual time policy.  Note this supersedes any previous time budget.<br/>
    /// </summary>
    /// <param name="Budget">
    /// If set, after this many virtual milliseconds have elapsed virtual time will be paused and a<br/>
    /// virtualTimeBudgetExpired event is sent.<br/>
    /// </param>
    /// <param name="MaxVirtualTimeTaskStarvationCount">
    /// If set this specifies the maximum number of tasks that can be run before virtual is forced<br/>
    /// forwards to prevent deadlock.<br/>
    /// </param>
    /// <param name="InitialVirtualTime">If set, base::Time::Now will be overridden to initially return this value.</param>
    public static ChromeProtocol.Domains.Emulation.SetVirtualTimePolicyRequest SetVirtualTimePolicy(ChromeProtocol.Domains.Emulation.VirtualTimePolicyType Policy, double? Budget = default, int? MaxVirtualTimeTaskStarvationCount = default, ChromeProtocol.Domains.Network.TimeSinceEpochType? InitialVirtualTime = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetVirtualTimePolicyRequest(Policy, Budget, MaxVirtualTimeTaskStarvationCount, InitialVirtualTime);
    }
    /// <summary>
    /// Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets<br/>
    /// the current virtual time policy.  Note this supersedes any previous time budget.<br/>
    /// </summary>
    /// <param name="Budget">
    /// If set, after this many virtual milliseconds have elapsed virtual time will be paused and a<br/>
    /// virtualTimeBudgetExpired event is sent.<br/>
    /// </param>
    /// <param name="MaxVirtualTimeTaskStarvationCount">
    /// If set this specifies the maximum number of tasks that can be run before virtual is forced<br/>
    /// forwards to prevent deadlock.<br/>
    /// </param>
    /// <param name="InitialVirtualTime">If set, base::Time::Now will be overridden to initially return this value.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setVirtualTimePolicy")]
    public record SetVirtualTimePolicyRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("policy")]
      ChromeProtocol.Domains.Emulation.VirtualTimePolicyType Policy,
      [property: System.Text.Json.Serialization.JsonPropertyName("budget")]
      double? Budget = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("maxVirtualTimeTaskStarvationCount")]
      int? MaxVirtualTimeTaskStarvationCount = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("initialVirtualTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType? InitialVirtualTime = default
    ) : ChromeProtocol.Core.ICommand<SetVirtualTimePolicyRequestResult>
    {
    }
    /// <param name="VirtualTimeTicksBase">Absolute timestamp at which virtual time was first enabled (up time in milliseconds).</param>
    public record SetVirtualTimePolicyRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("virtualTimeTicksBase")]
      double VirtualTimeTicksBase
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Overrides default host system locale with the specified one.</summary>
    /// <param name="Locale">
    /// ICU style C locale (e.g. &quot;en_US&quot;). If not specified or empty, disables the override and<br/>
    /// restores default host system locale.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetLocaleOverrideRequest SetLocaleOverride(string? Locale = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetLocaleOverrideRequest(Locale);
    }
    /// <summary>Overrides default host system locale with the specified one.</summary>
    /// <param name="Locale">
    /// ICU style C locale (e.g. &quot;en_US&quot;). If not specified or empty, disables the override and<br/>
    /// restores default host system locale.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setLocaleOverride")]
    public record SetLocaleOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("locale")]
      string? Locale = default
    ) : ChromeProtocol.Core.ICommand<SetLocaleOverrideRequestResult>
    {
    }
    public record SetLocaleOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Overrides default host system timezone with the specified one.</summary>
    /// <param name="TimezoneId">
    /// The timezone identifier. List of supported timezones:<br/>
    /// https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt<br/>
    /// If empty, disables the override and restores default host system timezone.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Emulation.SetTimezoneOverrideRequest SetTimezoneOverride(string TimezoneId)    
    {
      return new ChromeProtocol.Domains.Emulation.SetTimezoneOverrideRequest(TimezoneId);
    }
    /// <summary>Overrides default host system timezone with the specified one.</summary>
    /// <param name="TimezoneId">
    /// The timezone identifier. List of supported timezones:<br/>
    /// https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt<br/>
    /// If empty, disables the override and restores default host system timezone.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Emulation.setTimezoneOverride")]
    public record SetTimezoneOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("timezoneId")]
      string TimezoneId
    ) : ChromeProtocol.Core.ICommand<SetTimezoneOverrideRequestResult>
    {
    }
    public record SetTimezoneOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Resizes the frame/viewport of the page. Note that this does not affect the frame&#39;s container<br/>
    /// (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported<br/>
    /// on Android.<br/>
    /// </summary>
    /// <param name="Width">Frame width (DIP).</param>
    /// <param name="Height">Frame height (DIP).</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Emulation.SetVisibleSizeRequest SetVisibleSize(int Width, int Height)    
    {
      return new ChromeProtocol.Domains.Emulation.SetVisibleSizeRequest(Width, Height);
    }
    /// <summary>
    /// Resizes the frame/viewport of the page. Note that this does not affect the frame&#39;s container<br/>
    /// (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported<br/>
    /// on Android.<br/>
    /// </summary>
    /// <param name="Width">Frame width (DIP).</param>
    /// <param name="Height">Frame height (DIP).</param>
    [ChromeProtocol.Core.MethodName("Emulation.setVisibleSize")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetVisibleSizeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("width")]
      int Width,
      [property: System.Text.Json.Serialization.JsonPropertyName("height")]
      int Height
    ) : ChromeProtocol.Core.ICommand<SetVisibleSizeRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetVisibleSizeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ImageTypes">Image types to disable.</param>
    public static ChromeProtocol.Domains.Emulation.SetDisabledImageTypesRequest SetDisabledImageTypes(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.DisabledImageTypeType> ImageTypes)    
    {
      return new ChromeProtocol.Domains.Emulation.SetDisabledImageTypesRequest(ImageTypes);
    }
    /// <param name="ImageTypes">Image types to disable.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setDisabledImageTypes")]
    public record SetDisabledImageTypesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("imageTypes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Emulation.DisabledImageTypeType> ImageTypes
    ) : ChromeProtocol.Core.ICommand<SetDisabledImageTypesRequestResult>
    {
    }
    public record SetDisabledImageTypesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="HardwareConcurrency">Hardware concurrency to report</param>
    public static ChromeProtocol.Domains.Emulation.SetHardwareConcurrencyOverrideRequest SetHardwareConcurrencyOverride(int HardwareConcurrency)    
    {
      return new ChromeProtocol.Domains.Emulation.SetHardwareConcurrencyOverrideRequest(HardwareConcurrency);
    }
    /// <param name="HardwareConcurrency">Hardware concurrency to report</param>
    [ChromeProtocol.Core.MethodName("Emulation.setHardwareConcurrencyOverride")]
    public record SetHardwareConcurrencyOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("hardwareConcurrency")]
      int HardwareConcurrency
    ) : ChromeProtocol.Core.ICommand<SetHardwareConcurrencyOverrideRequestResult>
    {
    }
    public record SetHardwareConcurrencyOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Allows overriding user agent with the given string.<br/>
    /// `userAgentMetadata` must be set for Client Hint headers to be sent.<br/>
    /// </summary>
    /// <param name="UserAgent">User agent to use.</param>
    /// <param name="AcceptLanguage">Browser language to emulate.</param>
    /// <param name="Platform">The platform navigator.platform should return.</param>
    /// <param name="UserAgentMetadata">To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</param>
    public static ChromeProtocol.Domains.Emulation.SetUserAgentOverrideRequest SetUserAgentOverride(string UserAgent, string? AcceptLanguage = default, string? Platform = default, ChromeProtocol.Domains.Emulation.UserAgentMetadataType? UserAgentMetadata = default)    
    {
      return new ChromeProtocol.Domains.Emulation.SetUserAgentOverrideRequest(UserAgent, AcceptLanguage, Platform, UserAgentMetadata);
    }
    /// <summary>
    /// Allows overriding user agent with the given string.<br/>
    /// `userAgentMetadata` must be set for Client Hint headers to be sent.<br/>
    /// </summary>
    /// <param name="UserAgent">User agent to use.</param>
    /// <param name="AcceptLanguage">Browser language to emulate.</param>
    /// <param name="Platform">The platform navigator.platform should return.</param>
    /// <param name="UserAgentMetadata">To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</param>
    [ChromeProtocol.Core.MethodName("Emulation.setUserAgentOverride")]
    public record SetUserAgentOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("userAgent")]
      string UserAgent,
      [property: System.Text.Json.Serialization.JsonPropertyName("acceptLanguage")]
      string? AcceptLanguage = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("platform")]
      string? Platform = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("userAgentMetadata")]
      ChromeProtocol.Domains.Emulation.UserAgentMetadataType? UserAgentMetadata = default
    ) : ChromeProtocol.Core.ICommand<SetUserAgentOverrideRequestResult>
    {
    }
    public record SetUserAgentOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Allows overriding the automation flag.</summary>
    /// <param name="Enabled">Whether the override should be enabled.</param>
    public static ChromeProtocol.Domains.Emulation.SetAutomationOverrideRequest SetAutomationOverride(bool Enabled)    
    {
      return new ChromeProtocol.Domains.Emulation.SetAutomationOverrideRequest(Enabled);
    }
    /// <summary>Allows overriding the automation flag.</summary>
    /// <param name="Enabled">Whether the override should be enabled.</param>
    [ChromeProtocol.Core.MethodName("Emulation.setAutomationOverride")]
    public record SetAutomationOverrideRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetAutomationOverrideRequestResult>
    {
    }
    public record SetAutomationOverrideRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
