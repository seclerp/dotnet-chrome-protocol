// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Defines events for background web platform features.</summary>
  public static partial class BackgroundService
  {
    /// <summary>
    /// The Background Service that will be associated with the commands/events.<br/>
    /// Every Background Service operates independently, but they share the same<br/>
    /// API.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record ServiceNameType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>A key-value pair for additional event information to pass along.</summary>
    public record EventMetadataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("key")]
      string Key,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Timestamp">Timestamp of the event (in seconds).</param>
    /// <param name="Origin">The origin this event belongs to.</param>
    /// <param name="ServiceWorkerRegistrationId">The Service Worker ID that initiated the event.</param>
    /// <param name="Service">The Background Service this event belongs to.</param>
    /// <param name="EventName">A description of the event.</param>
    /// <param name="InstanceId">An identifier that groups related events together.</param>
    /// <param name="EventMetadata">A list of event-specific information.</param>
    /// <param name="StorageKey">Storage key this event belongs to.</param>
    public record BackgroundServiceEventType(
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType Timestamp,
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      string Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("serviceWorkerRegistrationId")]
      ChromeProtocol.Domains.ServiceWorker.RegistrationIDType ServiceWorkerRegistrationId,
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service,
      [property: System.Text.Json.Serialization.JsonPropertyName("eventName")]
      string EventName,
      [property: System.Text.Json.Serialization.JsonPropertyName("instanceId")]
      string InstanceId,
      [property: System.Text.Json.Serialization.JsonPropertyName("eventMetadata")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.BackgroundService.EventMetadataType> EventMetadata,
      [property: System.Text.Json.Serialization.JsonPropertyName("storageKey")]
      string StorageKey
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Called when the recording state for the service has been updated.</summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.recordingStateChanged")]
    public record RecordingStateChanged(
      [property: System.Text.Json.Serialization.JsonPropertyName("isRecording")]
      bool IsRecording,
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Called with all existing backgroundServiceEvents when enabled, and all new<br/>
    /// events afterwards if enabled and recording.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.backgroundServiceEventReceived")]
    public record BackgroundServiceEventReceived(
      [property: System.Text.Json.Serialization.JsonPropertyName("backgroundServiceEvent")]
      ChromeProtocol.Domains.BackgroundService.BackgroundServiceEventType BackgroundServiceEvent
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Enables event updates for the service.</summary>
    public static ChromeProtocol.Domains.BackgroundService.StartObservingRequest StartObserving(ChromeProtocol.Domains.BackgroundService.ServiceNameType Service)    
    {
      return new ChromeProtocol.Domains.BackgroundService.StartObservingRequest(Service);
    }
    /// <summary>Enables event updates for the service.</summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.startObserving")]
    public record StartObservingRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service
    ) : ChromeProtocol.Core.ICommand<StartObservingRequestResult>
    {
    }
    public record StartObservingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables event updates for the service.</summary>
    public static ChromeProtocol.Domains.BackgroundService.StopObservingRequest StopObserving(ChromeProtocol.Domains.BackgroundService.ServiceNameType Service)    
    {
      return new ChromeProtocol.Domains.BackgroundService.StopObservingRequest(Service);
    }
    /// <summary>Disables event updates for the service.</summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.stopObserving")]
    public record StopObservingRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service
    ) : ChromeProtocol.Core.ICommand<StopObservingRequestResult>
    {
    }
    public record StopObservingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Set the recording state for the service.</summary>
    public static ChromeProtocol.Domains.BackgroundService.SetRecordingRequest SetRecording(bool ShouldRecord, ChromeProtocol.Domains.BackgroundService.ServiceNameType Service)    
    {
      return new ChromeProtocol.Domains.BackgroundService.SetRecordingRequest(ShouldRecord, Service);
    }
    /// <summary>Set the recording state for the service.</summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.setRecording")]
    public record SetRecordingRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("shouldRecord")]
      bool ShouldRecord,
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service
    ) : ChromeProtocol.Core.ICommand<SetRecordingRequestResult>
    {
    }
    public record SetRecordingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears all stored data for the service.</summary>
    public static ChromeProtocol.Domains.BackgroundService.ClearEventsRequest ClearEvents(ChromeProtocol.Domains.BackgroundService.ServiceNameType Service)    
    {
      return new ChromeProtocol.Domains.BackgroundService.ClearEventsRequest(Service);
    }
    /// <summary>Clears all stored data for the service.</summary>
    [ChromeProtocol.Core.MethodName("BackgroundService.clearEvents")]
    public record ClearEventsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("service")]
      ChromeProtocol.Domains.BackgroundService.ServiceNameType Service
    ) : ChromeProtocol.Core.ICommand<ClearEventsRequestResult>
    {
    }
    public record ClearEventsRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
