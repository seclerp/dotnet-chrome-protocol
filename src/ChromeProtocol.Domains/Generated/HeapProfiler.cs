// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class HeapProfiler
  {
    /// <summary>Heap snapshot object id.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record HeapSnapshotObjectIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.</summary>
    /// <param name="CallFrame">Function location.</param>
    /// <param name="SelfSize">Allocations size in bytes for the node excluding children.</param>
    /// <param name="Id">Node id. Ids are unique across all profiles collected between startSampling and stopSampling.</param>
    /// <param name="Children">Child nodes.</param>
    public record SamplingHeapProfileNodeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("callFrame")]
      ChromeProtocol.Domains.Runtime.CallFrameType CallFrame,
      [property: System.Text.Json.Serialization.JsonPropertyName("selfSize")]
      double SelfSize,
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      int Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("children")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.HeapProfiler.SamplingHeapProfileNodeType> Children
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>A single sample from a sampling profile.</summary>
    /// <param name="Size">Allocation size in bytes attributed to the sample.</param>
    /// <param name="NodeId">Id of the corresponding profile tree node.</param>
    /// <param name="Ordinal">
    /// Time-ordered sample ordinal number. It is unique across all profiles retrieved<br/>
    /// between startSampling and stopSampling.<br/>
    /// </param>
    public record SamplingHeapProfileSampleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("size")]
      double Size,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      int NodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("ordinal")]
      double Ordinal
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sampling profile.</summary>
    public record SamplingHeapProfileType(
      [property: System.Text.Json.Serialization.JsonPropertyName("head")]
      ChromeProtocol.Domains.HeapProfiler.SamplingHeapProfileNodeType Head,
      [property: System.Text.Json.Serialization.JsonPropertyName("samples")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.HeapProfiler.SamplingHeapProfileSampleType> Samples
    ) : ChromeProtocol.Core.IType
    {
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.addHeapSnapshotChunk")]
    public record AddHeapSnapshotChunk(
      [property: System.Text.Json.Serialization.JsonPropertyName("chunk")]
      string Chunk
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>If heap objects tracking has been started then backend may send update for one or more fragments</summary>
    /// <param name="StatsUpdate">
    /// An array of triplets. Each triplet describes a fragment. The first integer is the fragment<br/>
    /// index, the second integer is a total count of objects for the fragment, the third integer is<br/>
    /// a total size of the objects for the fragment.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.heapStatsUpdate")]
    public record HeapStatsUpdate(
      [property: System.Text.Json.Serialization.JsonPropertyName("statsUpdate")]
      System.Collections.Generic.IReadOnlyList<int> StatsUpdate
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// If heap objects tracking has been started then backend regularly sends a current value for last<br/>
    /// seen object id and corresponding timestamp. If the were changes in the heap since last event<br/>
    /// then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("HeapProfiler.lastSeenObjectId")]
    public record LastSeenObjectId(
      [property: System.Text.Json.Serialization.JsonPropertyName("lastSeenObjectId")]
      int LastSeenObjectIdProperty,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      double Timestamp
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.reportHeapSnapshotProgress")]
    public record ReportHeapSnapshotProgress(
      [property: System.Text.Json.Serialization.JsonPropertyName("done")]
      int Done,
      [property: System.Text.Json.Serialization.JsonPropertyName("total")]
      int Total,
      [property: System.Text.Json.Serialization.JsonPropertyName("finished")]
      bool? Finished = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.resetProfiles")]
    public record ResetProfiles() : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Enables console to refer to the node with given id via $x (see Command Line API for more details<br/>
    /// $x functions).<br/>
    /// </summary>
    /// <param name="HeapObjectId">Heap snapshot object id to be accessible by means of $x command line API.</param>
    public static ChromeProtocol.Domains.HeapProfiler.AddInspectedHeapObjectRequest AddInspectedHeapObject(ChromeProtocol.Domains.HeapProfiler.HeapSnapshotObjectIdType HeapObjectId)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.AddInspectedHeapObjectRequest(HeapObjectId);
    }
    /// <summary>
    /// Enables console to refer to the node with given id via $x (see Command Line API for more details<br/>
    /// $x functions).<br/>
    /// </summary>
    /// <param name="HeapObjectId">Heap snapshot object id to be accessible by means of $x command line API.</param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.addInspectedHeapObject")]
    public record AddInspectedHeapObjectRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("heapObjectId")]
      ChromeProtocol.Domains.HeapProfiler.HeapSnapshotObjectIdType HeapObjectId
    ) : ChromeProtocol.Core.ICommand<AddInspectedHeapObjectRequestResult>
    {
    }
    public record AddInspectedHeapObjectRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.CollectGarbageRequest CollectGarbage()    
    {
      return new ChromeProtocol.Domains.HeapProfiler.CollectGarbageRequest();
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.collectGarbage")]
    public record CollectGarbageRequest() : ChromeProtocol.Core.ICommand<CollectGarbageRequestResult>
    {
    }
    public record CollectGarbageRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.HeapProfiler.DisableRequest();
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.HeapProfiler.EnableRequest();
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ObjectId">Identifier of the object to get heap object id for.</param>
    public static ChromeProtocol.Domains.HeapProfiler.GetHeapObjectIdRequest GetHeapObjectId(ChromeProtocol.Domains.Runtime.RemoteObjectIdType ObjectId)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.GetHeapObjectIdRequest(ObjectId);
    }
    /// <param name="ObjectId">Identifier of the object to get heap object id for.</param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.getHeapObjectId")]
    public record GetHeapObjectIdRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.Runtime.RemoteObjectIdType ObjectId
    ) : ChromeProtocol.Core.ICommand<GetHeapObjectIdRequestResult>
    {
    }
    /// <param name="HeapSnapshotObjectId">Id of the heap snapshot object corresponding to the passed remote object id.</param>
    public record GetHeapObjectIdRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("heapSnapshotObjectId")]
      ChromeProtocol.Domains.HeapProfiler.HeapSnapshotObjectIdType HeapSnapshotObjectId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ObjectGroup">Symbolic group name that can be used to release multiple objects.</param>
    public static ChromeProtocol.Domains.HeapProfiler.GetObjectByHeapObjectIdRequest GetObjectByHeapObjectId(ChromeProtocol.Domains.HeapProfiler.HeapSnapshotObjectIdType ObjectId, string? ObjectGroup = default)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.GetObjectByHeapObjectIdRequest(ObjectId, ObjectGroup);
    }
    /// <param name="ObjectGroup">Symbolic group name that can be used to release multiple objects.</param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.getObjectByHeapObjectId")]
    public record GetObjectByHeapObjectIdRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("objectId")]
      ChromeProtocol.Domains.HeapProfiler.HeapSnapshotObjectIdType ObjectId,
      [property: System.Text.Json.Serialization.JsonPropertyName("objectGroup")]
      string? ObjectGroup = default
    ) : ChromeProtocol.Core.ICommand<GetObjectByHeapObjectIdRequestResult>
    {
    }
    /// <param name="Result">Evaluation result.</param>
    public record GetObjectByHeapObjectIdRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("result")]
      ChromeProtocol.Domains.Runtime.RemoteObjectType Result
    ) : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.GetSamplingProfileRequest GetSamplingProfile()    
    {
      return new ChromeProtocol.Domains.HeapProfiler.GetSamplingProfileRequest();
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.getSamplingProfile")]
    public record GetSamplingProfileRequest() : ChromeProtocol.Core.ICommand<GetSamplingProfileRequestResult>
    {
    }
    /// <param name="Profile">Return the sampling profile being collected.</param>
    public record GetSamplingProfileRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("profile")]
      ChromeProtocol.Domains.HeapProfiler.SamplingHeapProfileType Profile
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="SamplingInterval">
    /// Average sample interval in bytes. Poisson distribution is used for the intervals. The<br/>
    /// default value is 32768 bytes.<br/>
    /// </param>
    /// <param name="IncludeObjectsCollectedByMajorGC">
    /// By default, the sampling heap profiler reports only objects which are<br/>
    /// still alive when the profile is returned via getSamplingProfile or<br/>
    /// stopSampling, which is useful for determining what functions contribute<br/>
    /// the most to steady-state memory usage. This flag instructs the sampling<br/>
    /// heap profiler to also include information about objects discarded by<br/>
    /// major GC, which will show which functions cause large temporary memory<br/>
    /// usage or long GC pauses.<br/>
    /// </param>
    /// <param name="IncludeObjectsCollectedByMinorGC">
    /// By default, the sampling heap profiler reports only objects which are<br/>
    /// still alive when the profile is returned via getSamplingProfile or<br/>
    /// stopSampling, which is useful for determining what functions contribute<br/>
    /// the most to steady-state memory usage. This flag instructs the sampling<br/>
    /// heap profiler to also include information about objects discarded by<br/>
    /// minor GC, which is useful when tuning a latency-sensitive application<br/>
    /// for minimal GC activity.<br/>
    /// </param>
    public static ChromeProtocol.Domains.HeapProfiler.StartSamplingRequest StartSampling(double? SamplingInterval = default, bool? IncludeObjectsCollectedByMajorGC = default, bool? IncludeObjectsCollectedByMinorGC = default)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.StartSamplingRequest(SamplingInterval, IncludeObjectsCollectedByMajorGC, IncludeObjectsCollectedByMinorGC);
    }
    /// <param name="SamplingInterval">
    /// Average sample interval in bytes. Poisson distribution is used for the intervals. The<br/>
    /// default value is 32768 bytes.<br/>
    /// </param>
    /// <param name="IncludeObjectsCollectedByMajorGC">
    /// By default, the sampling heap profiler reports only objects which are<br/>
    /// still alive when the profile is returned via getSamplingProfile or<br/>
    /// stopSampling, which is useful for determining what functions contribute<br/>
    /// the most to steady-state memory usage. This flag instructs the sampling<br/>
    /// heap profiler to also include information about objects discarded by<br/>
    /// major GC, which will show which functions cause large temporary memory<br/>
    /// usage or long GC pauses.<br/>
    /// </param>
    /// <param name="IncludeObjectsCollectedByMinorGC">
    /// By default, the sampling heap profiler reports only objects which are<br/>
    /// still alive when the profile is returned via getSamplingProfile or<br/>
    /// stopSampling, which is useful for determining what functions contribute<br/>
    /// the most to steady-state memory usage. This flag instructs the sampling<br/>
    /// heap profiler to also include information about objects discarded by<br/>
    /// minor GC, which is useful when tuning a latency-sensitive application<br/>
    /// for minimal GC activity.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.startSampling")]
    public record StartSamplingRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("samplingInterval")]
      double? SamplingInterval = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeObjectsCollectedByMajorGC")]
      bool? IncludeObjectsCollectedByMajorGC = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("includeObjectsCollectedByMinorGC")]
      bool? IncludeObjectsCollectedByMinorGC = default
    ) : ChromeProtocol.Core.ICommand<StartSamplingRequestResult>
    {
    }
    public record StartSamplingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.StartTrackingHeapObjectsRequest StartTrackingHeapObjects(bool? TrackAllocations = default)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.StartTrackingHeapObjectsRequest(TrackAllocations);
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.startTrackingHeapObjects")]
    public record StartTrackingHeapObjectsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("trackAllocations")]
      bool? TrackAllocations = default
    ) : ChromeProtocol.Core.ICommand<StartTrackingHeapObjectsRequestResult>
    {
    }
    public record StartTrackingHeapObjectsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.HeapProfiler.StopSamplingRequest StopSampling()    
    {
      return new ChromeProtocol.Domains.HeapProfiler.StopSamplingRequest();
    }
    [ChromeProtocol.Core.MethodName("HeapProfiler.stopSampling")]
    public record StopSamplingRequest() : ChromeProtocol.Core.ICommand<StopSamplingRequestResult>
    {
    }
    /// <param name="Profile">Recorded sampling heap profile.</param>
    public record StopSamplingRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("profile")]
      ChromeProtocol.Domains.HeapProfiler.SamplingHeapProfileType Profile
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ReportProgress">
    /// If true &#39;reportHeapSnapshotProgress&#39; events will be generated while snapshot is being taken<br/>
    /// when the tracking is stopped.<br/>
    /// </param>
    /// <param name="TreatGlobalObjectsAsRoots">Deprecated in favor of `exposeInternals`.</param>
    /// <param name="CaptureNumericValue">If true, numerical values are included in the snapshot</param>
    /// <param name="ExposeInternals">If true, exposes internals of the snapshot.</param>
    public static ChromeProtocol.Domains.HeapProfiler.StopTrackingHeapObjectsRequest StopTrackingHeapObjects(bool? ReportProgress = default, bool? TreatGlobalObjectsAsRoots = default, bool? CaptureNumericValue = default, bool? ExposeInternals = default)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.StopTrackingHeapObjectsRequest(ReportProgress, TreatGlobalObjectsAsRoots, CaptureNumericValue, ExposeInternals);
    }
    /// <param name="ReportProgress">
    /// If true &#39;reportHeapSnapshotProgress&#39; events will be generated while snapshot is being taken<br/>
    /// when the tracking is stopped.<br/>
    /// </param>
    /// <param name="TreatGlobalObjectsAsRoots">Deprecated in favor of `exposeInternals`.</param>
    /// <param name="CaptureNumericValue">If true, numerical values are included in the snapshot</param>
    /// <param name="ExposeInternals">If true, exposes internals of the snapshot.</param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.stopTrackingHeapObjects")]
    public record StopTrackingHeapObjectsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("reportProgress")]
      bool? ReportProgress = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("treatGlobalObjectsAsRoots")]
      bool? TreatGlobalObjectsAsRoots = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("captureNumericValue")]
      bool? CaptureNumericValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("exposeInternals")]
      bool? ExposeInternals = default
    ) : ChromeProtocol.Core.ICommand<StopTrackingHeapObjectsRequestResult>
    {
    }
    public record StopTrackingHeapObjectsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="ReportProgress">If true &#39;reportHeapSnapshotProgress&#39; events will be generated while snapshot is being taken.</param>
    /// <param name="TreatGlobalObjectsAsRoots">
    /// If true, a raw snapshot without artificial roots will be generated.<br/>
    /// Deprecated in favor of `exposeInternals`.<br/>
    /// </param>
    /// <param name="CaptureNumericValue">If true, numerical values are included in the snapshot</param>
    /// <param name="ExposeInternals">If true, exposes internals of the snapshot.</param>
    public static ChromeProtocol.Domains.HeapProfiler.TakeHeapSnapshotRequest TakeHeapSnapshot(bool? ReportProgress = default, bool? TreatGlobalObjectsAsRoots = default, bool? CaptureNumericValue = default, bool? ExposeInternals = default)    
    {
      return new ChromeProtocol.Domains.HeapProfiler.TakeHeapSnapshotRequest(ReportProgress, TreatGlobalObjectsAsRoots, CaptureNumericValue, ExposeInternals);
    }
    /// <param name="ReportProgress">If true &#39;reportHeapSnapshotProgress&#39; events will be generated while snapshot is being taken.</param>
    /// <param name="TreatGlobalObjectsAsRoots">
    /// If true, a raw snapshot without artificial roots will be generated.<br/>
    /// Deprecated in favor of `exposeInternals`.<br/>
    /// </param>
    /// <param name="CaptureNumericValue">If true, numerical values are included in the snapshot</param>
    /// <param name="ExposeInternals">If true, exposes internals of the snapshot.</param>
    [ChromeProtocol.Core.MethodName("HeapProfiler.takeHeapSnapshot")]
    public record TakeHeapSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("reportProgress")]
      bool? ReportProgress = default,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("treatGlobalObjectsAsRoots")]
      bool? TreatGlobalObjectsAsRoots = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("captureNumericValue")]
      bool? CaptureNumericValue = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("exposeInternals")]
      bool? ExposeInternals = default
    ) : ChromeProtocol.Core.ICommand<TakeHeapSnapshotRequestResult>
    {
    }
    public record TakeHeapSnapshotRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
