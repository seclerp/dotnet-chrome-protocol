// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class LayerTree
  {
    /// <summary>Unique Layer identifier.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record LayerIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Unique snapshot identifier.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SnapshotIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Rectangle where scrolling happens on the main thread.</summary>
    /// <param name="Rect">Rectangle itself.</param>
    /// <param name="Type">Reason for rectangle to force scrolling on the main thread</param>
    public record ScrollRectType(
      [property: System.Text.Json.Serialization.JsonPropertyName("rect")]
      ChromeProtocol.Domains.DOM.RectType Rect,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sticky position constraints.</summary>
    /// <param name="StickyBoxRect">Layout rectangle of the sticky element before being shifted</param>
    /// <param name="ContainingBlockRect">Layout rectangle of the containing block of the sticky element</param>
    /// <param name="NearestLayerShiftingStickyBox">The nearest sticky layer that shifts the sticky box</param>
    /// <param name="NearestLayerShiftingContainingBlock">The nearest sticky layer that shifts the containing block</param>
    public record StickyPositionConstraintType(
      [property: System.Text.Json.Serialization.JsonPropertyName("stickyBoxRect")]
      ChromeProtocol.Domains.DOM.RectType StickyBoxRect,
      [property: System.Text.Json.Serialization.JsonPropertyName("containingBlockRect")]
      ChromeProtocol.Domains.DOM.RectType ContainingBlockRect,
      [property: System.Text.Json.Serialization.JsonPropertyName("nearestLayerShiftingStickyBox")]
      ChromeProtocol.Domains.LayerTree.LayerIdType? NearestLayerShiftingStickyBox = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nearestLayerShiftingContainingBlock")]
      ChromeProtocol.Domains.LayerTree.LayerIdType? NearestLayerShiftingContainingBlock = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Serialized fragment of layer picture along with its offset within the layer.</summary>
    /// <param name="X">Offset from owning layer left boundary</param>
    /// <param name="Y">Offset from owning layer top boundary</param>
    /// <param name="Picture">Base64-encoded snapshot data. (Encoded as a base64 string when passed over JSON)</param>
    public record PictureTileType(
      [property: System.Text.Json.Serialization.JsonPropertyName("x")]
      double X,
      [property: System.Text.Json.Serialization.JsonPropertyName("y")]
      double Y,
      [property: System.Text.Json.Serialization.JsonPropertyName("picture")]
      string Picture
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about a compositing layer.</summary>
    /// <param name="LayerId">The unique id for this layer.</param>
    /// <param name="OffsetX">Offset from parent layer, X coordinate.</param>
    /// <param name="OffsetY">Offset from parent layer, Y coordinate.</param>
    /// <param name="Width">Layer width.</param>
    /// <param name="Height">Layer height.</param>
    /// <param name="PaintCount">Indicates how many time this layer has painted.</param>
    /// <param name="DrawsContent">
    /// Indicates whether this layer hosts any content, rather than being used for<br/>
    /// transform/scrolling purposes only.<br/>
    /// </param>
    /// <param name="ParentLayerId">The id of parent (not present for root).</param>
    /// <param name="BackendNodeId">The backend id for the node associated with this layer.</param>
    /// <param name="Transform">Transformation matrix for layer, default is identity matrix</param>
    /// <param name="AnchorX">Transform anchor point X, absent if no transform specified</param>
    /// <param name="AnchorY">Transform anchor point Y, absent if no transform specified</param>
    /// <param name="AnchorZ">Transform anchor point Z, absent if no transform specified</param>
    /// <param name="Invisible">Set if layer is not visible.</param>
    /// <param name="ScrollRects">Rectangles scrolling on main thread only.</param>
    /// <param name="StickyPositionConstraint">Sticky position constraint information</param>
    public record LayerType(
      [property: System.Text.Json.Serialization.JsonPropertyName("layerId")]
      ChromeProtocol.Domains.LayerTree.LayerIdType LayerId,
      [property: System.Text.Json.Serialization.JsonPropertyName("offsetX")]
      double OffsetX,
      [property: System.Text.Json.Serialization.JsonPropertyName("offsetY")]
      double OffsetY,
      [property: System.Text.Json.Serialization.JsonPropertyName("width")]
      double Width,
      [property: System.Text.Json.Serialization.JsonPropertyName("height")]
      double Height,
      [property: System.Text.Json.Serialization.JsonPropertyName("paintCount")]
      int PaintCount,
      [property: System.Text.Json.Serialization.JsonPropertyName("drawsContent")]
      bool DrawsContent,
      [property: System.Text.Json.Serialization.JsonPropertyName("parentLayerId")]
      ChromeProtocol.Domains.LayerTree.LayerIdType? ParentLayerId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("transform")]
      System.Collections.Generic.IReadOnlyList<double>? Transform = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("anchorX")]
      double? AnchorX = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("anchorY")]
      double? AnchorY = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("anchorZ")]
      double? AnchorZ = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("invisible")]
      bool? Invisible = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scrollRects")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.LayerTree.ScrollRectType>? ScrollRects = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("stickyPositionConstraint")]
      ChromeProtocol.Domains.LayerTree.StickyPositionConstraintType? StickyPositionConstraint = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Array of timings, one per paint step.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.ArrayTypeConverter))]
    public record PaintProfileType(
      System.Collections.Generic.IReadOnlyCollection<System.Text.Json.Nodes.JsonNode> Items
    ) : ChromeProtocol.Core.IArrayType
    {
    }
    /// <param name="LayerId">The id of the painted layer.</param>
    /// <param name="Clip">Clip rectangle.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.layerPainted")]
    public record LayerPainted(
      [property: System.Text.Json.Serialization.JsonPropertyName("layerId")]
      ChromeProtocol.Domains.LayerTree.LayerIdType LayerId,
      [property: System.Text.Json.Serialization.JsonPropertyName("clip")]
      ChromeProtocol.Domains.DOM.RectType Clip
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <param name="Layers">Layer tree, absent if not in the compositing mode.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.layerTreeDidChange")]
    public record LayerTreeDidChange(
      [property: System.Text.Json.Serialization.JsonPropertyName("layers")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.LayerTree.LayerType>? Layers = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Provides the reasons why the given layer was composited.</summary>
    /// <param name="LayerId">The id of the layer for which we want to get the reasons it was composited.</param>
    public static ChromeProtocol.Domains.LayerTree.CompositingReasonsRequest CompositingReasons(ChromeProtocol.Domains.LayerTree.LayerIdType LayerId)    
    {
      return new ChromeProtocol.Domains.LayerTree.CompositingReasonsRequest(LayerId);
    }
    /// <summary>Provides the reasons why the given layer was composited.</summary>
    /// <param name="LayerId">The id of the layer for which we want to get the reasons it was composited.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.compositingReasons")]
    public record CompositingReasonsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("layerId")]
      ChromeProtocol.Domains.LayerTree.LayerIdType LayerId
    ) : ChromeProtocol.Core.ICommand<CompositingReasonsRequestResult>
    {
    }
    /// <param name="CompositingReasons">A list of strings specifying reasons for the given layer to become composited.</param>
    /// <param name="CompositingReasonIds">A list of strings specifying reason IDs for the given layer to become composited.</param>
    public record CompositingReasonsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("compositingReasons")]
      System.Collections.Generic.IReadOnlyList<string> CompositingReasons,
      [property: System.Text.Json.Serialization.JsonPropertyName("compositingReasonIds")]
      System.Collections.Generic.IReadOnlyList<string> CompositingReasonIds
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables compositing tree inspection.</summary>
    public static ChromeProtocol.Domains.LayerTree.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.LayerTree.DisableRequest();
    }
    /// <summary>Disables compositing tree inspection.</summary>
    [ChromeProtocol.Core.MethodName("LayerTree.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables compositing tree inspection.</summary>
    public static ChromeProtocol.Domains.LayerTree.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.LayerTree.EnableRequest();
    }
    /// <summary>Enables compositing tree inspection.</summary>
    [ChromeProtocol.Core.MethodName("LayerTree.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns the snapshot identifier.</summary>
    /// <param name="Tiles">An array of tiles composing the snapshot.</param>
    public static ChromeProtocol.Domains.LayerTree.LoadSnapshotRequest LoadSnapshot(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.LayerTree.PictureTileType> Tiles)    
    {
      return new ChromeProtocol.Domains.LayerTree.LoadSnapshotRequest(Tiles);
    }
    /// <summary>Returns the snapshot identifier.</summary>
    /// <param name="Tiles">An array of tiles composing the snapshot.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.loadSnapshot")]
    public record LoadSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("tiles")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.LayerTree.PictureTileType> Tiles
    ) : ChromeProtocol.Core.ICommand<LoadSnapshotRequestResult>
    {
    }
    /// <param name="SnapshotId">The id of the snapshot.</param>
    public record LoadSnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns the layer snapshot identifier.</summary>
    /// <param name="LayerId">The id of the layer.</param>
    public static ChromeProtocol.Domains.LayerTree.MakeSnapshotRequest MakeSnapshot(ChromeProtocol.Domains.LayerTree.LayerIdType LayerId)    
    {
      return new ChromeProtocol.Domains.LayerTree.MakeSnapshotRequest(LayerId);
    }
    /// <summary>Returns the layer snapshot identifier.</summary>
    /// <param name="LayerId">The id of the layer.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.makeSnapshot")]
    public record MakeSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("layerId")]
      ChromeProtocol.Domains.LayerTree.LayerIdType LayerId
    ) : ChromeProtocol.Core.ICommand<MakeSnapshotRequestResult>
    {
    }
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    public record MakeSnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    /// <param name="MinRepeatCount">The maximum number of times to replay the snapshot (1, if not specified).</param>
    /// <param name="MinDuration">The minimum duration (in seconds) to replay the snapshot.</param>
    /// <param name="ClipRect">The clip rectangle to apply when replaying the snapshot.</param>
    public static ChromeProtocol.Domains.LayerTree.ProfileSnapshotRequest ProfileSnapshot(ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId, int? MinRepeatCount = default, double? MinDuration = default, ChromeProtocol.Domains.DOM.RectType? ClipRect = default)    
    {
      return new ChromeProtocol.Domains.LayerTree.ProfileSnapshotRequest(SnapshotId, MinRepeatCount, MinDuration, ClipRect);
    }
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    /// <param name="MinRepeatCount">The maximum number of times to replay the snapshot (1, if not specified).</param>
    /// <param name="MinDuration">The minimum duration (in seconds) to replay the snapshot.</param>
    /// <param name="ClipRect">The clip rectangle to apply when replaying the snapshot.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.profileSnapshot")]
    public record ProfileSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId,
      [property: System.Text.Json.Serialization.JsonPropertyName("minRepeatCount")]
      int? MinRepeatCount = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("minDuration")]
      double? MinDuration = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("clipRect")]
      ChromeProtocol.Domains.DOM.RectType? ClipRect = default
    ) : ChromeProtocol.Core.ICommand<ProfileSnapshotRequestResult>
    {
    }
    /// <param name="Timings">The array of paint profiles, one per run.</param>
    public record ProfileSnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("timings")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.LayerTree.PaintProfileType> Timings
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Releases layer snapshot captured by the back-end.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    public static ChromeProtocol.Domains.LayerTree.ReleaseSnapshotRequest ReleaseSnapshot(ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId)    
    {
      return new ChromeProtocol.Domains.LayerTree.ReleaseSnapshotRequest(SnapshotId);
    }
    /// <summary>Releases layer snapshot captured by the back-end.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.releaseSnapshot")]
    public record ReleaseSnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId
    ) : ChromeProtocol.Core.ICommand<ReleaseSnapshotRequestResult>
    {
    }
    public record ReleaseSnapshotRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Replays the layer snapshot and returns the resulting bitmap.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    /// <param name="FromStep">The first step to replay from (replay from the very start if not specified).</param>
    /// <param name="ToStep">The last step to replay to (replay till the end if not specified).</param>
    /// <param name="Scale">The scale to apply while replaying (defaults to 1).</param>
    public static ChromeProtocol.Domains.LayerTree.ReplaySnapshotRequest ReplaySnapshot(ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId, int? FromStep = default, int? ToStep = default, double? Scale = default)    
    {
      return new ChromeProtocol.Domains.LayerTree.ReplaySnapshotRequest(SnapshotId, FromStep, ToStep, Scale);
    }
    /// <summary>Replays the layer snapshot and returns the resulting bitmap.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    /// <param name="FromStep">The first step to replay from (replay from the very start if not specified).</param>
    /// <param name="ToStep">The last step to replay to (replay till the end if not specified).</param>
    /// <param name="Scale">The scale to apply while replaying (defaults to 1).</param>
    [ChromeProtocol.Core.MethodName("LayerTree.replaySnapshot")]
    public record ReplaySnapshotRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId,
      [property: System.Text.Json.Serialization.JsonPropertyName("fromStep")]
      int? FromStep = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("toStep")]
      int? ToStep = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scale")]
      double? Scale = default
    ) : ChromeProtocol.Core.ICommand<ReplaySnapshotRequestResult>
    {
    }
    /// <param name="DataURL">A data: URL for resulting image.</param>
    public record ReplaySnapshotRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("dataURL")]
      string DataURL
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Replays the layer snapshot and returns canvas log.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    public static ChromeProtocol.Domains.LayerTree.SnapshotCommandLogRequest SnapshotCommandLog(ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId)    
    {
      return new ChromeProtocol.Domains.LayerTree.SnapshotCommandLogRequest(SnapshotId);
    }
    /// <summary>Replays the layer snapshot and returns canvas log.</summary>
    /// <param name="SnapshotId">The id of the layer snapshot.</param>
    [ChromeProtocol.Core.MethodName("LayerTree.snapshotCommandLog")]
    public record SnapshotCommandLogRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("snapshotId")]
      ChromeProtocol.Domains.LayerTree.SnapshotIdType SnapshotId
    ) : ChromeProtocol.Core.ICommand<SnapshotCommandLogRequestResult>
    {
    }
    /// <param name="CommandLog">The array of canvas function calls.</param>
    public record SnapshotCommandLogRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("commandLog")]
      System.Collections.Generic.IReadOnlyList<System.Text.Json.Nodes.JsonObject> CommandLog
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
