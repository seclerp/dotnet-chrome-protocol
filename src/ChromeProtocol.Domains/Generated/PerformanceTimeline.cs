// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>
  /// Reporting of performance timeline events, as specified in<br/>
  /// https://w3c.github.io/performance-timeline/#dom-performanceobserver.<br/>
  /// </summary>
  public static partial class PerformanceTimeline
  {
    /// <summary>See https://github.com/WICG/LargestContentfulPaint and largest_contentful_paint.idl</summary>
    /// <param name="Size">The number of pixels being painted.</param>
    /// <param name="ElementId">The id attribute of the element, if available.</param>
    /// <param name="Url">The URL of the image (may be trimmed).</param>
    public record LargestContentfulPaintType(
      [property: System.Text.Json.Serialization.JsonPropertyName("renderTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType RenderTime,
      [property: System.Text.Json.Serialization.JsonPropertyName("loadTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType LoadTime,
      [property: System.Text.Json.Serialization.JsonPropertyName("size")]
      double Size,
      [property: System.Text.Json.Serialization.JsonPropertyName("elementId")]
      string? ElementId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string? Url = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? NodeId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record LayoutShiftAttributionType(
      [property: System.Text.Json.Serialization.JsonPropertyName("previousRect")]
      ChromeProtocol.Domains.DOM.RectType PreviousRect,
      [property: System.Text.Json.Serialization.JsonPropertyName("currentRect")]
      ChromeProtocol.Domains.DOM.RectType CurrentRect,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? NodeId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>See https://wicg.github.io/layout-instability/#sec-layout-shift and layout_shift.idl</summary>
    /// <param name="Value">Score increment produced by this event.</param>
    public record LayoutShiftType(
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      double Value,
      [property: System.Text.Json.Serialization.JsonPropertyName("hadRecentInput")]
      bool HadRecentInput,
      [property: System.Text.Json.Serialization.JsonPropertyName("lastInputTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType LastInputTime,
      [property: System.Text.Json.Serialization.JsonPropertyName("sources")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.PerformanceTimeline.LayoutShiftAttributionType> Sources
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="FrameId">Identifies the frame that this event is related to. Empty for non-frame targets.</param>
    /// <param name="Type">
    /// The event type, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype<br/>
    /// This determines which of the optional &quot;details&quot; fields is present.<br/>
    /// </param>
    /// <param name="Name">Name may be empty depending on the type.</param>
    /// <param name="Time">Time in seconds since Epoch, monotonically increasing within document lifetime.</param>
    /// <param name="Duration">Event duration, if applicable.</param>
    public record TimelineEventType(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId,
      [property: System.Text.Json.Serialization.JsonPropertyName("type")]
      string Type,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("time")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType Time,
      [property: System.Text.Json.Serialization.JsonPropertyName("duration")]
      double? Duration = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("lcpDetails")]
      ChromeProtocol.Domains.PerformanceTimeline.LargestContentfulPaintType? LcpDetails = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("layoutShiftDetails")]
      ChromeProtocol.Domains.PerformanceTimeline.LayoutShiftType? LayoutShiftDetails = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sent when a performance timeline event is added. See reportPerformanceTimeline method.</summary>
    [ChromeProtocol.Core.MethodName("PerformanceTimeline.timelineEventAdded")]
    public record TimelineEventAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("event")]
      ChromeProtocol.Domains.PerformanceTimeline.TimelineEventType Event
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Previously buffered events would be reported before method returns.<br/>
    /// See also: timelineEventAdded<br/>
    /// </summary>
    /// <param name="EventTypes">
    /// The types of event to report, as specified in<br/>
    /// https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype<br/>
    /// The specified filter overrides any previous filters, passing empty<br/>
    /// filter disables recording.<br/>
    /// Note that not all types exposed to the web platform are currently supported.<br/>
    /// </param>
    public static ChromeProtocol.Domains.PerformanceTimeline.EnableRequest Enable(System.Collections.Generic.IReadOnlyList<string> EventTypes)    
    {
      return new ChromeProtocol.Domains.PerformanceTimeline.EnableRequest(EventTypes);
    }
    /// <summary>
    /// Previously buffered events would be reported before method returns.<br/>
    /// See also: timelineEventAdded<br/>
    /// </summary>
    /// <param name="EventTypes">
    /// The types of event to report, as specified in<br/>
    /// https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype<br/>
    /// The specified filter overrides any previous filters, passing empty<br/>
    /// filter disables recording.<br/>
    /// Note that not all types exposed to the web platform are currently supported.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("PerformanceTimeline.enable")]
    public record EnableRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("eventTypes")]
      System.Collections.Generic.IReadOnlyList<string> EventTypes
    ) : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
