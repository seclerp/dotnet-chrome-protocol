// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Provides access to log entries.</summary>
  public static partial class Log
  {
    /// <summary>Log entry.</summary>
    /// <param name="Source">Log entry source.</param>
    /// <param name="Level">Log entry severity.</param>
    /// <param name="Text">Logged text.</param>
    /// <param name="Timestamp">Timestamp when this entry was added.</param>
    /// <param name="Url">URL of the resource if known.</param>
    /// <param name="LineNumber">Line number in the resource.</param>
    /// <param name="StackTrace">JavaScript stack trace.</param>
    /// <param name="NetworkRequestId">Identifier of the network request associated with this entry.</param>
    /// <param name="WorkerId">Identifier of the worker associated with this entry.</param>
    /// <param name="Args">Call arguments.</param>
    public record LogEntryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("source")]
      string Source,
      [property: System.Text.Json.Serialization.JsonPropertyName("level")]
      string Level,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      ChromeProtocol.Domains.Runtime.TimestampType Timestamp,
      [property: System.Text.Json.Serialization.JsonPropertyName("category")]
      string? Category = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string? Url = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("lineNumber")]
      int? LineNumber = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("stackTrace")]
      ChromeProtocol.Domains.Runtime.StackTraceType? StackTrace = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("networkRequestId")]
      ChromeProtocol.Domains.Network.RequestIdType? NetworkRequestId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("workerId")]
      string? WorkerId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("args")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Runtime.RemoteObjectType>? Args = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Violation configuration setting.</summary>
    /// <param name="Name">Violation type.</param>
    /// <param name="Threshold">Time threshold to trigger upon.</param>
    public record ViolationSettingType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("threshold")]
      double Threshold
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Issued when new message was logged.</summary>
    /// <param name="Entry">The entry.</param>
    [ChromeProtocol.Core.MethodName("Log.entryAdded")]
    public record EntryAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("entry")]
      ChromeProtocol.Domains.Log.LogEntryType Entry
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Clears the log.</summary>
    public static ChromeProtocol.Domains.Log.ClearRequest Clear()    
    {
      return new ChromeProtocol.Domains.Log.ClearRequest();
    }
    /// <summary>Clears the log.</summary>
    [ChromeProtocol.Core.MethodName("Log.clear")]
    public record ClearRequest() : ChromeProtocol.Core.ICommand<ClearRequestResult>
    {
    }
    public record ClearRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables log domain, prevents further log entries from being reported to the client.</summary>
    public static ChromeProtocol.Domains.Log.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Log.DisableRequest();
    }
    /// <summary>Disables log domain, prevents further log entries from being reported to the client.</summary>
    [ChromeProtocol.Core.MethodName("Log.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables log domain, sends the entries collected so far to the client by means of the<br/>
    /// `entryAdded` notification.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Log.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Log.EnableRequest();
    }
    /// <summary>
    /// Enables log domain, sends the entries collected so far to the client by means of the<br/>
    /// `entryAdded` notification.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Log.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>start violation reporting.</summary>
    /// <param name="Config">Configuration for violations.</param>
    public static ChromeProtocol.Domains.Log.StartViolationsReportRequest StartViolationsReport(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Log.ViolationSettingType> Config)    
    {
      return new ChromeProtocol.Domains.Log.StartViolationsReportRequest(Config);
    }
    /// <summary>start violation reporting.</summary>
    /// <param name="Config">Configuration for violations.</param>
    [ChromeProtocol.Core.MethodName("Log.startViolationsReport")]
    public record StartViolationsReportRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("config")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Log.ViolationSettingType> Config
    ) : ChromeProtocol.Core.ICommand<StartViolationsReportRequestResult>
    {
    }
    public record StartViolationsReportRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Stop violation reporting.</summary>
    public static ChromeProtocol.Domains.Log.StopViolationsReportRequest StopViolationsReport()    
    {
      return new ChromeProtocol.Domains.Log.StopViolationsReportRequest();
    }
    /// <summary>Stop violation reporting.</summary>
    [ChromeProtocol.Core.MethodName("Log.stopViolationsReport")]
    public record StopViolationsReportRequest() : ChromeProtocol.Core.ICommand<StopViolationsReportRequestResult>
    {
    }
    public record StopViolationsReportRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
