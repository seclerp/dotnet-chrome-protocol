// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain provides experimental commands only supported in headless mode.</summary>
  public static partial class HeadlessExperimental
  {
    /// <summary>Encoding options for a screenshot.</summary>
    /// <param name="Format">Image compression format (defaults to png).</param>
    /// <param name="Quality">Compression quality from range [0..100] (jpeg and webp only).</param>
    /// <param name="OptimizeForSpeed">Optimize image encoding for speed, not for resulting size (defaults to false)</param>
    public record ScreenshotParamsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("format")]
      string? Format = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("quality")]
      int? Quality = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("optimizeForSpeed")]
      bool? OptimizeForSpeed = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a<br/>
    /// screenshot from the resulting frame. Requires that the target was created with enabled<br/>
    /// BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also<br/>
    /// https://goo.gle/chrome-headless-rendering for more background.<br/>
    /// </summary>
    /// <param name="FrameTimeTicks">
    /// Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,<br/>
    /// the current time will be used.<br/>
    /// </param>
    /// <param name="Interval">
    /// The interval between BeginFrames that is reported to the compositor, in milliseconds.<br/>
    /// Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.<br/>
    /// </param>
    /// <param name="NoDisplayUpdates">
    /// Whether updates should not be committed and drawn onto the display. False by default. If<br/>
    /// true, only side effects of the BeginFrame will be run, such as layout and animations, but<br/>
    /// any visual updates may not be visible on the display or in screenshots.<br/>
    /// </param>
    /// <param name="Screenshot">
    /// If set, a screenshot of the frame will be captured and returned in the response. Otherwise,<br/>
    /// no screenshot will be captured. Note that capturing a screenshot can fail, for example,<br/>
    /// during renderer initialization. In such a case, no screenshot data will be returned.<br/>
    /// </param>
    public static ChromeProtocol.Domains.HeadlessExperimental.BeginFrameRequest BeginFrame(double? FrameTimeTicks = default, double? Interval = default, bool? NoDisplayUpdates = default, ChromeProtocol.Domains.HeadlessExperimental.ScreenshotParamsType? Screenshot = default)    
    {
      return new ChromeProtocol.Domains.HeadlessExperimental.BeginFrameRequest(FrameTimeTicks, Interval, NoDisplayUpdates, Screenshot);
    }
    /// <summary>
    /// Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a<br/>
    /// screenshot from the resulting frame. Requires that the target was created with enabled<br/>
    /// BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also<br/>
    /// https://goo.gle/chrome-headless-rendering for more background.<br/>
    /// </summary>
    /// <param name="FrameTimeTicks">
    /// Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,<br/>
    /// the current time will be used.<br/>
    /// </param>
    /// <param name="Interval">
    /// The interval between BeginFrames that is reported to the compositor, in milliseconds.<br/>
    /// Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.<br/>
    /// </param>
    /// <param name="NoDisplayUpdates">
    /// Whether updates should not be committed and drawn onto the display. False by default. If<br/>
    /// true, only side effects of the BeginFrame will be run, such as layout and animations, but<br/>
    /// any visual updates may not be visible on the display or in screenshots.<br/>
    /// </param>
    /// <param name="Screenshot">
    /// If set, a screenshot of the frame will be captured and returned in the response. Otherwise,<br/>
    /// no screenshot will be captured. Note that capturing a screenshot can fail, for example,<br/>
    /// during renderer initialization. In such a case, no screenshot data will be returned.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("HeadlessExperimental.beginFrame")]
    public record BeginFrameRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameTimeTicks")]
      double? FrameTimeTicks = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("interval")]
      double? Interval = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("noDisplayUpdates")]
      bool? NoDisplayUpdates = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("screenshot")]
      ChromeProtocol.Domains.HeadlessExperimental.ScreenshotParamsType? Screenshot = default
    ) : ChromeProtocol.Core.ICommand<BeginFrameRequestResult>
    {
    }
    /// <param name="HasDamage">
    /// Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the<br/>
    /// display. Reported for diagnostic uses, may be removed in the future.<br/>
    /// </param>
    /// <param name="ScreenshotData">Base64-encoded image data of the screenshot, if one was requested and successfully taken. (Encoded as a base64 string when passed over JSON)</param>
    public record BeginFrameRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("hasDamage")]
      bool HasDamage,
      [property: System.Text.Json.Serialization.JsonPropertyName("screenshotData")]
      string? ScreenshotData = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables headless events for the target.</summary>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.HeadlessExperimental.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.HeadlessExperimental.DisableRequest();
    }
    /// <summary>Disables headless events for the target.</summary>
    [ChromeProtocol.Core.MethodName("HeadlessExperimental.disable")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables headless events for the target.</summary>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.HeadlessExperimental.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.HeadlessExperimental.EnableRequest();
    }
    /// <summary>Enables headless events for the target.</summary>
    [ChromeProtocol.Core.MethodName("HeadlessExperimental.enable")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
