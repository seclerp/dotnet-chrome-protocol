// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>
  /// This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)<br/>
  /// have an associated `id` used in subsequent operations on the related object. Each object type has<br/>
  /// a specific `id` structure, and those are not interchangeable between objects of different kinds.<br/>
  /// CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client<br/>
  /// can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and<br/>
  /// subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.<br/>
  /// </summary>
  public static partial class CSS
  {
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StyleSheetIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Stylesheet type: &quot;injected&quot; for stylesheets injected via extension, &quot;user-agent&quot; for user-agent<br/>
    /// stylesheets, &quot;inspector&quot; for stylesheets created by the inspector (i.e. those holding the &quot;via<br/>
    /// inspector&quot; rules), &quot;regular&quot; for regular stylesheets.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StyleSheetOriginType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>CSS rule collection for a single pseudo style.</summary>
    /// <param name="PseudoType">Pseudo element type.</param>
    /// <param name="Matches">Matches of CSS rules applicable to the pseudo style.</param>
    /// <param name="PseudoIdentifier">Pseudo element custom ident.</param>
    public record PseudoElementMatchesType(
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoType")]
      ChromeProtocol.Domains.DOM.PseudoTypeType PseudoType,
      [property: System.Text.Json.Serialization.JsonPropertyName("matches")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.RuleMatchType> Matches,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoIdentifier")]
      string? PseudoIdentifier = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Inherited CSS rule collection from ancestor node.</summary>
    /// <param name="MatchedCSSRules">Matches of CSS rules matching the ancestor node in the style inheritance chain.</param>
    /// <param name="InlineStyle">The ancestor node&#39;s inline style, if any, in the style inheritance chain.</param>
    public record InheritedStyleEntryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("matchedCSSRules")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.RuleMatchType> MatchedCSSRules,
      [property: System.Text.Json.Serialization.JsonPropertyName("inlineStyle")]
      ChromeProtocol.Domains.CSS.CSSStyleType? InlineStyle = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Inherited pseudo element matches from pseudos of an ancestor node.</summary>
    /// <param name="PseudoElements">Matches of pseudo styles from the pseudos of an ancestor node.</param>
    public record InheritedPseudoElementMatchesType(
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoElements")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.PseudoElementMatchesType> PseudoElements
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Match data for a CSS rule.</summary>
    /// <param name="Rule">CSS rule in the match.</param>
    /// <param name="MatchingSelectors">Matching selector indices in the rule&#39;s selectorList selectors (0-based).</param>
    public record RuleMatchType(
      [property: System.Text.Json.Serialization.JsonPropertyName("rule")]
      ChromeProtocol.Domains.CSS.CSSRuleType Rule,
      [property: System.Text.Json.Serialization.JsonPropertyName("matchingSelectors")]
      System.Collections.Generic.IReadOnlyList<int> MatchingSelectors
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Data for a simple selector (these are delimited by commas in a selector list).</summary>
    /// <param name="Text">Value text.</param>
    /// <param name="Range">Value range in the underlying resource (if available).</param>
    /// <param name="Specificity">Specificity of the selector.</param>
    public record ValueType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("specificity")]
      ChromeProtocol.Domains.CSS.SpecificityType? Specificity = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Specificity:<br/>
    /// https://drafts.csswg.org/selectors/#specificity-rules<br/>
    /// </summary>
    /// <param name="A">The a component, which represents the number of ID selectors.</param>
    /// <param name="B">
    /// The b component, which represents the number of class selectors, attributes selectors, and<br/>
    /// pseudo-classes.<br/>
    /// </param>
    /// <param name="C">The c component, which represents the number of type selectors and pseudo-elements.</param>
    public record SpecificityType(
      [property: System.Text.Json.Serialization.JsonPropertyName("a")]
      int A,
      [property: System.Text.Json.Serialization.JsonPropertyName("b")]
      int B,
      [property: System.Text.Json.Serialization.JsonPropertyName("c")]
      int C
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Selector list data.</summary>
    /// <param name="Selectors">Selectors in the list.</param>
    /// <param name="Text">Rule selector text.</param>
    public record SelectorListType(
      [property: System.Text.Json.Serialization.JsonPropertyName("selectors")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.ValueType> Selectors,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS stylesheet metainformation.</summary>
    /// <param name="StyleSheetId">The stylesheet identifier.</param>
    /// <param name="FrameId">Owner frame identifier.</param>
    /// <param name="SourceURL">
    /// Stylesheet resource URL. Empty if this is a constructed stylesheet created using<br/>
    /// new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported<br/>
    /// as a CSS module script).<br/>
    /// </param>
    /// <param name="Origin">Stylesheet origin.</param>
    /// <param name="Title">Stylesheet title.</param>
    /// <param name="Disabled">Denotes whether the stylesheet is disabled.</param>
    /// <param name="IsInline">
    /// Whether this stylesheet is created for STYLE tag by parser. This flag is not set for<br/>
    /// document.written STYLE tags.<br/>
    /// </param>
    /// <param name="IsMutable">
    /// Whether this stylesheet is mutable. Inline stylesheets become mutable<br/>
    /// after they have been modified via CSSOM API.<br/>
    /// `&lt;link&gt;` element&#39;s stylesheets become mutable only if DevTools modifies them.<br/>
    /// Constructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.<br/>
    /// </param>
    /// <param name="IsConstructed">
    /// True if this stylesheet is created through new CSSStyleSheet() or imported as a<br/>
    /// CSS module script.<br/>
    /// </param>
    /// <param name="StartLine">Line offset of the stylesheet within the resource (zero based).</param>
    /// <param name="StartColumn">Column offset of the stylesheet within the resource (zero based).</param>
    /// <param name="Length">Size of the content (in characters).</param>
    /// <param name="EndLine">Line offset of the end of the stylesheet within the resource (zero based).</param>
    /// <param name="EndColumn">Column offset of the end of the stylesheet within the resource (zero based).</param>
    /// <param name="SourceMapURL">URL of source map associated with the stylesheet (if any).</param>
    /// <param name="OwnerNode">The backend id for the owner node of the stylesheet.</param>
    /// <param name="HasSourceURL">Whether the sourceURL field value comes from the sourceURL comment.</param>
    /// <param name="LoadingFailed">If the style sheet was loaded from a network resource, this indicates when the resource failed to load</param>
    public record CSSStyleSheetHeaderType(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId,
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceURL")]
      string SourceURL,
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("title")]
      string Title,
      [property: System.Text.Json.Serialization.JsonPropertyName("disabled")]
      bool Disabled,
      [property: System.Text.Json.Serialization.JsonPropertyName("isInline")]
      bool IsInline,
      [property: System.Text.Json.Serialization.JsonPropertyName("isMutable")]
      bool IsMutable,
      [property: System.Text.Json.Serialization.JsonPropertyName("isConstructed")]
      bool IsConstructed,
      [property: System.Text.Json.Serialization.JsonPropertyName("startLine")]
      double StartLine,
      [property: System.Text.Json.Serialization.JsonPropertyName("startColumn")]
      double StartColumn,
      [property: System.Text.Json.Serialization.JsonPropertyName("length")]
      double Length,
      [property: System.Text.Json.Serialization.JsonPropertyName("endLine")]
      double EndLine,
      [property: System.Text.Json.Serialization.JsonPropertyName("endColumn")]
      double EndColumn,
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceMapURL")]
      string? SourceMapURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("ownerNode")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? OwnerNode = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("hasSourceURL")]
      bool? HasSourceURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("loadingFailed")]
      bool? LoadingFailed = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS rule representation.</summary>
    /// <param name="SelectorList">Rule selector data.</param>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    /// <param name="NestingSelectors">Array of selectors from ancestor style rules, sorted by distance from the current rule.</param>
    /// <param name="Media">
    /// Media list array (for rules involving media queries). The array enumerates media queries<br/>
    /// starting with the innermost one, going outwards.<br/>
    /// </param>
    /// <param name="ContainerQueries">
    /// Container query list array (for rules involving container queries).<br/>
    /// The array enumerates container queries starting with the innermost one, going outwards.<br/>
    /// </param>
    /// <param name="Supports">
    /// @supports CSS at-rule array.<br/>
    /// The array enumerates @supports at-rules starting with the innermost one, going outwards.<br/>
    /// </param>
    /// <param name="Layers">
    /// Cascade layer array. Contains the layer hierarchy that this rule belongs to starting<br/>
    /// with the innermost layer and going outwards.<br/>
    /// </param>
    /// <param name="Scopes">
    /// @scope CSS at-rule array.<br/>
    /// The array enumerates @scope at-rules starting with the innermost one, going outwards.<br/>
    /// </param>
    /// <param name="RuleTypes">The array keeps the types of ancestor CSSRules from the innermost going outwards.</param>
    public record CSSRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("selectorList")]
      ChromeProtocol.Domains.CSS.SelectorListType SelectorList,
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("nestingSelectors")]
      System.Collections.Generic.IReadOnlyList<string>? NestingSelectors = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("media")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSMediaType>? Media = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("containerQueries")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSContainerQueryType>? ContainerQueries = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("supports")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSSupportsType>? Supports = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("layers")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSLayerType>? Layers = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("scopes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSScopeType>? Scopes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("ruleTypes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSRuleTypeType>? RuleTypes = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enum indicating the type of a CSS rule, used to represent the order of a style rule&#39;s ancestors.<br/>
    /// This list only contains rule types that are collected during the ancestor rule collection.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CSSRuleTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>CSS coverage information.</summary>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    /// <param name="StartOffset">Offset of the start of the rule (including selector) from the beginning of the stylesheet.</param>
    /// <param name="EndOffset">Offset of the end of the rule body from the beginning of the stylesheet.</param>
    /// <param name="Used">Indicates whether the rule was actually used by some element in the page.</param>
    public record RuleUsageType(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("startOffset")]
      double StartOffset,
      [property: System.Text.Json.Serialization.JsonPropertyName("endOffset")]
      double EndOffset,
      [property: System.Text.Json.Serialization.JsonPropertyName("used")]
      bool Used
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Text range within a resource. All numbers are zero-based.</summary>
    /// <param name="StartLine">Start line of range.</param>
    /// <param name="StartColumn">Start column of range (inclusive).</param>
    /// <param name="EndLine">End line of range</param>
    /// <param name="EndColumn">End column of range (exclusive).</param>
    public record SourceRangeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("startLine")]
      int StartLine,
      [property: System.Text.Json.Serialization.JsonPropertyName("startColumn")]
      int StartColumn,
      [property: System.Text.Json.Serialization.JsonPropertyName("endLine")]
      int EndLine,
      [property: System.Text.Json.Serialization.JsonPropertyName("endColumn")]
      int EndColumn
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Name">Shorthand name.</param>
    /// <param name="Value">Shorthand value.</param>
    /// <param name="Important">Whether the property has &quot;!important&quot; annotation (implies `false` if absent).</param>
    public record ShorthandEntryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value,
      [property: System.Text.Json.Serialization.JsonPropertyName("important")]
      bool? Important = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Name">Computed style property name.</param>
    /// <param name="Value">Computed style property value.</param>
    public record CSSComputedStylePropertyType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS style representation.</summary>
    /// <param name="CssProperties">CSS properties in the style.</param>
    /// <param name="ShorthandEntries">Computed values for all shorthands found in the style.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    /// <param name="CssText">Style declaration text (if available).</param>
    /// <param name="Range">Style declaration range in the enclosing stylesheet (if available).</param>
    public record CSSStyleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("cssProperties")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSPropertyType> CssProperties,
      [property: System.Text.Json.Serialization.JsonPropertyName("shorthandEntries")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.ShorthandEntryType> ShorthandEntries,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssText")]
      string? CssText = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS property declaration data.</summary>
    /// <param name="Name">The property name.</param>
    /// <param name="Value">The property value.</param>
    /// <param name="Important">Whether the property has &quot;!important&quot; annotation (implies `false` if absent).</param>
    /// <param name="Implicit">Whether the property is implicit (implies `false` if absent).</param>
    /// <param name="Text">The full property text as specified in the style.</param>
    /// <param name="ParsedOk">Whether the property is understood by the browser (implies `true` if absent).</param>
    /// <param name="Disabled">Whether the property is disabled by the user (present for source-based properties only).</param>
    /// <param name="Range">The entire property range in the enclosing style declaration (if available).</param>
    /// <param name="LonghandProperties">
    /// Parsed longhand components of this property if it is a shorthand.<br/>
    /// This field will be empty if the given property is not a shorthand.<br/>
    /// </param>
    public record CSSPropertyType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value,
      [property: System.Text.Json.Serialization.JsonPropertyName("important")]
      bool? Important = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("implicit")]
      bool? Implicit = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string? Text = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("parsedOk")]
      bool? ParsedOk = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("disabled")]
      bool? Disabled = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("longhandProperties")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSPropertyType>? LonghandProperties = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS media rule descriptor.</summary>
    /// <param name="Text">Media query text.</param>
    /// <param name="Source">
    /// Source of the media query: &quot;mediaRule&quot; if specified by a @media rule, &quot;importRule&quot; if<br/>
    /// specified by an @import rule, &quot;linkedSheet&quot; if specified by a &quot;media&quot; attribute in a linked<br/>
    /// stylesheet&#39;s LINK tag, &quot;inlineSheet&quot; if specified by a &quot;media&quot; attribute in an inline<br/>
    /// stylesheet&#39;s STYLE tag.<br/>
    /// </param>
    /// <param name="SourceURL">URL of the document containing the media query description.</param>
    /// <param name="Range">
    /// The associated rule (@media or @import) header range in the enclosing stylesheet (if<br/>
    /// available).<br/>
    /// </param>
    /// <param name="StyleSheetId">Identifier of the stylesheet containing this object (if exists).</param>
    /// <param name="MediaList">Array of media queries.</param>
    public record CSSMediaType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("source")]
      string Source,
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceURL")]
      string? SourceURL = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("mediaList")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.MediaQueryType>? MediaList = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Media query descriptor.</summary>
    /// <param name="Expressions">Array of media query expressions.</param>
    /// <param name="Active">Whether the media query condition is satisfied.</param>
    public record MediaQueryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("expressions")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.MediaQueryExpressionType> Expressions,
      [property: System.Text.Json.Serialization.JsonPropertyName("active")]
      bool Active
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Media query expression descriptor.</summary>
    /// <param name="Value">Media query expression value.</param>
    /// <param name="Unit">Media query expression units.</param>
    /// <param name="Feature">Media query expression feature.</param>
    /// <param name="ValueRange">The associated range of the value text in the enclosing stylesheet (if available).</param>
    /// <param name="ComputedLength">Computed length of media query expression (if applicable).</param>
    public record MediaQueryExpressionType(
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      double Value,
      [property: System.Text.Json.Serialization.JsonPropertyName("unit")]
      string Unit,
      [property: System.Text.Json.Serialization.JsonPropertyName("feature")]
      string Feature,
      [property: System.Text.Json.Serialization.JsonPropertyName("valueRange")]
      ChromeProtocol.Domains.CSS.SourceRangeType? ValueRange = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("computedLength")]
      double? ComputedLength = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS container query rule descriptor.</summary>
    /// <param name="Text">Container query text.</param>
    /// <param name="Range">
    /// The associated rule header range in the enclosing stylesheet (if<br/>
    /// available).<br/>
    /// </param>
    /// <param name="StyleSheetId">Identifier of the stylesheet containing this object (if exists).</param>
    /// <param name="Name">Optional name for the container.</param>
    /// <param name="PhysicalAxes">Optional physical axes queried for the container.</param>
    /// <param name="LogicalAxes">Optional logical axes queried for the container.</param>
    public record CSSContainerQueryType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string? Name = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("physicalAxes")]
      ChromeProtocol.Domains.DOM.PhysicalAxesType? PhysicalAxes = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("logicalAxes")]
      ChromeProtocol.Domains.DOM.LogicalAxesType? LogicalAxes = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS Supports at-rule descriptor.</summary>
    /// <param name="Text">Supports rule text.</param>
    /// <param name="Active">Whether the supports condition is satisfied.</param>
    /// <param name="Range">
    /// The associated rule header range in the enclosing stylesheet (if<br/>
    /// available).<br/>
    /// </param>
    /// <param name="StyleSheetId">Identifier of the stylesheet containing this object (if exists).</param>
    public record CSSSupportsType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("active")]
      bool Active,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS Scope at-rule descriptor.</summary>
    /// <param name="Text">Scope rule text.</param>
    /// <param name="Range">
    /// The associated rule header range in the enclosing stylesheet (if<br/>
    /// available).<br/>
    /// </param>
    /// <param name="StyleSheetId">Identifier of the stylesheet containing this object (if exists).</param>
    public record CSSScopeType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS Layer at-rule descriptor.</summary>
    /// <param name="Text">Layer name.</param>
    /// <param name="Range">
    /// The associated rule header range in the enclosing stylesheet (if<br/>
    /// available).<br/>
    /// </param>
    /// <param name="StyleSheetId">Identifier of the stylesheet containing this object (if exists).</param>
    public record CSSLayerType(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType? Range = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS Layer data.</summary>
    /// <param name="Name">Layer name.</param>
    /// <param name="Order">
    /// Layer order. The order determines the order of the layer in the cascade order.<br/>
    /// A higher number has higher priority in the cascade order.<br/>
    /// </param>
    /// <param name="SubLayers">Direct sub-layers</param>
    public record CSSLayerDataType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("order")]
      double Order,
      [property: System.Text.Json.Serialization.JsonPropertyName("subLayers")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSLayerDataType>? SubLayers = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about amount of glyphs that were rendered with given font.</summary>
    /// <param name="FamilyName">Font&#39;s family name reported by platform.</param>
    /// <param name="PostScriptName">Font&#39;s PostScript name reported by platform.</param>
    /// <param name="IsCustomFont">Indicates if the font was downloaded or resolved locally.</param>
    /// <param name="GlyphCount">Amount of glyphs that were rendered with this font.</param>
    public record PlatformFontUsageType(
      [property: System.Text.Json.Serialization.JsonPropertyName("familyName")]
      string FamilyName,
      [property: System.Text.Json.Serialization.JsonPropertyName("postScriptName")]
      string PostScriptName,
      [property: System.Text.Json.Serialization.JsonPropertyName("isCustomFont")]
      bool IsCustomFont,
      [property: System.Text.Json.Serialization.JsonPropertyName("glyphCount")]
      double GlyphCount
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about font variation axes for variable fonts</summary>
    /// <param name="Tag">The font-variation-setting tag (a.k.a. &quot;axis tag&quot;).</param>
    /// <param name="Name">Human-readable variation name in the default language (normally, &quot;en&quot;).</param>
    /// <param name="MinValue">The minimum value (inclusive) the font supports for this tag.</param>
    /// <param name="MaxValue">The maximum value (inclusive) the font supports for this tag.</param>
    /// <param name="DefaultValue">The default value.</param>
    public record FontVariationAxisType(
      [property: System.Text.Json.Serialization.JsonPropertyName("tag")]
      string Tag,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("minValue")]
      double MinValue,
      [property: System.Text.Json.Serialization.JsonPropertyName("maxValue")]
      double MaxValue,
      [property: System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
      double DefaultValue
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions<br/>
    /// and additional information such as platformFontFamily and fontVariationAxes.<br/>
    /// </summary>
    /// <param name="FontFamily">The font-family.</param>
    /// <param name="FontStyle">The font-style.</param>
    /// <param name="FontVariant">The font-variant.</param>
    /// <param name="FontWeight">The font-weight.</param>
    /// <param name="FontStretch">The font-stretch.</param>
    /// <param name="FontDisplay">The font-display.</param>
    /// <param name="UnicodeRange">The unicode-range.</param>
    /// <param name="Src">The src.</param>
    /// <param name="PlatformFontFamily">The resolved platform font family</param>
    /// <param name="FontVariationAxes">Available variation settings (a.k.a. &quot;axes&quot;).</param>
    public record FontFaceType(
      [property: System.Text.Json.Serialization.JsonPropertyName("fontFamily")]
      string FontFamily,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontStyle")]
      string FontStyle,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontVariant")]
      string FontVariant,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontWeight")]
      string FontWeight,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontStretch")]
      string FontStretch,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontDisplay")]
      string FontDisplay,
      [property: System.Text.Json.Serialization.JsonPropertyName("unicodeRange")]
      string UnicodeRange,
      [property: System.Text.Json.Serialization.JsonPropertyName("src")]
      string Src,
      [property: System.Text.Json.Serialization.JsonPropertyName("platformFontFamily")]
      string PlatformFontFamily,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontVariationAxes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.FontVariationAxisType>? FontVariationAxes = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS try rule representation.</summary>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    public record CSSTryRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS @position-try rule representation.</summary>
    /// <param name="Name">The prelude dashed-ident name</param>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    public record CSSPositionTryRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      ChromeProtocol.Domains.CSS.ValueType Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("active")]
      bool Active,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS keyframes rule representation.</summary>
    /// <param name="AnimationName">Animation name.</param>
    /// <param name="Keyframes">List of keyframes.</param>
    public record CSSKeyframesRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("animationName")]
      ChromeProtocol.Domains.CSS.ValueType AnimationName,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyframes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSKeyframeRuleType> Keyframes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Representation of a custom property registration through CSS.registerProperty</summary>
    public record CSSPropertyRegistrationType(
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyName")]
      string PropertyName,
      [property: System.Text.Json.Serialization.JsonPropertyName("inherits")]
      bool Inherits,
      [property: System.Text.Json.Serialization.JsonPropertyName("syntax")]
      string Syntax,
      [property: System.Text.Json.Serialization.JsonPropertyName("initialValue")]
      ChromeProtocol.Domains.CSS.ValueType? InitialValue = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS font-palette-values rule representation.</summary>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="FontPaletteName">Associated font palette name.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    public record CSSFontPaletteValuesRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("fontPaletteName")]
      ChromeProtocol.Domains.CSS.ValueType FontPaletteName,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS property at-rule representation.</summary>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="PropertyName">Associated property name.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    public record CSSPropertyRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyName")]
      ChromeProtocol.Domains.CSS.ValueType PropertyName,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>CSS keyframe rule representation.</summary>
    /// <param name="Origin">Parent stylesheet&#39;s origin.</param>
    /// <param name="KeyText">Associated key text.</param>
    /// <param name="Style">Associated style declaration.</param>
    /// <param name="StyleSheetId">
    /// The css style sheet identifier (absent for user agent stylesheet and user-specified<br/>
    /// stylesheet rules) this rule came from.<br/>
    /// </param>
    public record CSSKeyframeRuleType(
      [property: System.Text.Json.Serialization.JsonPropertyName("origin")]
      ChromeProtocol.Domains.CSS.StyleSheetOriginType Origin,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyText")]
      ChromeProtocol.Domains.CSS.ValueType KeyText,
      [property: System.Text.Json.Serialization.JsonPropertyName("style")]
      ChromeProtocol.Domains.CSS.CSSStyleType Style,
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType? StyleSheetId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>A descriptor of operation to mutate style declaration text.</summary>
    /// <param name="StyleSheetId">The css style sheet identifier.</param>
    /// <param name="Range">The range of the style text in the enclosing stylesheet.</param>
    /// <param name="Text">New style text.</param>
    public record StyleDeclarationEditType(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded<br/>
    /// web font.<br/>
    /// </summary>
    /// <param name="Font">The web font that has loaded.</param>
    [ChromeProtocol.Core.MethodName("CSS.fontsUpdated")]
    public record FontsUpdated(
      [property: System.Text.Json.Serialization.JsonPropertyName("font")]
      ChromeProtocol.Domains.CSS.FontFaceType? Font = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Fires whenever a MediaQuery result changes (for example, after a browser window has been<br/>
    /// resized.) The current implementation considers only viewport-dependent media features.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.mediaQueryResultChanged")]
    public record MediaQueryResultChanged() : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired whenever an active document stylesheet is added.</summary>
    /// <param name="Header">Added stylesheet metainfo.</param>
    [ChromeProtocol.Core.MethodName("CSS.styleSheetAdded")]
    public record StyleSheetAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("header")]
      ChromeProtocol.Domains.CSS.CSSStyleSheetHeaderType Header
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired whenever a stylesheet is changed as a result of the client operation.</summary>
    [ChromeProtocol.Core.MethodName("CSS.styleSheetChanged")]
    public record StyleSheetChanged(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Fired whenever an active document stylesheet is removed.</summary>
    /// <param name="StyleSheetId">Identifier of the removed stylesheet.</param>
    [ChromeProtocol.Core.MethodName("CSS.styleSheetRemoved")]
    public record StyleSheetRemoved(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the<br/>
    /// position specified by `location`.<br/>
    /// </summary>
    /// <param name="StyleSheetId">The css style sheet identifier where a new rule should be inserted.</param>
    /// <param name="RuleText">The text of a new rule.</param>
    /// <param name="Location">Text position of a new rule in the target style sheet.</param>
    /// <param name="NodeForPropertySyntaxValidation">
    /// NodeId for the DOM node in whose context custom property declarations for registered properties should be<br/>
    /// validated. If omitted, declarations in the new rule text can only be validated statically, which may produce<br/>
    /// incorrect results if the declaration contains a var() for example.<br/>
    /// </param>
    public static ChromeProtocol.Domains.CSS.AddRuleRequest AddRule(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, string RuleText, ChromeProtocol.Domains.CSS.SourceRangeType Location, ChromeProtocol.Domains.DOM.NodeIdType? NodeForPropertySyntaxValidation = default)    
    {
      return new ChromeProtocol.Domains.CSS.AddRuleRequest(StyleSheetId, RuleText, Location, NodeForPropertySyntaxValidation);
    }
    /// <summary>
    /// Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the<br/>
    /// position specified by `location`.<br/>
    /// </summary>
    /// <param name="StyleSheetId">The css style sheet identifier where a new rule should be inserted.</param>
    /// <param name="RuleText">The text of a new rule.</param>
    /// <param name="Location">Text position of a new rule in the target style sheet.</param>
    /// <param name="NodeForPropertySyntaxValidation">
    /// NodeId for the DOM node in whose context custom property declarations for registered properties should be<br/>
    /// validated. If omitted, declarations in the new rule text can only be validated statically, which may produce<br/>
    /// incorrect results if the declaration contains a var() for example.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("CSS.addRule")]
    public record AddRuleRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("ruleText")]
      string RuleText,
      [property: System.Text.Json.Serialization.JsonPropertyName("location")]
      ChromeProtocol.Domains.CSS.SourceRangeType Location,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeForPropertySyntaxValidation")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeForPropertySyntaxValidation = default
    ) : ChromeProtocol.Core.ICommand<AddRuleRequestResult>
    {
    }
    /// <param name="Rule">The newly created rule.</param>
    public record AddRuleRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("rule")]
      ChromeProtocol.Domains.CSS.CSSRuleType Rule
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns all class names from specified stylesheet.</summary>
    public static ChromeProtocol.Domains.CSS.CollectClassNamesRequest CollectClassNames(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId)    
    {
      return new ChromeProtocol.Domains.CSS.CollectClassNamesRequest(StyleSheetId);
    }
    /// <summary>Returns all class names from specified stylesheet.</summary>
    [ChromeProtocol.Core.MethodName("CSS.collectClassNames")]
    public record CollectClassNamesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId
    ) : ChromeProtocol.Core.ICommand<CollectClassNamesRequestResult>
    {
    }
    /// <param name="ClassNames">Class name list.</param>
    public record CollectClassNamesRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("classNames")]
      System.Collections.Generic.IReadOnlyList<string> ClassNames
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Creates a new special &quot;via-inspector&quot; stylesheet in the frame with given `frameId`.</summary>
    /// <param name="FrameId">Identifier of the frame where &quot;via-inspector&quot; stylesheet should be created.</param>
    public static ChromeProtocol.Domains.CSS.CreateStyleSheetRequest CreateStyleSheet(ChromeProtocol.Domains.Page.FrameIdType FrameId)    
    {
      return new ChromeProtocol.Domains.CSS.CreateStyleSheetRequest(FrameId);
    }
    /// <summary>Creates a new special &quot;via-inspector&quot; stylesheet in the frame with given `frameId`.</summary>
    /// <param name="FrameId">Identifier of the frame where &quot;via-inspector&quot; stylesheet should be created.</param>
    [ChromeProtocol.Core.MethodName("CSS.createStyleSheet")]
    public record CreateStyleSheetRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId
    ) : ChromeProtocol.Core.ICommand<CreateStyleSheetRequestResult>
    {
    }
    /// <param name="StyleSheetId">Identifier of the created &quot;via-inspector&quot; stylesheet.</param>
    public record CreateStyleSheetRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables the CSS agent for the given page.</summary>
    public static ChromeProtocol.Domains.CSS.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.CSS.DisableRequest();
    }
    /// <summary>Disables the CSS agent for the given page.</summary>
    [ChromeProtocol.Core.MethodName("CSS.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been<br/>
    /// enabled until the result of this command is received.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.CSS.EnableRequest();
    }
    /// <summary>
    /// Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been<br/>
    /// enabled until the result of this command is received.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Ensures that the given node will have specified pseudo-classes whenever its style is computed by<br/>
    /// the browser.<br/>
    /// </summary>
    /// <param name="NodeId">The element id for which to force the pseudo state.</param>
    /// <param name="ForcedPseudoClasses">Element pseudo classes to force when computing the element&#39;s style.</param>
    public static ChromeProtocol.Domains.CSS.ForcePseudoStateRequest ForcePseudoState(ChromeProtocol.Domains.DOM.NodeIdType NodeId, System.Collections.Generic.IReadOnlyList<string> ForcedPseudoClasses)    
    {
      return new ChromeProtocol.Domains.CSS.ForcePseudoStateRequest(NodeId, ForcedPseudoClasses);
    }
    /// <summary>
    /// Ensures that the given node will have specified pseudo-classes whenever its style is computed by<br/>
    /// the browser.<br/>
    /// </summary>
    /// <param name="NodeId">The element id for which to force the pseudo state.</param>
    /// <param name="ForcedPseudoClasses">Element pseudo classes to force when computing the element&#39;s style.</param>
    [ChromeProtocol.Core.MethodName("CSS.forcePseudoState")]
    public record ForcePseudoStateRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("forcedPseudoClasses")]
      System.Collections.Generic.IReadOnlyList<string> ForcedPseudoClasses
    ) : ChromeProtocol.Core.ICommand<ForcePseudoStateRequestResult>
    {
    }
    public record ForcePseudoStateRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <param name="NodeId">Id of the node to get background colors for.</param>
    public static ChromeProtocol.Domains.CSS.GetBackgroundColorsRequest GetBackgroundColors(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetBackgroundColorsRequest(NodeId);
    }
    /// <param name="NodeId">Id of the node to get background colors for.</param>
    [ChromeProtocol.Core.MethodName("CSS.getBackgroundColors")]
    public record GetBackgroundColorsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetBackgroundColorsRequestResult>
    {
    }
    /// <param name="BackgroundColors">
    /// The range of background colors behind this element, if it contains any visible text. If no<br/>
    /// visible text is present, this will be undefined. In the case of a flat background color,<br/>
    /// this will consist of simply that color. In the case of a gradient, this will consist of each<br/>
    /// of the color stops. For anything more complicated, this will be an empty array. Images will<br/>
    /// be ignored (as if the image had failed to load).<br/>
    /// </param>
    /// <param name="ComputedFontSize">The computed font size for this node, as a CSS computed value string (e.g. &#39;12px&#39;).</param>
    /// <param name="ComputedFontWeight">
    /// The computed font weight for this node, as a CSS computed value string (e.g. &#39;normal&#39; or<br/>
    /// &#39;100&#39;).<br/>
    /// </param>
    public record GetBackgroundColorsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("backgroundColors")]
      System.Collections.Generic.IReadOnlyList<string>? BackgroundColors = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("computedFontSize")]
      string? ComputedFontSize = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("computedFontWeight")]
      string? ComputedFontWeight = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns the computed style for a DOM node identified by `nodeId`.</summary>
    public static ChromeProtocol.Domains.CSS.GetComputedStyleForNodeRequest GetComputedStyleForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetComputedStyleForNodeRequest(NodeId);
    }
    /// <summary>Returns the computed style for a DOM node identified by `nodeId`.</summary>
    [ChromeProtocol.Core.MethodName("CSS.getComputedStyleForNode")]
    public record GetComputedStyleForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetComputedStyleForNodeRequestResult>
    {
    }
    /// <param name="ComputedStyle">Computed style for the specified DOM node.</param>
    public record GetComputedStyleForNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("computedStyle")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSComputedStylePropertyType> ComputedStyle
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns the styles defined inline (explicitly in the &quot;style&quot; attribute and implicitly, using DOM<br/>
    /// attributes) for a DOM node identified by `nodeId`.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.GetInlineStylesForNodeRequest GetInlineStylesForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetInlineStylesForNodeRequest(NodeId);
    }
    /// <summary>
    /// Returns the styles defined inline (explicitly in the &quot;style&quot; attribute and implicitly, using DOM<br/>
    /// attributes) for a DOM node identified by `nodeId`.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.getInlineStylesForNode")]
    public record GetInlineStylesForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetInlineStylesForNodeRequestResult>
    {
    }
    /// <param name="InlineStyle">Inline style for the specified DOM node.</param>
    /// <param name="AttributesStyle">Attribute-defined element style (e.g. resulting from &quot;width=20 height=100%&quot;).</param>
    public record GetInlineStylesForNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("inlineStyle")]
      ChromeProtocol.Domains.CSS.CSSStyleType? InlineStyle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributesStyle")]
      ChromeProtocol.Domains.CSS.CSSStyleType? AttributesStyle = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns requested styles for a DOM node identified by `nodeId`.</summary>
    public static ChromeProtocol.Domains.CSS.GetMatchedStylesForNodeRequest GetMatchedStylesForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetMatchedStylesForNodeRequest(NodeId);
    }
    /// <summary>Returns requested styles for a DOM node identified by `nodeId`.</summary>
    [ChromeProtocol.Core.MethodName("CSS.getMatchedStylesForNode")]
    public record GetMatchedStylesForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetMatchedStylesForNodeRequestResult>
    {
    }
    /// <param name="InlineStyle">Inline style for the specified DOM node.</param>
    /// <param name="AttributesStyle">Attribute-defined element style (e.g. resulting from &quot;width=20 height=100%&quot;).</param>
    /// <param name="MatchedCSSRules">CSS rules matching this node, from all applicable stylesheets.</param>
    /// <param name="PseudoElements">Pseudo style matches for this node.</param>
    /// <param name="Inherited">A chain of inherited styles (from the immediate node parent up to the DOM tree root).</param>
    /// <param name="InheritedPseudoElements">A chain of inherited pseudo element styles (from the immediate node parent up to the DOM tree root).</param>
    /// <param name="CssKeyframesRules">A list of CSS keyframed animations matching this node.</param>
    /// <param name="CssPositionTryRules">A list of CSS @position-try rules matching this node, based on the position-try-fallbacks property.</param>
    /// <param name="ActivePositionFallbackIndex">
    /// Index of the active fallback in the applied position-try-fallback property,<br/>
    /// will not be set if there is no active position-try fallback.<br/>
    /// </param>
    /// <param name="CssPropertyRules">A list of CSS at-property rules matching this node.</param>
    /// <param name="CssPropertyRegistrations">A list of CSS property registrations matching this node.</param>
    /// <param name="CssFontPaletteValuesRule">A font-palette-values rule matching this node.</param>
    /// <param name="ParentLayoutNodeId">Id of the first parent element that does not have display: contents.</param>
    public record GetMatchedStylesForNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("inlineStyle")]
      ChromeProtocol.Domains.CSS.CSSStyleType? InlineStyle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("attributesStyle")]
      ChromeProtocol.Domains.CSS.CSSStyleType? AttributesStyle = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("matchedCSSRules")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.RuleMatchType>? MatchedCSSRules = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("pseudoElements")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.PseudoElementMatchesType>? PseudoElements = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inherited")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.InheritedStyleEntryType>? Inherited = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("inheritedPseudoElements")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.InheritedPseudoElementMatchesType>? InheritedPseudoElements = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssKeyframesRules")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSKeyframesRuleType>? CssKeyframesRules = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssPositionTryRules")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSPositionTryRuleType>? CssPositionTryRules = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("activePositionFallbackIndex")]
      int? ActivePositionFallbackIndex = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssPropertyRules")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSPropertyRuleType>? CssPropertyRules = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssPropertyRegistrations")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSPropertyRegistrationType>? CssPropertyRegistrations = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("cssFontPaletteValuesRule")]
      ChromeProtocol.Domains.CSS.CSSFontPaletteValuesRuleType? CssFontPaletteValuesRule = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("parentLayoutNodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType? ParentLayoutNodeId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns all media queries parsed by the rendering engine.</summary>
    public static ChromeProtocol.Domains.CSS.GetMediaQueriesRequest GetMediaQueries()    
    {
      return new ChromeProtocol.Domains.CSS.GetMediaQueriesRequest();
    }
    /// <summary>Returns all media queries parsed by the rendering engine.</summary>
    [ChromeProtocol.Core.MethodName("CSS.getMediaQueries")]
    public record GetMediaQueriesRequest() : ChromeProtocol.Core.ICommand<GetMediaQueriesRequestResult>
    {
    }
    public record GetMediaQueriesRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("medias")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSMediaType> Medias
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Requests information about platform fonts which we used to render child TextNodes in the given<br/>
    /// node.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.GetPlatformFontsForNodeRequest GetPlatformFontsForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetPlatformFontsForNodeRequest(NodeId);
    }
    /// <summary>
    /// Requests information about platform fonts which we used to render child TextNodes in the given<br/>
    /// node.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.getPlatformFontsForNode")]
    public record GetPlatformFontsForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetPlatformFontsForNodeRequestResult>
    {
    }
    /// <param name="Fonts">Usage statistics for every employed platform font.</param>
    public record GetPlatformFontsForNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("fonts")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.PlatformFontUsageType> Fonts
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns the current textual content for a stylesheet.</summary>
    public static ChromeProtocol.Domains.CSS.GetStyleSheetTextRequest GetStyleSheetText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId)    
    {
      return new ChromeProtocol.Domains.CSS.GetStyleSheetTextRequest(StyleSheetId);
    }
    /// <summary>Returns the current textual content for a stylesheet.</summary>
    [ChromeProtocol.Core.MethodName("CSS.getStyleSheetText")]
    public record GetStyleSheetTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId
    ) : ChromeProtocol.Core.ICommand<GetStyleSheetTextRequestResult>
    {
    }
    /// <param name="Text">The stylesheet text.</param>
    public record GetStyleSheetTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns all layers parsed by the rendering engine for the tree scope of a node.<br/>
    /// Given a DOM element identified by nodeId, getLayersForNode returns the root<br/>
    /// layer for the nearest ancestor document or shadow root. The layer root contains<br/>
    /// the full layer tree for the tree scope and their ordering.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.GetLayersForNodeRequest GetLayersForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId)    
    {
      return new ChromeProtocol.Domains.CSS.GetLayersForNodeRequest(NodeId);
    }
    /// <summary>
    /// Returns all layers parsed by the rendering engine for the tree scope of a node.<br/>
    /// Given a DOM element identified by nodeId, getLayersForNode returns the root<br/>
    /// layer for the nearest ancestor document or shadow root. The layer root contains<br/>
    /// the full layer tree for the tree scope and their ordering.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.getLayersForNode")]
    public record GetLayersForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId
    ) : ChromeProtocol.Core.ICommand<GetLayersForNodeRequestResult>
    {
    }
    public record GetLayersForNodeRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("rootLayer")]
      ChromeProtocol.Domains.CSS.CSSLayerDataType RootLayer
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Given a CSS selector text and a style sheet ID, getLocationForSelector<br/>
    /// returns an array of locations of the CSS selector in the style sheet.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.GetLocationForSelectorRequest GetLocationForSelector(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, string SelectorText)    
    {
      return new ChromeProtocol.Domains.CSS.GetLocationForSelectorRequest(StyleSheetId, SelectorText);
    }
    /// <summary>
    /// Given a CSS selector text and a style sheet ID, getLocationForSelector<br/>
    /// returns an array of locations of the CSS selector in the style sheet.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.getLocationForSelector")]
    public record GetLocationForSelectorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("selectorText")]
      string SelectorText
    ) : ChromeProtocol.Core.ICommand<GetLocationForSelectorRequestResult>
    {
    }
    public record GetLocationForSelectorRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("ranges")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.SourceRangeType> Ranges
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Starts tracking the given computed styles for updates. The specified array of properties<br/>
    /// replaces the one previously specified. Pass empty array to disable tracking.<br/>
    /// Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.<br/>
    /// The changes to computed style properties are only tracked for nodes pushed to the front-end<br/>
    /// by the DOM agent. If no changes to the tracked properties occur after the node has been pushed<br/>
    /// to the front-end, no updates will be issued for the node.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.TrackComputedStyleUpdatesRequest TrackComputedStyleUpdates(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSComputedStylePropertyType> PropertiesToTrack)    
    {
      return new ChromeProtocol.Domains.CSS.TrackComputedStyleUpdatesRequest(PropertiesToTrack);
    }
    /// <summary>
    /// Starts tracking the given computed styles for updates. The specified array of properties<br/>
    /// replaces the one previously specified. Pass empty array to disable tracking.<br/>
    /// Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.<br/>
    /// The changes to computed style properties are only tracked for nodes pushed to the front-end<br/>
    /// by the DOM agent. If no changes to the tracked properties occur after the node has been pushed<br/>
    /// to the front-end, no updates will be issued for the node.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.trackComputedStyleUpdates")]
    public record TrackComputedStyleUpdatesRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("propertiesToTrack")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSComputedStylePropertyType> PropertiesToTrack
    ) : ChromeProtocol.Core.ICommand<TrackComputedStyleUpdatesRequestResult>
    {
    }
    public record TrackComputedStyleUpdatesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Polls the next batch of computed style updates.</summary>
    public static ChromeProtocol.Domains.CSS.TakeComputedStyleUpdatesRequest TakeComputedStyleUpdates()    
    {
      return new ChromeProtocol.Domains.CSS.TakeComputedStyleUpdatesRequest();
    }
    /// <summary>Polls the next batch of computed style updates.</summary>
    [ChromeProtocol.Core.MethodName("CSS.takeComputedStyleUpdates")]
    public record TakeComputedStyleUpdatesRequest() : ChromeProtocol.Core.ICommand<TakeComputedStyleUpdatesRequestResult>
    {
    }
    /// <param name="NodeIds">The list of node Ids that have their tracked computed styles updated.</param>
    public record TakeComputedStyleUpdatesRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeIds")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.DOM.NodeIdType> NodeIds
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Find a rule with the given active property for the given node and set the new value for this<br/>
    /// property<br/>
    /// </summary>
    /// <param name="NodeId">The element id for which to set property.</param>
    public static ChromeProtocol.Domains.CSS.SetEffectivePropertyValueForNodeRequest SetEffectivePropertyValueForNode(ChromeProtocol.Domains.DOM.NodeIdType NodeId, string PropertyName, string Value)    
    {
      return new ChromeProtocol.Domains.CSS.SetEffectivePropertyValueForNodeRequest(NodeId, PropertyName, Value);
    }
    /// <summary>
    /// Find a rule with the given active property for the given node and set the new value for this<br/>
    /// property<br/>
    /// </summary>
    /// <param name="NodeId">The element id for which to set property.</param>
    [ChromeProtocol.Core.MethodName("CSS.setEffectivePropertyValueForNode")]
    public record SetEffectivePropertyValueForNodeRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeId")]
      ChromeProtocol.Domains.DOM.NodeIdType NodeId,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyName")]
      string PropertyName,
      [property: System.Text.Json.Serialization.JsonPropertyName("value")]
      string Value
    ) : ChromeProtocol.Core.ICommand<SetEffectivePropertyValueForNodeRequestResult>
    {
    }
    public record SetEffectivePropertyValueForNodeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the property rule property name.</summary>
    public static ChromeProtocol.Domains.CSS.SetPropertyRulePropertyNameRequest SetPropertyRulePropertyName(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string PropertyName)    
    {
      return new ChromeProtocol.Domains.CSS.SetPropertyRulePropertyNameRequest(StyleSheetId, Range, PropertyName);
    }
    /// <summary>Modifies the property rule property name.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setPropertyRulePropertyName")]
    public record SetPropertyRulePropertyNameRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyName")]
      string PropertyName
    ) : ChromeProtocol.Core.ICommand<SetPropertyRulePropertyNameRequestResult>
    {
    }
    /// <param name="PropertyName">The resulting key text after modification.</param>
    public record SetPropertyRulePropertyNameRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("propertyName")]
      ChromeProtocol.Domains.CSS.ValueType PropertyName
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the keyframe rule key text.</summary>
    public static ChromeProtocol.Domains.CSS.SetKeyframeKeyRequest SetKeyframeKey(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string KeyText)    
    {
      return new ChromeProtocol.Domains.CSS.SetKeyframeKeyRequest(StyleSheetId, Range, KeyText);
    }
    /// <summary>Modifies the keyframe rule key text.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setKeyframeKey")]
    public record SetKeyframeKeyRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyText")]
      string KeyText
    ) : ChromeProtocol.Core.ICommand<SetKeyframeKeyRequestResult>
    {
    }
    /// <param name="KeyText">The resulting key text after modification.</param>
    public record SetKeyframeKeyRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("keyText")]
      ChromeProtocol.Domains.CSS.ValueType KeyText
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the rule selector.</summary>
    public static ChromeProtocol.Domains.CSS.SetMediaTextRequest SetMediaText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string Text)    
    {
      return new ChromeProtocol.Domains.CSS.SetMediaTextRequest(StyleSheetId, Range, Text);
    }
    /// <summary>Modifies the rule selector.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setMediaText")]
    public record SetMediaTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<SetMediaTextRequestResult>
    {
    }
    /// <param name="Media">The resulting CSS media rule after modification.</param>
    public record SetMediaTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("media")]
      ChromeProtocol.Domains.CSS.CSSMediaType Media
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the expression of a container query.</summary>
    public static ChromeProtocol.Domains.CSS.SetContainerQueryTextRequest SetContainerQueryText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string Text)    
    {
      return new ChromeProtocol.Domains.CSS.SetContainerQueryTextRequest(StyleSheetId, Range, Text);
    }
    /// <summary>Modifies the expression of a container query.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setContainerQueryText")]
    public record SetContainerQueryTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<SetContainerQueryTextRequestResult>
    {
    }
    /// <param name="ContainerQuery">The resulting CSS container query rule after modification.</param>
    public record SetContainerQueryTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("containerQuery")]
      ChromeProtocol.Domains.CSS.CSSContainerQueryType ContainerQuery
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the expression of a supports at-rule.</summary>
    public static ChromeProtocol.Domains.CSS.SetSupportsTextRequest SetSupportsText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string Text)    
    {
      return new ChromeProtocol.Domains.CSS.SetSupportsTextRequest(StyleSheetId, Range, Text);
    }
    /// <summary>Modifies the expression of a supports at-rule.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setSupportsText")]
    public record SetSupportsTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<SetSupportsTextRequestResult>
    {
    }
    /// <param name="Supports">The resulting CSS Supports rule after modification.</param>
    public record SetSupportsTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("supports")]
      ChromeProtocol.Domains.CSS.CSSSupportsType Supports
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the expression of a scope at-rule.</summary>
    public static ChromeProtocol.Domains.CSS.SetScopeTextRequest SetScopeText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string Text)    
    {
      return new ChromeProtocol.Domains.CSS.SetScopeTextRequest(StyleSheetId, Range, Text);
    }
    /// <summary>Modifies the expression of a scope at-rule.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setScopeText")]
    public record SetScopeTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<SetScopeTextRequestResult>
    {
    }
    /// <param name="Scope">The resulting CSS Scope rule after modification.</param>
    public record SetScopeTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("scope")]
      ChromeProtocol.Domains.CSS.CSSScopeType Scope
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Modifies the rule selector.</summary>
    public static ChromeProtocol.Domains.CSS.SetRuleSelectorRequest SetRuleSelector(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, ChromeProtocol.Domains.CSS.SourceRangeType Range, string Selector)    
    {
      return new ChromeProtocol.Domains.CSS.SetRuleSelectorRequest(StyleSheetId, Range, Selector);
    }
    /// <summary>Modifies the rule selector.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setRuleSelector")]
    public record SetRuleSelectorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("range")]
      ChromeProtocol.Domains.CSS.SourceRangeType Range,
      [property: System.Text.Json.Serialization.JsonPropertyName("selector")]
      string Selector
    ) : ChromeProtocol.Core.ICommand<SetRuleSelectorRequestResult>
    {
    }
    /// <param name="SelectorList">The resulting selector list after modification.</param>
    public record SetRuleSelectorRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("selectorList")]
      ChromeProtocol.Domains.CSS.SelectorListType SelectorList
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets the new stylesheet text.</summary>
    public static ChromeProtocol.Domains.CSS.SetStyleSheetTextRequest SetStyleSheetText(ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId, string Text)    
    {
      return new ChromeProtocol.Domains.CSS.SetStyleSheetTextRequest(StyleSheetId, Text);
    }
    /// <summary>Sets the new stylesheet text.</summary>
    [ChromeProtocol.Core.MethodName("CSS.setStyleSheetText")]
    public record SetStyleSheetTextRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("styleSheetId")]
      ChromeProtocol.Domains.CSS.StyleSheetIdType StyleSheetId,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text
    ) : ChromeProtocol.Core.ICommand<SetStyleSheetTextRequestResult>
    {
    }
    /// <param name="SourceMapURL">URL of source map associated with script (if any).</param>
    public record SetStyleSheetTextRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("sourceMapURL")]
      string? SourceMapURL = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Applies specified style edits one after another in the given order.</summary>
    /// <param name="NodeForPropertySyntaxValidation">
    /// NodeId for the DOM node in whose context custom property declarations for registered properties should be<br/>
    /// validated. If omitted, declarations in the new rule text can only be validated statically, which may produce<br/>
    /// incorrect results if the declaration contains a var() for example.<br/>
    /// </param>
    public static ChromeProtocol.Domains.CSS.SetStyleTextsRequest SetStyleTexts(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.StyleDeclarationEditType> Edits, ChromeProtocol.Domains.DOM.NodeIdType? NodeForPropertySyntaxValidation = default)    
    {
      return new ChromeProtocol.Domains.CSS.SetStyleTextsRequest(Edits, NodeForPropertySyntaxValidation);
    }
    /// <summary>Applies specified style edits one after another in the given order.</summary>
    /// <param name="NodeForPropertySyntaxValidation">
    /// NodeId for the DOM node in whose context custom property declarations for registered properties should be<br/>
    /// validated. If omitted, declarations in the new rule text can only be validated statically, which may produce<br/>
    /// incorrect results if the declaration contains a var() for example.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("CSS.setStyleTexts")]
    public record SetStyleTextsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("edits")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.StyleDeclarationEditType> Edits,
      [property: System.Text.Json.Serialization.JsonPropertyName("nodeForPropertySyntaxValidation")]
      ChromeProtocol.Domains.DOM.NodeIdType? NodeForPropertySyntaxValidation = default
    ) : ChromeProtocol.Core.ICommand<SetStyleTextsRequestResult>
    {
    }
    /// <param name="Styles">The resulting styles after modification.</param>
    public record SetStyleTextsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("styles")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.CSSStyleType> Styles
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables the selector recording.</summary>
    public static ChromeProtocol.Domains.CSS.StartRuleUsageTrackingRequest StartRuleUsageTracking()    
    {
      return new ChromeProtocol.Domains.CSS.StartRuleUsageTrackingRequest();
    }
    /// <summary>Enables the selector recording.</summary>
    [ChromeProtocol.Core.MethodName("CSS.startRuleUsageTracking")]
    public record StartRuleUsageTrackingRequest() : ChromeProtocol.Core.ICommand<StartRuleUsageTrackingRequestResult>
    {
    }
    public record StartRuleUsageTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Stop tracking rule usage and return the list of rules that were used since last call to<br/>
    /// `takeCoverageDelta` (or since start of coverage instrumentation).<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.StopRuleUsageTrackingRequest StopRuleUsageTracking()    
    {
      return new ChromeProtocol.Domains.CSS.StopRuleUsageTrackingRequest();
    }
    /// <summary>
    /// Stop tracking rule usage and return the list of rules that were used since last call to<br/>
    /// `takeCoverageDelta` (or since start of coverage instrumentation).<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.stopRuleUsageTracking")]
    public record StopRuleUsageTrackingRequest() : ChromeProtocol.Core.ICommand<StopRuleUsageTrackingRequestResult>
    {
    }
    public record StopRuleUsageTrackingRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("ruleUsage")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.RuleUsageType> RuleUsage
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Obtain list of rules that became used since last call to this method (or since start of coverage<br/>
    /// instrumentation).<br/>
    /// </summary>
    public static ChromeProtocol.Domains.CSS.TakeCoverageDeltaRequest TakeCoverageDelta()    
    {
      return new ChromeProtocol.Domains.CSS.TakeCoverageDeltaRequest();
    }
    /// <summary>
    /// Obtain list of rules that became used since last call to this method (or since start of coverage<br/>
    /// instrumentation).<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("CSS.takeCoverageDelta")]
    public record TakeCoverageDeltaRequest() : ChromeProtocol.Core.ICommand<TakeCoverageDeltaRequestResult>
    {
    }
    /// <param name="Timestamp">Monotonically increasing time, in seconds.</param>
    public record TakeCoverageDeltaRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("coverage")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.CSS.RuleUsageType> Coverage,
      [property: System.Text.Json.Serialization.JsonPropertyName("timestamp")]
      double Timestamp
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables/disables rendering of local CSS fonts (enabled by default).</summary>
    /// <param name="Enabled">Whether rendering of local fonts is enabled.</param>
    public static ChromeProtocol.Domains.CSS.SetLocalFontsEnabledRequest SetLocalFontsEnabled(bool Enabled)    
    {
      return new ChromeProtocol.Domains.CSS.SetLocalFontsEnabledRequest(Enabled);
    }
    /// <summary>Enables/disables rendering of local CSS fonts (enabled by default).</summary>
    /// <param name="Enabled">Whether rendering of local fonts is enabled.</param>
    [ChromeProtocol.Core.MethodName("CSS.setLocalFontsEnabled")]
    public record SetLocalFontsEnabledRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetLocalFontsEnabledRequestResult>
    {
    }
    public record SetLocalFontsEnabledRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
