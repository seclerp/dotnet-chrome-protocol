// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Defines commands and events for browser extensions.</summary>
  public static partial class Extensions
  {
    /// <summary>Storage areas.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StorageAreaType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Installs an unpacked extension from the filesystem similar to<br/>
    /// --load-extension CLI flags. Returns extension ID once the extension<br/>
    /// has been installed. Available if the client is connected using the<br/>
    /// --remote-debugging-pipe flag and the --enable-unsafe-extension-debugging<br/>
    /// flag is set.<br/>
    /// </summary>
    /// <param name="Path">Absolute file path.</param>
    public static ChromeProtocol.Domains.Extensions.LoadUnpackedRequest LoadUnpacked(string Path)    
    {
      return new ChromeProtocol.Domains.Extensions.LoadUnpackedRequest(Path);
    }
    /// <summary>
    /// Installs an unpacked extension from the filesystem similar to<br/>
    /// --load-extension CLI flags. Returns extension ID once the extension<br/>
    /// has been installed. Available if the client is connected using the<br/>
    /// --remote-debugging-pipe flag and the --enable-unsafe-extension-debugging<br/>
    /// flag is set.<br/>
    /// </summary>
    /// <param name="Path">Absolute file path.</param>
    [ChromeProtocol.Core.MethodName("Extensions.loadUnpacked")]
    public record LoadUnpackedRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("path")]
      string Path
    ) : ChromeProtocol.Core.ICommand<LoadUnpackedRequestResult>
    {
    }
    /// <param name="Id">Extension id.</param>
    public record LoadUnpackedRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Gets data from extension storage in the given `storageArea`. If `keys` is<br/>
    /// specified, these are used to filter the result.<br/>
    /// </summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to retrieve data from.</param>
    /// <param name="Keys">Keys to retrieve.</param>
    public static ChromeProtocol.Domains.Extensions.GetStorageItemsRequest GetStorageItems(string Id, ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea, System.Collections.Generic.IReadOnlyList<string>? Keys = default)    
    {
      return new ChromeProtocol.Domains.Extensions.GetStorageItemsRequest(Id, StorageArea, Keys);
    }
    /// <summary>
    /// Gets data from extension storage in the given `storageArea`. If `keys` is<br/>
    /// specified, these are used to filter the result.<br/>
    /// </summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to retrieve data from.</param>
    /// <param name="Keys">Keys to retrieve.</param>
    [ChromeProtocol.Core.MethodName("Extensions.getStorageItems")]
    public record GetStorageItemsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("storageArea")]
      ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea,
      [property: System.Text.Json.Serialization.JsonPropertyName("keys")]
      System.Collections.Generic.IReadOnlyList<string>? Keys = default
    ) : ChromeProtocol.Core.ICommand<GetStorageItemsRequestResult>
    {
    }
    public record GetStorageItemsRequestResult(
      [property: System.Text.Json.Serialization.JsonPropertyName("data")]
      System.Text.Json.Nodes.JsonObject Data
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Removes `keys` from extension storage in the given `storageArea`.</summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to remove data from.</param>
    /// <param name="Keys">Keys to remove.</param>
    public static ChromeProtocol.Domains.Extensions.RemoveStorageItemsRequest RemoveStorageItems(string Id, ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea, System.Collections.Generic.IReadOnlyList<string> Keys)    
    {
      return new ChromeProtocol.Domains.Extensions.RemoveStorageItemsRequest(Id, StorageArea, Keys);
    }
    /// <summary>Removes `keys` from extension storage in the given `storageArea`.</summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to remove data from.</param>
    /// <param name="Keys">Keys to remove.</param>
    [ChromeProtocol.Core.MethodName("Extensions.removeStorageItems")]
    public record RemoveStorageItemsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("storageArea")]
      ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea,
      [property: System.Text.Json.Serialization.JsonPropertyName("keys")]
      System.Collections.Generic.IReadOnlyList<string> Keys
    ) : ChromeProtocol.Core.ICommand<RemoveStorageItemsRequestResult>
    {
    }
    public record RemoveStorageItemsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears extension storage in the given `storageArea`.</summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to remove data from.</param>
    public static ChromeProtocol.Domains.Extensions.ClearStorageItemsRequest ClearStorageItems(string Id, ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea)    
    {
      return new ChromeProtocol.Domains.Extensions.ClearStorageItemsRequest(Id, StorageArea);
    }
    /// <summary>Clears extension storage in the given `storageArea`.</summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to remove data from.</param>
    [ChromeProtocol.Core.MethodName("Extensions.clearStorageItems")]
    public record ClearStorageItemsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("storageArea")]
      ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea
    ) : ChromeProtocol.Core.ICommand<ClearStorageItemsRequestResult>
    {
    }
    public record ClearStorageItemsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Sets `values` in extension storage in the given `storageArea`. The provided `values`<br/>
    /// will be merged with existing values in the storage area.<br/>
    /// </summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to set data in.</param>
    /// <param name="Values">Values to set.</param>
    public static ChromeProtocol.Domains.Extensions.SetStorageItemsRequest SetStorageItems(string Id, ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea, System.Text.Json.Nodes.JsonObject Values)    
    {
      return new ChromeProtocol.Domains.Extensions.SetStorageItemsRequest(Id, StorageArea, Values);
    }
    /// <summary>
    /// Sets `values` in extension storage in the given `storageArea`. The provided `values`<br/>
    /// will be merged with existing values in the storage area.<br/>
    /// </summary>
    /// <param name="Id">ID of extension.</param>
    /// <param name="StorageArea">StorageArea to set data in.</param>
    /// <param name="Values">Values to set.</param>
    [ChromeProtocol.Core.MethodName("Extensions.setStorageItems")]
    public record SetStorageItemsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("id")]
      string Id,
      [property: System.Text.Json.Serialization.JsonPropertyName("storageArea")]
      ChromeProtocol.Domains.Extensions.StorageAreaType StorageArea,
      [property: System.Text.Json.Serialization.JsonPropertyName("values")]
      System.Text.Json.Nodes.JsonObject Values
    ) : ChromeProtocol.Core.ICommand<SetStorageItemsRequestResult>
    {
    }
    public record SetStorageItemsRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
