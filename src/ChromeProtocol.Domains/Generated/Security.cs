// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>Security</summary>
  public static partial class Security
  {
    /// <summary>An internal certificate ID value.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CertificateIdType(
      int Value
    ) : ChromeProtocol.Core.PrimitiveType<int>(Value)
    {
    }
    /// <summary>
    /// A description of mixed content (HTTP resources on HTTPS pages), as defined by<br/>
    /// https://www.w3.org/TR/mixed-content/#categories<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record MixedContentTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>The security level of a page or resource.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SecurityStateType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Details about the security state of the page certificate.</summary>
    /// <param name="Protocol">Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;).</param>
    /// <param name="KeyExchange">Key Exchange used by the connection, or the empty string if not applicable.</param>
    /// <param name="Cipher">Cipher name.</param>
    /// <param name="Certificate">Page certificate.</param>
    /// <param name="SubjectName">Certificate subject name.</param>
    /// <param name="Issuer">Name of the issuing CA.</param>
    /// <param name="ValidFrom">Certificate valid from date.</param>
    /// <param name="ValidTo">Certificate valid to (expiration) date</param>
    /// <param name="CertificateHasWeakSignature">True if the certificate uses a weak signature algorithm.</param>
    /// <param name="CertificateHasSha1Signature">True if the certificate has a SHA1 signature in the chain.</param>
    /// <param name="ModernSSL">True if modern SSL</param>
    /// <param name="ObsoleteSslProtocol">True if the connection is using an obsolete SSL protocol.</param>
    /// <param name="ObsoleteSslKeyExchange">True if the connection is using an obsolete SSL key exchange.</param>
    /// <param name="ObsoleteSslCipher">True if the connection is using an obsolete SSL cipher.</param>
    /// <param name="ObsoleteSslSignature">True if the connection is using an obsolete SSL signature.</param>
    /// <param name="KeyExchangeGroup">(EC)DH group used by the connection, if applicable.</param>
    /// <param name="Mac">TLS MAC. Note that AEAD ciphers do not have separate MACs.</param>
    /// <param name="CertificateNetworkError">The highest priority network error code, if the certificate has an error.</param>
    public record CertificateSecurityStateType(
      [property: System.Text.Json.Serialization.JsonPropertyName("protocol")]
      string Protocol,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyExchange")]
      string KeyExchange,
      [property: System.Text.Json.Serialization.JsonPropertyName("cipher")]
      string Cipher,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificate")]
      System.Collections.Generic.IReadOnlyList<string> Certificate,
      [property: System.Text.Json.Serialization.JsonPropertyName("subjectName")]
      string SubjectName,
      [property: System.Text.Json.Serialization.JsonPropertyName("issuer")]
      string Issuer,
      [property: System.Text.Json.Serialization.JsonPropertyName("validFrom")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType ValidFrom,
      [property: System.Text.Json.Serialization.JsonPropertyName("validTo")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType ValidTo,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificateHasWeakSignature")]
      bool CertificateHasWeakSignature,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificateHasSha1Signature")]
      bool CertificateHasSha1Signature,
      [property: System.Text.Json.Serialization.JsonPropertyName("modernSSL")]
      bool ModernSSL,
      [property: System.Text.Json.Serialization.JsonPropertyName("obsoleteSslProtocol")]
      bool ObsoleteSslProtocol,
      [property: System.Text.Json.Serialization.JsonPropertyName("obsoleteSslKeyExchange")]
      bool ObsoleteSslKeyExchange,
      [property: System.Text.Json.Serialization.JsonPropertyName("obsoleteSslCipher")]
      bool ObsoleteSslCipher,
      [property: System.Text.Json.Serialization.JsonPropertyName("obsoleteSslSignature")]
      bool ObsoleteSslSignature,
      [property: System.Text.Json.Serialization.JsonPropertyName("keyExchangeGroup")]
      string? KeyExchangeGroup = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("mac")]
      string? Mac = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificateNetworkError")]
      string? CertificateNetworkError = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SafetyTipStatusType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="SafetyTipStatus">Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.</param>
    /// <param name="SafeUrl">The URL the safety tip suggested (&quot;Did you mean?&quot;). Only filled in for lookalike matches.</param>
    public record SafetyTipInfoType(
      [property: System.Text.Json.Serialization.JsonPropertyName("safetyTipStatus")]
      ChromeProtocol.Domains.Security.SafetyTipStatusType SafetyTipStatus,
      [property: System.Text.Json.Serialization.JsonPropertyName("safeUrl")]
      string? SafeUrl = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Security state information about the page.</summary>
    /// <param name="SecurityState">The security level of the page.</param>
    /// <param name="SecurityStateIssueIds">Array of security state issues ids.</param>
    /// <param name="CertificateSecurityState">Security state details about the page certificate.</param>
    /// <param name="SafetyTipInfo">The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.</param>
    public record VisibleSecurityStateType(
      [property: System.Text.Json.Serialization.JsonPropertyName("securityState")]
      ChromeProtocol.Domains.Security.SecurityStateType SecurityState,
      [property: System.Text.Json.Serialization.JsonPropertyName("securityStateIssueIds")]
      System.Collections.Generic.IReadOnlyList<string> SecurityStateIssueIds,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificateSecurityState")]
      ChromeProtocol.Domains.Security.CertificateSecurityStateType? CertificateSecurityState = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("safetyTipInfo")]
      ChromeProtocol.Domains.Security.SafetyTipInfoType? SafetyTipInfo = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>An explanation of an factor contributing to the security state.</summary>
    /// <param name="SecurityState">Security state representing the severity of the factor being explained.</param>
    /// <param name="Title">Title describing the type of factor.</param>
    /// <param name="Summary">Short phrase describing the type of factor.</param>
    /// <param name="Description">Full text explanation of the factor.</param>
    /// <param name="MixedContentType">The type of mixed content described by the explanation.</param>
    /// <param name="Certificate">Page certificate.</param>
    /// <param name="Recommendations">Recommendations to fix any issues.</param>
    public record SecurityStateExplanationType(
      [property: System.Text.Json.Serialization.JsonPropertyName("securityState")]
      ChromeProtocol.Domains.Security.SecurityStateType SecurityState,
      [property: System.Text.Json.Serialization.JsonPropertyName("title")]
      string Title,
      [property: System.Text.Json.Serialization.JsonPropertyName("summary")]
      string Summary,
      [property: System.Text.Json.Serialization.JsonPropertyName("description")]
      string Description,
      [property: System.Text.Json.Serialization.JsonPropertyName("mixedContentType")]
      ChromeProtocol.Domains.Security.MixedContentTypeType MixedContentType,
      [property: System.Text.Json.Serialization.JsonPropertyName("certificate")]
      System.Collections.Generic.IReadOnlyList<string> Certificate,
      [property: System.Text.Json.Serialization.JsonPropertyName("recommendations")]
      System.Collections.Generic.IReadOnlyList<string>? Recommendations = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Information about insecure content on the page.</summary>
    /// <param name="RanMixedContent">Always false.</param>
    /// <param name="DisplayedMixedContent">Always false.</param>
    /// <param name="ContainedMixedForm">Always false.</param>
    /// <param name="RanContentWithCertErrors">Always false.</param>
    /// <param name="DisplayedContentWithCertErrors">Always false.</param>
    /// <param name="RanInsecureContentStyle">Always set to unknown.</param>
    /// <param name="DisplayedInsecureContentStyle">Always set to unknown.</param>
    [System.Obsolete("This type marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record InsecureContentStatusType(
      [property: System.Text.Json.Serialization.JsonPropertyName("ranMixedContent")]
      bool RanMixedContent,
      [property: System.Text.Json.Serialization.JsonPropertyName("displayedMixedContent")]
      bool DisplayedMixedContent,
      [property: System.Text.Json.Serialization.JsonPropertyName("containedMixedForm")]
      bool ContainedMixedForm,
      [property: System.Text.Json.Serialization.JsonPropertyName("ranContentWithCertErrors")]
      bool RanContentWithCertErrors,
      [property: System.Text.Json.Serialization.JsonPropertyName("displayedContentWithCertErrors")]
      bool DisplayedContentWithCertErrors,
      [property: System.Text.Json.Serialization.JsonPropertyName("ranInsecureContentStyle")]
      ChromeProtocol.Domains.Security.SecurityStateType RanInsecureContentStyle,
      [property: System.Text.Json.Serialization.JsonPropertyName("displayedInsecureContentStyle")]
      ChromeProtocol.Domains.Security.SecurityStateType DisplayedInsecureContentStyle
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// The action to take when a certificate error occurs. continue will continue processing the<br/>
    /// request and cancel will cancel the request.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record CertificateErrorActionType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// There is a certificate error. If overriding certificate errors is enabled, then it should be<br/>
    /// handled with the `handleCertificateError` command. Note: this event does not fire if the<br/>
    /// certificate error has been allowed internally. Only one client per target should override<br/>
    /// certificate errors at the same time.<br/>
    /// </summary>
    /// <param name="EventId">The ID of the event.</param>
    /// <param name="ErrorType">The type of the error.</param>
    /// <param name="RequestURL">The url that was requested.</param>
    [ChromeProtocol.Core.MethodName("Security.certificateError")]
    [System.Obsolete("This event marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record CertificateError(
      [property: System.Text.Json.Serialization.JsonPropertyName("eventId")]
      int EventId,
      [property: System.Text.Json.Serialization.JsonPropertyName("errorType")]
      string ErrorType,
      [property: System.Text.Json.Serialization.JsonPropertyName("requestURL")]
      string RequestURL
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>The security state of the page changed.</summary>
    /// <param name="VisibleSecurityState">Security state information about the page.</param>
    [ChromeProtocol.Core.MethodName("Security.visibleSecurityStateChanged")]
    public record VisibleSecurityStateChanged(
      [property: System.Text.Json.Serialization.JsonPropertyName("visibleSecurityState")]
      ChromeProtocol.Domains.Security.VisibleSecurityStateType VisibleSecurityState
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>The security state of the page changed. No longer being sent.</summary>
    /// <param name="SecurityState">Security state.</param>
    /// <param name="SchemeIsCryptographic">True if the page was loaded over cryptographic transport such as HTTPS.</param>
    /// <param name="Explanations">
    /// Previously a list of explanations for the security state. Now always<br/>
    /// empty.<br/>
    /// </param>
    /// <param name="InsecureContentStatus">Information about insecure content on the page.</param>
    /// <param name="Summary">Overrides user-visible description of the state. Always omitted.</param>
    [ChromeProtocol.Core.MethodName("Security.securityStateChanged")]
    [System.Obsolete("This event marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SecurityStateChanged(
      [property: System.Text.Json.Serialization.JsonPropertyName("securityState")]
      ChromeProtocol.Domains.Security.SecurityStateType SecurityState,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("schemeIsCryptographic")]
      bool SchemeIsCryptographic,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("explanations")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Security.SecurityStateExplanationType> Explanations,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("insecureContentStatus")]
      ChromeProtocol.Domains.Security.InsecureContentStatusType InsecureContentStatus,
      [property: System.Obsolete("This property marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
      [property: System.Text.Json.Serialization.JsonPropertyName("summary")]
      string? Summary = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Disables tracking security state changes.</summary>
    public static ChromeProtocol.Domains.Security.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Security.DisableRequest();
    }
    /// <summary>Disables tracking security state changes.</summary>
    [ChromeProtocol.Core.MethodName("Security.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables tracking security state changes.</summary>
    public static ChromeProtocol.Domains.Security.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Security.EnableRequest();
    }
    /// <summary>Enables tracking security state changes.</summary>
    [ChromeProtocol.Core.MethodName("Security.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enable/disable whether all certificate errors should be ignored.</summary>
    /// <param name="Ignore">If true, all certificate errors will be ignored.</param>
    public static ChromeProtocol.Domains.Security.SetIgnoreCertificateErrorsRequest SetIgnoreCertificateErrors(bool Ignore)    
    {
      return new ChromeProtocol.Domains.Security.SetIgnoreCertificateErrorsRequest(Ignore);
    }
    /// <summary>Enable/disable whether all certificate errors should be ignored.</summary>
    /// <param name="Ignore">If true, all certificate errors will be ignored.</param>
    [ChromeProtocol.Core.MethodName("Security.setIgnoreCertificateErrors")]
    public record SetIgnoreCertificateErrorsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("ignore")]
      bool Ignore
    ) : ChromeProtocol.Core.ICommand<SetIgnoreCertificateErrorsRequestResult>
    {
    }
    public record SetIgnoreCertificateErrorsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Handles a certificate error that fired a certificateError event.</summary>
    /// <param name="EventId">The ID of the event.</param>
    /// <param name="Action">The action to take on the certificate error.</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Security.HandleCertificateErrorRequest HandleCertificateError(int EventId, ChromeProtocol.Domains.Security.CertificateErrorActionType Action)    
    {
      return new ChromeProtocol.Domains.Security.HandleCertificateErrorRequest(EventId, Action);
    }
    /// <summary>Handles a certificate error that fired a certificateError event.</summary>
    /// <param name="EventId">The ID of the event.</param>
    /// <param name="Action">The action to take on the certificate error.</param>
    [ChromeProtocol.Core.MethodName("Security.handleCertificateError")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record HandleCertificateErrorRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("eventId")]
      int EventId,
      [property: System.Text.Json.Serialization.JsonPropertyName("action")]
      ChromeProtocol.Domains.Security.CertificateErrorActionType Action
    ) : ChromeProtocol.Core.ICommand<HandleCertificateErrorRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record HandleCertificateErrorRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enable/disable overriding certificate errors. If enabled, all certificate error events need to<br/>
    /// be handled by the DevTools client and should be answered with `handleCertificateError` commands.<br/>
    /// </summary>
    /// <param name="Override">If true, certificate errors will be overridden.</param>
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public static ChromeProtocol.Domains.Security.SetOverrideCertificateErrorsRequest SetOverrideCertificateErrors(bool Override)    
    {
      return new ChromeProtocol.Domains.Security.SetOverrideCertificateErrorsRequest(Override);
    }
    /// <summary>
    /// Enable/disable overriding certificate errors. If enabled, all certificate error events need to<br/>
    /// be handled by the DevTools client and should be answered with `handleCertificateError` commands.<br/>
    /// </summary>
    /// <param name="Override">If true, certificate errors will be overridden.</param>
    [ChromeProtocol.Core.MethodName("Security.setOverrideCertificateErrors")]
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetOverrideCertificateErrorsRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("override")]
      bool Override
    ) : ChromeProtocol.Core.ICommand<SetOverrideCertificateErrorsRequestResult>
    {
    }
    [System.Obsolete("This command marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
    public record SetOverrideCertificateErrorsRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
