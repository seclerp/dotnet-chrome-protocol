// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain is deprecated - use Runtime or Log instead.</summary>
  [System.Obsolete("This domain marked as deprecated in the corresponding CDP definition schema. It may be removed in the future releases.", false)]
  public static partial class Console
  {
    /// <summary>Console message.</summary>
    /// <param name="Source">Message source.</param>
    /// <param name="Level">Message severity.</param>
    /// <param name="Text">Message text.</param>
    /// <param name="Url">URL of the message origin.</param>
    /// <param name="Line">Line number in the resource that generated this message (1-based).</param>
    /// <param name="Column">Column number in the resource that generated this message (1-based).</param>
    public record ConsoleMessageType(
      [property: System.Text.Json.Serialization.JsonPropertyName("source")]
      string Source,
      [property: System.Text.Json.Serialization.JsonPropertyName("level")]
      string Level,
      [property: System.Text.Json.Serialization.JsonPropertyName("text")]
      string Text,
      [property: System.Text.Json.Serialization.JsonPropertyName("url")]
      string? Url = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("line")]
      int? Line = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("column")]
      int? Column = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Issued when new console message is added.</summary>
    /// <param name="Message">Console message that has been added.</param>
    [ChromeProtocol.Core.MethodName("Console.messageAdded")]
    public record MessageAdded(
      [property: System.Text.Json.Serialization.JsonPropertyName("message")]
      ChromeProtocol.Domains.Console.ConsoleMessageType Message
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Does nothing.</summary>
    public static ChromeProtocol.Domains.Console.ClearMessagesRequest ClearMessages()    
    {
      return new ChromeProtocol.Domains.Console.ClearMessagesRequest();
    }
    /// <summary>Does nothing.</summary>
    [ChromeProtocol.Core.MethodName("Console.clearMessages")]
    public record ClearMessagesRequest() : ChromeProtocol.Core.ICommand<ClearMessagesRequestResult>
    {
    }
    public record ClearMessagesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables console domain, prevents further console messages from being reported to the client.</summary>
    public static ChromeProtocol.Domains.Console.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Console.DisableRequest();
    }
    /// <summary>Disables console domain, prevents further console messages from being reported to the client.</summary>
    [ChromeProtocol.Core.MethodName("Console.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables console domain, sends the messages collected so far to the client by means of the<br/>
    /// `messageAdded` notification.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Console.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Console.EnableRequest();
    }
    /// <summary>
    /// Enables console domain, sends the messages collected so far to the client by means of the<br/>
    /// `messageAdded` notification.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Console.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
