// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  /// <summary>This domain allows interacting with the FedCM dialog.</summary>
  public static partial class FedCm
  {
    /// <summary>
    /// Whether this is a sign-up or sign-in action for this account, i.e.<br/>
    /// whether this account has ever been used to sign in to this RP before.<br/>
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record LoginStateType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>The types of FedCM dialogs.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record DialogTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>The buttons on the FedCM dialog.</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record DialogButtonType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>The URLs that each account has</summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AccountUrlTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Corresponds to IdentityRequestAccount</summary>
    /// <param name="TermsOfServiceUrl">These two are only set if the loginState is signUp</param>
    public record AccountType(
      [property: System.Text.Json.Serialization.JsonPropertyName("accountId")]
      string AccountId,
      [property: System.Text.Json.Serialization.JsonPropertyName("email")]
      string Email,
      [property: System.Text.Json.Serialization.JsonPropertyName("name")]
      string Name,
      [property: System.Text.Json.Serialization.JsonPropertyName("givenName")]
      string GivenName,
      [property: System.Text.Json.Serialization.JsonPropertyName("pictureUrl")]
      string PictureUrl,
      [property: System.Text.Json.Serialization.JsonPropertyName("idpConfigUrl")]
      string IdpConfigUrl,
      [property: System.Text.Json.Serialization.JsonPropertyName("idpLoginUrl")]
      string IdpLoginUrl,
      [property: System.Text.Json.Serialization.JsonPropertyName("loginState")]
      ChromeProtocol.Domains.FedCm.LoginStateType LoginState,
      [property: System.Text.Json.Serialization.JsonPropertyName("termsOfServiceUrl")]
      string? TermsOfServiceUrl = default,
      [property: System.Text.Json.Serialization.JsonPropertyName("privacyPolicyUrl")]
      string? PrivacyPolicyUrl = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Title">
    /// These exist primarily so that the caller can verify the<br/>
    /// RP context was used appropriately.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("FedCm.dialogShown")]
    public record DialogShown(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId,
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogType")]
      ChromeProtocol.Domains.FedCm.DialogTypeType DialogType,
      [property: System.Text.Json.Serialization.JsonPropertyName("accounts")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.FedCm.AccountType> Accounts,
      [property: System.Text.Json.Serialization.JsonPropertyName("title")]
      string Title,
      [property: System.Text.Json.Serialization.JsonPropertyName("subtitle")]
      string? Subtitle = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Triggered when a dialog is closed, either by user action, JS abort,<br/>
    /// or a command below.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("FedCm.dialogClosed")]
    public record DialogClosed(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <param name="DisableRejectionDelay">
    /// Allows callers to disable the promise rejection delay that would<br/>
    /// normally happen, if this is unimportant to what&#39;s being tested.<br/>
    /// (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)<br/>
    /// </param>
    public static ChromeProtocol.Domains.FedCm.EnableRequest Enable(bool? DisableRejectionDelay = default)    
    {
      return new ChromeProtocol.Domains.FedCm.EnableRequest(DisableRejectionDelay);
    }
    /// <param name="DisableRejectionDelay">
    /// Allows callers to disable the promise rejection delay that would<br/>
    /// normally happen, if this is unimportant to what&#39;s being tested.<br/>
    /// (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("FedCm.enable")]
    public record EnableRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("disableRejectionDelay")]
      bool? DisableRejectionDelay = default
    ) : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FedCm.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.FedCm.DisableRequest();
    }
    [ChromeProtocol.Core.MethodName("FedCm.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FedCm.SelectAccountRequest SelectAccount(string DialogId, int AccountIndex)    
    {
      return new ChromeProtocol.Domains.FedCm.SelectAccountRequest(DialogId, AccountIndex);
    }
    [ChromeProtocol.Core.MethodName("FedCm.selectAccount")]
    public record SelectAccountRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId,
      [property: System.Text.Json.Serialization.JsonPropertyName("accountIndex")]
      int AccountIndex
    ) : ChromeProtocol.Core.ICommand<SelectAccountRequestResult>
    {
    }
    public record SelectAccountRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FedCm.ClickDialogButtonRequest ClickDialogButton(string DialogId, ChromeProtocol.Domains.FedCm.DialogButtonType DialogButton)    
    {
      return new ChromeProtocol.Domains.FedCm.ClickDialogButtonRequest(DialogId, DialogButton);
    }
    [ChromeProtocol.Core.MethodName("FedCm.clickDialogButton")]
    public record ClickDialogButtonRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId,
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogButton")]
      ChromeProtocol.Domains.FedCm.DialogButtonType DialogButton
    ) : ChromeProtocol.Core.ICommand<ClickDialogButtonRequestResult>
    {
    }
    public record ClickDialogButtonRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FedCm.OpenUrlRequest OpenUrl(string DialogId, int AccountIndex, ChromeProtocol.Domains.FedCm.AccountUrlTypeType AccountUrlType)    
    {
      return new ChromeProtocol.Domains.FedCm.OpenUrlRequest(DialogId, AccountIndex, AccountUrlType);
    }
    [ChromeProtocol.Core.MethodName("FedCm.openUrl")]
    public record OpenUrlRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId,
      [property: System.Text.Json.Serialization.JsonPropertyName("accountIndex")]
      int AccountIndex,
      [property: System.Text.Json.Serialization.JsonPropertyName("accountUrlType")]
      ChromeProtocol.Domains.FedCm.AccountUrlTypeType AccountUrlType
    ) : ChromeProtocol.Core.ICommand<OpenUrlRequestResult>
    {
    }
    public record OpenUrlRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.FedCm.DismissDialogRequest DismissDialog(string DialogId, bool? TriggerCooldown = default)    
    {
      return new ChromeProtocol.Domains.FedCm.DismissDialogRequest(DialogId, TriggerCooldown);
    }
    [ChromeProtocol.Core.MethodName("FedCm.dismissDialog")]
    public record DismissDialogRequest(
      [property: System.Text.Json.Serialization.JsonPropertyName("dialogId")]
      string DialogId,
      [property: System.Text.Json.Serialization.JsonPropertyName("triggerCooldown")]
      bool? TriggerCooldown = default
    ) : ChromeProtocol.Core.ICommand<DismissDialogRequestResult>
    {
    }
    public record DismissDialogRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Resets the cooldown time, if any, to allow the next FedCM call to show<br/>
    /// a dialog even if one was recently dismissed by the user.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.FedCm.ResetCooldownRequest ResetCooldown()    
    {
      return new ChromeProtocol.Domains.FedCm.ResetCooldownRequest();
    }
    /// <summary>
    /// Resets the cooldown time, if any, to allow the next FedCM call to show<br/>
    /// a dialog even if one was recently dismissed by the user.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("FedCm.resetCooldown")]
    public record ResetCooldownRequest() : ChromeProtocol.Core.ICommand<ResetCooldownRequestResult>
    {
    }
    public record ResetCooldownRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
